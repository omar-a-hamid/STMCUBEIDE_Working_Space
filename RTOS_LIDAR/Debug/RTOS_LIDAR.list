
RTOS_LIDAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  0800e108  0800e108  0001e108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e810  0800e810  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e810  0800e810  0001e810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e818  0800e818  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e818  0800e818  0001e818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e81c  0800e81c  0001e81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          0000535c  200001f8  200001f8  000201f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005554  20005554  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f906  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e71  00000000  00000000  0003fb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  000439a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001510  00000000  00000000  00045028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024246  00000000  00000000  00046538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018fae  00000000  00000000  0006a77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d81c1  00000000  00000000  0008372c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015b8ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000074ac  00000000  00000000  0015b940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e0ec 	.word	0x0800e0ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800e0ec 	.word	0x0800e0ec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0


#if (LCD_DATA_BITS_MODE == 4)


	LCD_sendCommand(LCD_GO_TO_HOME);
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f000 f80b 	bl	8000fc0 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
 8000faa:	2028      	movs	r0, #40	; 0x28
 8000fac:	f000 f808 	bl	8000fc0 <LCD_sendCommand>
#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
 8000fb0:	200c      	movs	r0, #12
 8000fb2:	f000 f805 	bl	8000fc0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 f802 	bl	8000fc0 <LCD_sendCommand>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(unsigned char  command)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(10); /* delay for processing Tas = 50ns */
	 /* Enable LCD E=1 */
	HAL_Delay(10); /* delay for processing Tpw - Tdws = 190ns */
	HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_RESET);
#elif (LCD_DATA_BITS_MODE == 4)
	unsigned char val = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
#if (LCD_FIRST_DATA_PIN  == 999)
	val= command & 0xF0;
#elif (LCD_FIRST_DATA_PIN  == 222)
	val= (command>>4) & 0x0F;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	73fb      	strb	r3, [r7, #15]
#endif

		writePort_4bit(val);
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f8ea 	bl	80011b0 <writePort_4bit>
		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2104      	movs	r1, #4
 8000fe0:	481b      	ldr	r0, [pc, #108]	; (8001050 <LCD_sendCommand+0x90>)
 8000fe2:	f003 fa83 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4819      	ldr	r0, [pc, #100]	; (8001050 <LCD_sendCommand+0x90>)
 8000fec:	f003 fa7e 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4816      	ldr	r0, [pc, #88]	; (8001050 <LCD_sendCommand+0x90>)
 8000ff6:	f003 fa79 	bl	80044ec <HAL_GPIO_WritePin>

		/* Data Mode RS=1 */
		 /* write data to LCD so RW=0 */
		HAL_Delay(2); /* delay for processing Tas = 50ns */
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f002 fbd2 	bl	80037a4 <HAL_Delay>

		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2104      	movs	r1, #4
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <LCD_sendCommand+0x90>)
 8001006:	f003 fa71 	bl	80044ec <HAL_GPIO_WritePin>

#if (LCD_FIRST_DATA_PIN  == 999)
		val= ((command<<4) & 0xF0);
#elif (LCD_FIRST_DATA_PIN  == 222)
		val= (command & 0x0F);
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 030f 	and.w	r3, r3, #15
 8001010:	73fb      	strb	r3, [r7, #15]
#endif
		writePort_4bit(val);
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8cb 	bl	80011b0 <writePort_4bit>
		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2104      	movs	r1, #4
 800101e:	480c      	ldr	r0, [pc, #48]	; (8001050 <LCD_sendCommand+0x90>)
 8001020:	f003 fa64 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2102      	movs	r1, #2
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <LCD_sendCommand+0x90>)
 800102a:	f003 fa5f 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2101      	movs	r1, #1
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <LCD_sendCommand+0x90>)
 8001034:	f003 fa5a 	bl	80044ec <HAL_GPIO_WritePin>

		/* Data Mode RS=1 */
		 /* write data to LCD so RW=0 */
		HAL_Delay(2); /* delay for processing Tas = 50ns */
 8001038:	2002      	movs	r0, #2
 800103a:	f002 fbb3 	bl	80037a4 <HAL_Delay>

		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2104      	movs	r1, #4
 8001042:	4803      	ldr	r0, [pc, #12]	; (8001050 <LCD_sendCommand+0x90>)
 8001044:	f003 fa52 	bl	80044ec <HAL_GPIO_WritePin>

#endif

}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40020c00 	.word	0x40020c00

08001054 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(unsigned char  data)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(10); /* delay for processing Tas = 50ns */
	 /* Enable LCD E=1 */
	HAL_Delay(10); /* delay for processing Tpw - Tdws = 190ns */
	HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_RESET);
#elif (LCD_DATA_BITS_MODE == 4)
	unsigned char val = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
#if (LCD_FIRST_DATA_PIN  == 999)
	val= data & 0xF0;
#elif (LCD_FIRST_DATA_PIN  == 222)
	val= (data>>4) & 0x0F;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	091b      	lsrs	r3, r3, #4
 8001066:	73fb      	strb	r3, [r7, #15]
#endif

		writePort_4bit(val);
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f8a0 	bl	80011b0 <writePort_4bit>
		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2104      	movs	r1, #4
 8001074:	481b      	ldr	r0, [pc, #108]	; (80010e4 <LCD_displayCharacter+0x90>)
 8001076:	f003 fa39 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2102      	movs	r1, #2
 800107e:	4819      	ldr	r0, [pc, #100]	; (80010e4 <LCD_displayCharacter+0x90>)
 8001080:	f003 fa34 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2101      	movs	r1, #1
 8001088:	4816      	ldr	r0, [pc, #88]	; (80010e4 <LCD_displayCharacter+0x90>)
 800108a:	f003 fa2f 	bl	80044ec <HAL_GPIO_WritePin>

		/* Data Mode RS=1 */
		 /* write data to LCD so RW=0 */
		HAL_Delay(2);
 800108e:	2002      	movs	r0, #2
 8001090:	f002 fb88 	bl	80037a4 <HAL_Delay>
		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2104      	movs	r1, #4
 8001098:	4812      	ldr	r0, [pc, #72]	; (80010e4 <LCD_displayCharacter+0x90>)
 800109a:	f003 fa27 	bl	80044ec <HAL_GPIO_WritePin>
#if (LCD_FIRST_DATA_PIN  == 999)
		val= ((data<<4) & 0xF0);
#elif (LCD_FIRST_DATA_PIN  == 222)
		val= (data & 0x0F);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	73fb      	strb	r3, [r7, #15]
#endif

		writePort_4bit(val);
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f881 	bl	80011b0 <writePort_4bit>
		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2104      	movs	r1, #4
 80010b2:	480c      	ldr	r0, [pc, #48]	; (80010e4 <LCD_displayCharacter+0x90>)
 80010b4:	f003 fa1a 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2102      	movs	r1, #2
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <LCD_displayCharacter+0x90>)
 80010be:	f003 fa15 	bl	80044ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <LCD_displayCharacter+0x90>)
 80010c8:	f003 fa10 	bl	80044ec <HAL_GPIO_WritePin>

		/* Data Mode RS=1 */
		 /* write data to LCD so RW=0 */
		HAL_Delay(2); /* delay for processing Tas = 50ns */
 80010cc:	2002      	movs	r0, #2
 80010ce:	f002 fb69 	bl	80037a4 <HAL_Delay>

		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2104      	movs	r1, #4
 80010d6:	4803      	ldr	r0, [pc, #12]	; (80010e4 <LCD_displayCharacter+0x90>)
 80010d8:	f003 fa08 	bl	80044ec <HAL_GPIO_WritePin>

#endif
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40020c00 	.word	0x40020c00

080010e8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	unsigned char  i = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
//	{
//		LCD_displayCharacter(Str[i]);
//		i++;
//	}
	/***************** Another Method ***********************/
	while((*Str) != '\0')
 80010f4:	e007      	b.n	8001106 <LCD_displayString+0x1e>
	{
		LCD_displayCharacter(*Str);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ffaa 	bl	8001054 <LCD_displayCharacter>
		Str++;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
	while((*Str) != '\0')
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f3      	bne.n	80010f6 <LCD_displayString+0xe>
	}
	 /*********************************************************/
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(unsigned char  row,unsigned char  col)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	460a      	mov	r2, r1
 8001122:	71fb      	strb	r3, [r7, #7]
 8001124:	4613      	mov	r3, r2
 8001126:	71bb      	strb	r3, [r7, #6]
	unsigned char  lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b03      	cmp	r3, #3
 800112c:	d819      	bhi.n	8001162 <LCD_moveCursor+0x4a>
 800112e:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <LCD_moveCursor+0x1c>)
 8001130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001134:	08001145 	.word	0x08001145
 8001138:	0800114b 	.word	0x0800114b
 800113c:	08001153 	.word	0x08001153
 8001140:	0800115b 	.word	0x0800115b
	{
	case 0:
		lcd_memory_address=col;
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	73fb      	strb	r3, [r7, #15]
		break;
 8001148:	e00b      	b.n	8001162 <LCD_moveCursor+0x4a>
	case 1:
		lcd_memory_address=col+0x40;
 800114a:	79bb      	ldrb	r3, [r7, #6]
 800114c:	3340      	adds	r3, #64	; 0x40
 800114e:	73fb      	strb	r3, [r7, #15]
		break;
 8001150:	e007      	b.n	8001162 <LCD_moveCursor+0x4a>
	case 2:
		lcd_memory_address=col+0x10;
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	3310      	adds	r3, #16
 8001156:	73fb      	strb	r3, [r7, #15]
		break;
 8001158:	e003      	b.n	8001162 <LCD_moveCursor+0x4a>
	case 3:
		lcd_memory_address=col+0x50;
 800115a:	79bb      	ldrb	r3, [r7, #6]
 800115c:	3350      	adds	r3, #80	; 0x50
 800115e:	73fb      	strb	r3, [r7, #15]
		break;
 8001160:	bf00      	nop
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001168:	b2db      	uxtb	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff28 	bl	8000fc0 <LCD_sendCommand>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(unsigned char  row,unsigned char  col,const char *Str)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	603a      	str	r2, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	460b      	mov	r3, r1
 8001186:	71bb      	strb	r3, [r7, #6]
	LCD_moveCursor(row,col); /* go to to the required LCD position */
 8001188:	79ba      	ldrb	r2, [r7, #6]
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ffc2 	bl	8001118 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
 8001194:	6838      	ldr	r0, [r7, #0]
 8001196:	f7ff ffa7 	bl	80010e8 <LCD_displayString>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff ff0a 	bl	8000fc0 <LCD_sendCommand>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <writePort_4bit>:
	HAL_GPIO_WritePin(DATA_PORT_ID, D1_PIN, ((datain>>1)&0x01));
	HAL_GPIO_WritePin(DATA_PORT_ID, D0_PIN, ((datain>>0)&0x01));

}
void writePort_4bit(unsigned char datain)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DATA_PORT_ID, D7_PIN, ((datain>>7)&0x01));
	HAL_GPIO_WritePin(DATA_PORT_ID, D6_PIN, ((datain>>6)&0x01));
	HAL_GPIO_WritePin(DATA_PORT_ID, D5_PIN, ((datain>>5)&0x01));
	HAL_GPIO_WritePin(DATA_PORT_ID, D4_PIN, ((datain>>4)&0x01));
#elif (LCD_FIRST_DATA_PIN  == 222)
	HAL_GPIO_WritePin(DATA_PORT_ID, D3_PIN, ((datain>>3)&0x01));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	08db      	lsrs	r3, r3, #3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	2108      	movs	r1, #8
 80011ca:	4813      	ldr	r0, [pc, #76]	; (8001218 <writePort_4bit+0x68>)
 80011cc:	f003 f98e 	bl	80044ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_PORT_ID, D2_PIN, ((datain>>2)&0x01));
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	2104      	movs	r1, #4
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <writePort_4bit+0x68>)
 80011e2:	f003 f983 	bl	80044ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_PORT_ID, D1_PIN, ((datain>>1)&0x01));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	085b      	lsrs	r3, r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	2102      	movs	r1, #2
 80011f6:	4808      	ldr	r0, [pc, #32]	; (8001218 <writePort_4bit+0x68>)
 80011f8:	f003 f978 	bl	80044ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_PORT_ID, D0_PIN, ((datain>>0)&0x01));
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	2101      	movs	r1, #1
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <writePort_4bit+0x68>)
 800120a:	f003 f96f 	bl	80044ec <HAL_GPIO_WritePin>
#endif
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40020400 	.word	0x40020400

0800121c <Lidar_get_distance>:

uint16_t Global_u16LidarDistance=500;
uint16_t strength;
uint16_t temp;

uint8_t Lidar_get_distance(uint8_t *buf, uint32_t len) {
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]

	uint32_t i = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]

	uint8_t error_state = ERROR_FRMAE;
 800122a:	2300      	movs	r3, #0
 800122c:	72fb      	strb	r3, [r7, #11]

	uint8_t chk_cal = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	72bb      	strb	r3, [r7, #10]

	/*check frame length  */
	if (TFMINI_DATA_Len == len) {
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	2b09      	cmp	r3, #9
 8001236:	d14a      	bne.n	80012ce <Lidar_get_distance+0xb2>
		if ((TFMINT_DATA_HEAD == buf[0]) && (TFMINT_DATA_HEAD == buf[1])) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b59      	cmp	r3, #89	; 0x59
 800123e:	d146      	bne.n	80012ce <Lidar_get_distance+0xb2>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3301      	adds	r3, #1
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b59      	cmp	r3, #89	; 0x59
 8001248:	d141      	bne.n	80012ce <Lidar_get_distance+0xb2>
			for (i = 0; i < (TFMINI_DATA_Len - 1); i++) {
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e009      	b.n	8001264 <Lidar_get_distance+0x48>
				chk_cal += buf[i];
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4413      	add	r3, r2
 8001256:	781a      	ldrb	r2, [r3, #0]
 8001258:	7abb      	ldrb	r3, [r7, #10]
 800125a:	4413      	add	r3, r2
 800125c:	72bb      	strb	r3, [r7, #10]
			for (i = 0; i < (TFMINI_DATA_Len - 1); i++) {
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3301      	adds	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b07      	cmp	r3, #7
 8001268:	d9f2      	bls.n	8001250 <Lidar_get_distance+0x34>
			}
			/*check if sum of byte 0 to byte 7 =check sum*/
			if (chk_cal == buf[TFMINI_DATA_Len - 1]) {
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3308      	adds	r3, #8
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	7aba      	ldrb	r2, [r7, #10]
 8001272:	429a      	cmp	r2, r3
 8001274:	d12b      	bne.n	80012ce <Lidar_get_distance+0xb2>
				strength= buf[4] | (buf[5] << 8);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3304      	adds	r3, #4
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b21a      	sxth	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3305      	adds	r3, #5
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b21b      	sxth	r3, r3
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <Lidar_get_distance+0xc0>)
 8001290:	801a      	strh	r2, [r3, #0]
                temp=buf[6] | (buf[7] << 8);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3306      	adds	r3, #6
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b21a      	sxth	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3307      	adds	r3, #7
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <Lidar_get_distance+0xc4>)
 80012ac:	801a      	strh	r2, [r3, #0]
				Global_u16LidarDistance = buf[2] | (buf[3] << 8);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3302      	adds	r3, #2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3303      	adds	r3, #3
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <Lidar_get_distance+0xc8>)
 80012c8:	801a      	strh	r2, [r3, #0]

				error_state = CORECT_FRAME;
 80012ca:	2301      	movs	r3, #1
 80012cc:	72fb      	strb	r3, [r7, #11]

				/*Error in frame */
			}
		}
	}
	return error_state;
 80012ce:	7afb      	ldrb	r3, [r7, #11]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20004bcc 	.word	0x20004bcc
 80012e0:	20004bce 	.word	0x20004bce
 80012e4:	20000000 	.word	0x20000000

080012e8 <delay_us>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void delay_us (uint32_t time)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <delay_us+0x2c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 80012f8:	bf00      	nop
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <delay_us+0x2c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	429a      	cmp	r2, r3
 8001304:	d8f9      	bhi.n	80012fa <delay_us+0x12>
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20004f2c 	.word	0x20004f2c

08001318 <UltraSonic_Read_Left>:

/*In order to get Right_Distance the ultrasonic needs to set its trig pin high for 10us
 * then set it to low and then check the time taken and calculate Right_Distance with it */
void UltraSonic_Read_Left (void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Left_TRIG_PORT_ID, Left_TRIG_PIN_ID, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001322:	480b      	ldr	r0, [pc, #44]	; (8001350 <UltraSonic_Read_Left+0x38>)
 8001324:	f003 f8e2 	bl	80044ec <HAL_GPIO_WritePin>
	delay_us(TRIG_PulseDuration);  // wait for 10 us
 8001328:	200a      	movs	r0, #10
 800132a:	f7ff ffdd 	bl	80012e8 <delay_us>
	HAL_GPIO_WritePin(Left_TRIG_PORT_ID, Left_TRIG_PIN_ID, GPIO_PIN_RESET);  // pull the TRIG pin low
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001334:	4806      	ldr	r0, [pc, #24]	; (8001350 <UltraSonic_Read_Left+0x38>)
 8001336:	f003 f8d9 	bl	80044ec <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <UltraSonic_Read_Left+0x3c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <UltraSonic_Read_Left+0x3c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0204 	orr.w	r2, r2, #4
 8001348:	60da      	str	r2, [r3, #12]
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	20004f2c 	.word	0x20004f2c

08001358 <UltraSonic_Read_Right>:
void UltraSonic_Read_Right (void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_TRIG_PORT_ID, Right_TRIG_PIN_ID, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001362:	480b      	ldr	r0, [pc, #44]	; (8001390 <UltraSonic_Read_Right+0x38>)
 8001364:	f003 f8c2 	bl	80044ec <HAL_GPIO_WritePin>
	delay_us(TRIG_PulseDuration);  // wait for 10 us
 8001368:	200a      	movs	r0, #10
 800136a:	f7ff ffbd 	bl	80012e8 <delay_us>
	HAL_GPIO_WritePin(Right_TRIG_PORT_ID, Right_TRIG_PIN_ID, GPIO_PIN_RESET);  // pull the TRIG pin low
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001374:	4806      	ldr	r0, [pc, #24]	; (8001390 <UltraSonic_Read_Right+0x38>)
 8001376:	f003 f8b9 	bl	80044ec <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <UltraSonic_Read_Right+0x3c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <UltraSonic_Read_Right+0x3c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f042 0202 	orr.w	r2, r2, #2
 8001388:	60da      	str	r2, [r3, #12]
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000
 8001394:	20004f2c 	.word	0x20004f2c

08001398 <HAL_TIM_IC_CaptureCallback>:
 * as it needs to capture the rising edge 1st and stores its time in Right_IC_Val1
 * then polarity is changed in order to capture the falling edge and stores its occurrence time in Right_IC_Val2
 * then their Right_difference is the high pulse time. */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7f1b      	ldrb	r3, [r3, #28]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d179      	bne.n	800149c <HAL_TIM_IC_CaptureCallback+0x104>
	{
		// To check if the first value is not captured yet
		if (Right_First_Captured_Flag==0)
 80013a8:	4b8f      	ldr	r3, [pc, #572]	; (80015e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d11a      	bne.n	80013e6 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			// stores the first value
			Right_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80013b0:	2100      	movs	r1, #0
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f004 fa08 	bl	80057c8 <HAL_TIM_ReadCapturedValue>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a8c      	ldr	r2, [pc, #560]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x254>)
 80013bc:	6013      	str	r3, [r2, #0]
			// set the first captured as true as we now needs to capture the falling edge
			Right_First_Captured_Flag = 1;
 80013be:	4b8a      	ldr	r3, [pc, #552]	; (80015e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 020a 	bic.w	r2, r2, #10
 80013d2:	621a      	str	r2, [r3, #32]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6a1a      	ldr	r2, [r3, #32]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0202 	orr.w	r2, r2, #2
 80013e2:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
					// xQueueSendFromISR(xDistanceQueue, &Rear_Distance, NULL);
				}
			}

}
 80013e4:	e173      	b.n	80016ce <HAL_TIM_IC_CaptureCallback+0x336>
		else if (Right_First_Captured_Flag==1)
 80013e6:	4b80      	ldr	r3, [pc, #512]	; (80015e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	f040 816f 	bne.w	80016ce <HAL_TIM_IC_CaptureCallback+0x336>
			Right_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80013f0:	2100      	movs	r1, #0
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f004 f9e8 	bl	80057c8 <HAL_TIM_ReadCapturedValue>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a7d      	ldr	r2, [pc, #500]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 80013fc:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
			if (Right_IC_Val2 > Right_IC_Val1)
 8001406:	4b7a      	ldr	r3, [pc, #488]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b78      	ldr	r3, [pc, #480]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x254>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d907      	bls.n	8001422 <HAL_TIM_IC_CaptureCallback+0x8a>
				Right_difference = Right_IC_Val2-Right_IC_Val1;
 8001412:	4b77      	ldr	r3, [pc, #476]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b75      	ldr	r3, [pc, #468]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x254>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	4a75      	ldr	r2, [pc, #468]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e00f      	b.n	8001442 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (Right_IC_Val1 > Right_IC_Val2)
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x254>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b72      	ldr	r3, [pc, #456]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d909      	bls.n	8001442 <HAL_TIM_IC_CaptureCallback+0xaa>
				Right_difference = (0xffff - Right_IC_Val1) + Right_IC_Val2;
 800142e:	4b70      	ldr	r3, [pc, #448]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4b6e      	ldr	r3, [pc, #440]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x254>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800143c:	33ff      	adds	r3, #255	; 0xff
 800143e:	4a6d      	ldr	r2, [pc, #436]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001440:	6013      	str	r3, [r2, #0]
			Right_Distance = Right_difference * 0.0175;
 8001442:	4b6c      	ldr	r3, [pc, #432]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f86c 	bl	8000524 <__aeabi_ui2d>
 800144c:	a364      	add	r3, pc, #400	; (adr r3, 80015e0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7ff f8e1 	bl	8000618 <__aeabi_dmul>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fbb3 	bl	8000bc8 <__aeabi_d2uiz>
 8001462:	4603      	mov	r3, r0
 8001464:	4a64      	ldr	r2, [pc, #400]	; (80015f8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001466:	6013      	str	r3, [r2, #0]
			Right_First_Captured_Flag = 0; // set it back to false
 8001468:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6a1a      	ldr	r2, [r3, #32]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 020a 	bic.w	r2, r2, #10
 800147c:	621a      	str	r2, [r3, #32]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a12      	ldr	r2, [r2, #32]
 8001488:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 800148a:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <HAL_TIM_IC_CaptureCallback+0x264>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	4b5a      	ldr	r3, [pc, #360]	; (80015fc <HAL_TIM_IC_CaptureCallback+0x264>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0202 	bic.w	r2, r2, #2
 8001498:	60da      	str	r2, [r3, #12]
}
 800149a:	e118      	b.n	80016ce <HAL_TIM_IC_CaptureCallback+0x336>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7f1b      	ldrb	r3, [r3, #28]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d179      	bne.n	8001598 <HAL_TIM_IC_CaptureCallback+0x200>
				if (Left_First_Captured_Flag==0)
 80014a4:	4b56      	ldr	r3, [pc, #344]	; (8001600 <HAL_TIM_IC_CaptureCallback+0x268>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d11a      	bne.n	80014e2 <HAL_TIM_IC_CaptureCallback+0x14a>
					Left_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80014ac:	2104      	movs	r1, #4
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f004 f98a 	bl	80057c8 <HAL_TIM_ReadCapturedValue>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4a53      	ldr	r2, [pc, #332]	; (8001604 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80014b8:	6013      	str	r3, [r2, #0]
					Left_First_Captured_Flag = 1;
 80014ba:	4b51      	ldr	r3, [pc, #324]	; (8001600 <HAL_TIM_IC_CaptureCallback+0x268>)
 80014bc:	2201      	movs	r2, #1
 80014be:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6a1a      	ldr	r2, [r3, #32]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80014ce:	621a      	str	r2, [r3, #32]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0220 	orr.w	r2, r2, #32
 80014de:	621a      	str	r2, [r3, #32]
}
 80014e0:	e0f5      	b.n	80016ce <HAL_TIM_IC_CaptureCallback+0x336>
				else if (Left_First_Captured_Flag==1)
 80014e2:	4b47      	ldr	r3, [pc, #284]	; (8001600 <HAL_TIM_IC_CaptureCallback+0x268>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	f040 80f1 	bne.w	80016ce <HAL_TIM_IC_CaptureCallback+0x336>
					Left_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80014ec:	2104      	movs	r1, #4
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f004 f96a 	bl	80057c8 <HAL_TIM_ReadCapturedValue>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4a44      	ldr	r2, [pc, #272]	; (8001608 <HAL_TIM_IC_CaptureCallback+0x270>)
 80014f8:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COUNTER(htim, 0);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
					if (Left_IC_Val2 > Left_IC_Val1)
 8001502:	4b41      	ldr	r3, [pc, #260]	; (8001608 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d907      	bls.n	800151e <HAL_TIM_IC_CaptureCallback+0x186>
						Left_difference = Left_IC_Val2-Left_IC_Val1;
 800150e:	4b3e      	ldr	r3, [pc, #248]	; (8001608 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	4a3c      	ldr	r2, [pc, #240]	; (800160c <HAL_TIM_IC_CaptureCallback+0x274>)
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e00f      	b.n	800153e <HAL_TIM_IC_CaptureCallback+0x1a6>
					else if (Left_IC_Val1 > Left_IC_Val2)
 800151e:	4b39      	ldr	r3, [pc, #228]	; (8001604 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b39      	ldr	r3, [pc, #228]	; (8001608 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	d909      	bls.n	800153e <HAL_TIM_IC_CaptureCallback+0x1a6>
						Left_difference = (0xffff - Left_IC_Val1) + Left_IC_Val2;
 800152a:	4b37      	ldr	r3, [pc, #220]	; (8001608 <HAL_TIM_IC_CaptureCallback+0x270>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b35      	ldr	r3, [pc, #212]	; (8001604 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001538:	33ff      	adds	r3, #255	; 0xff
 800153a:	4a34      	ldr	r2, [pc, #208]	; (800160c <HAL_TIM_IC_CaptureCallback+0x274>)
 800153c:	6013      	str	r3, [r2, #0]
					Left_Distance = Left_difference * 0.0175;
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_TIM_IC_CaptureCallback+0x274>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ffee 	bl	8000524 <__aeabi_ui2d>
 8001548:	a325      	add	r3, pc, #148	; (adr r3, 80015e0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f7ff f863 	bl	8000618 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fb35 	bl	8000bc8 <__aeabi_d2uiz>
 800155e:	4603      	mov	r3, r0
 8001560:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001562:	6013      	str	r3, [r2, #0]
					Left_First_Captured_Flag = 0; // set it back to false
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001578:	621a      	str	r2, [r3, #32]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a12      	ldr	r2, [r2, #32]
 8001584:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_TIM_IC_CaptureCallback+0x264>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_TIM_IC_CaptureCallback+0x264>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0204 	bic.w	r2, r2, #4
 8001594:	60da      	str	r2, [r3, #12]
}
 8001596:	e09a      	b.n	80016ce <HAL_TIM_IC_CaptureCallback+0x336>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7f1b      	ldrb	r3, [r3, #28]
 800159c:	2b04      	cmp	r3, #4
 800159e:	f040 8096 	bne.w	80016ce <HAL_TIM_IC_CaptureCallback+0x336>
				if (Rear_First_Captured_Flag==0)
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d138      	bne.n	800161c <HAL_TIM_IC_CaptureCallback+0x284>
					Rear_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80015aa:	2108      	movs	r1, #8
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f004 f90b 	bl	80057c8 <HAL_TIM_ReadCapturedValue>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a18      	ldr	r2, [pc, #96]	; (8001618 <HAL_TIM_IC_CaptureCallback+0x280>)
 80015b6:	6013      	str	r3, [r2, #0]
					Rear_First_Captured_Flag = 1;
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6a1a      	ldr	r2, [r3, #32]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80015cc:	621a      	str	r2, [r3, #32]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a1a      	ldr	r2, [r3, #32]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015dc:	621a      	str	r2, [r3, #32]
}
 80015de:	e076      	b.n	80016ce <HAL_TIM_IC_CaptureCallback+0x336>
 80015e0:	1eb851ec 	.word	0x1eb851ec
 80015e4:	3f91eb85 	.word	0x3f91eb85
 80015e8:	20000220 	.word	0x20000220
 80015ec:	20000214 	.word	0x20000214
 80015f0:	20000218 	.word	0x20000218
 80015f4:	2000021c 	.word	0x2000021c
 80015f8:	20000224 	.word	0x20000224
 80015fc:	20004f2c 	.word	0x20004f2c
 8001600:	20000234 	.word	0x20000234
 8001604:	20000228 	.word	0x20000228
 8001608:	2000022c 	.word	0x2000022c
 800160c:	20000230 	.word	0x20000230
 8001610:	20000238 	.word	0x20000238
 8001614:	20000248 	.word	0x20000248
 8001618:	2000023c 	.word	0x2000023c
				else if (Rear_First_Captured_Flag==1)
 800161c:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <HAL_TIM_IC_CaptureCallback+0x348>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d154      	bne.n	80016ce <HAL_TIM_IC_CaptureCallback+0x336>
					Rear_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001624:	2108      	movs	r1, #8
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f004 f8ce 	bl	80057c8 <HAL_TIM_ReadCapturedValue>
 800162c:	4603      	mov	r3, r0
 800162e:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001630:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COUNTER(htim, 0);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
					if (Rear_IC_Val2 > Rear_IC_Val1)
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0x34c>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_TIM_IC_CaptureCallback+0x350>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d907      	bls.n	8001656 <HAL_TIM_IC_CaptureCallback+0x2be>
						Rear_difference = Rear_IC_Val2-Rear_IC_Val1;
 8001646:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_TIM_IC_CaptureCallback+0x350>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	4a26      	ldr	r2, [pc, #152]	; (80016ec <HAL_TIM_IC_CaptureCallback+0x354>)
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e00f      	b.n	8001676 <HAL_TIM_IC_CaptureCallback+0x2de>
					else if (Rear_IC_Val1 > Rear_IC_Val2)
 8001656:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_TIM_IC_CaptureCallback+0x350>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0x34c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d909      	bls.n	8001676 <HAL_TIM_IC_CaptureCallback+0x2de>
						Rear_difference = (0xffff - Rear_IC_Val1) + Rear_IC_Val2;
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_TIM_IC_CaptureCallback+0x350>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001670:	33ff      	adds	r3, #255	; 0xff
 8001672:	4a1e      	ldr	r2, [pc, #120]	; (80016ec <HAL_TIM_IC_CaptureCallback+0x354>)
 8001674:	6013      	str	r3, [r2, #0]
					Rear_Distance = Rear_difference * 0.0174;
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_TIM_IC_CaptureCallback+0x354>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff52 	bl	8000524 <__aeabi_ui2d>
 8001680:	a315      	add	r3, pc, #84	; (adr r3, 80016d8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe ffc7 	bl	8000618 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fa99 	bl	8000bc8 <__aeabi_d2uiz>
 8001696:	4603      	mov	r3, r0
 8001698:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <HAL_TIM_IC_CaptureCallback+0x358>)
 800169a:	6013      	str	r3, [r2, #0]
					Rear_First_Captured_Flag = 0; // set it back to false
 800169c:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_TIM_IC_CaptureCallback+0x348>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6a1a      	ldr	r2, [r3, #32]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80016b0:	621a      	str	r2, [r3, #32]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6a12      	ldr	r2, [r2, #32]
 80016bc:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x35c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_TIM_IC_CaptureCallback+0x35c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0208 	bic.w	r2, r2, #8
 80016cc:	60da      	str	r2, [r3, #12]
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	3bcd35a8 	.word	0x3bcd35a8
 80016dc:	3f91d14e 	.word	0x3f91d14e
 80016e0:	20000248 	.word	0x20000248
 80016e4:	20000240 	.word	0x20000240
 80016e8:	2000023c 	.word	0x2000023c
 80016ec:	20000244 	.word	0x20000244
 80016f0:	2000024c 	.word	0x2000024c
 80016f4:	20004f2c 	.word	0x20004f2c

080016f8 <GGA_decode>:
	}
}


void GGA_decode(char *GGA_buffer, GGA_STRUCT *GGA)
{
 80016f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016fc:	b094      	sub	sp, #80	; 0x50
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
	/***********separate each data to check the quality indicator************/
	int idx=0;
 8001704:	2300      	movs	r3, #0
 8001706:	64fb      	str	r3, [r7, #76]	; 0x4c
	int i=0;
 8001708:	2300      	movs	r3, #0
 800170a:	64bb      	str	r3, [r7, #72]	; 0x48
	int j = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	647b      	str	r3, [r7, #68]	; 0x44

	/*
	 * difference in time between cairo and GMT is 2 hours, 432000 seconds
	 */
	int GMT=300;
 8001710:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001714:	633b      	str	r3, [r7, #48]	; 0x30

	int hr=0;
 8001716:	2300      	movs	r3, #0
 8001718:	643b      	str	r3, [r7, #64]	; 0x40
	int min=0;
 800171a:	2300      	movs	r3, #0
 800171c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int sec=0;
 800171e:	2300      	movs	r3, #0
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38

	int day_change = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	637b      	str	r3, [r7, #52]	; 0x34
	 * buffer to store data from NMEA message
	 * max number of characters in each parameter is 12
	 */
	char data_buffer[12];

	idx=0;
 8001726:	2300      	movs	r3, #0
 8001728:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (GGA_buffer[idx] != ',')
 800172a:	e002      	b.n	8001732 <GGA_decode+0x3a>
	{
		idx++;  // 1st ',' // starting from index 0
 800172c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172e:	3301      	adds	r3, #1
 8001730:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (GGA_buffer[idx] != ',')
 8001732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	4413      	add	r3, r2
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b2c      	cmp	r3, #44	; 0x2c
 800173c:	d1f6      	bne.n	800172c <GGA_decode+0x34>
	}

	////*************GET TIME*****************/////

	idx++;
 800173e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001740:	3301      	adds	r3, #1
 8001742:	64fb      	str	r3, [r7, #76]	; 0x4c
	// reach the first number in time

	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	220c      	movs	r2, #12
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f008 fbc5 	bl	8009edc <memset>
	i=0; //resetting i
 8001752:	2300      	movs	r3, #0
 8001754:	64bb      	str	r3, [r7, #72]	; 0x48

	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001756:	e00f      	b.n	8001778 <GGA_decode+0x80>
	{
		data_buffer[i]= GGA_buffer[idx];
 8001758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	7819      	ldrb	r1, [r3, #0]
 8001760:	f107 020c 	add.w	r2, r7, #12
 8001764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001766:	4413      	add	r3, r2
 8001768:	460a      	mov	r2, r1
 800176a:	701a      	strb	r2, [r3, #0]
		i++;
 800176c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800176e:	3301      	adds	r3, #1
 8001770:	64bb      	str	r3, [r7, #72]	; 0x48
		idx++;
 8001772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001774:	3301      	adds	r3, #1
 8001776:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b2c      	cmp	r3, #44	; 0x2c
 8001782:	d1e9      	bne.n	8001758 <GGA_decode+0x60>

	/*
	 * atoi function converts an integer value from a string of characters.
	 */

	hr = (atoi(data_buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	4618      	mov	r0, r3
 800178a:	f008 fb47 	bl	8009e1c <atoi>
 800178e:	4603      	mov	r3, r0
 8001790:	4aa9      	ldr	r2, [pc, #676]	; (8001a38 <GGA_decode+0x340>)
 8001792:	fb82 1203 	smull	r1, r2, r2, r3
 8001796:	1312      	asrs	r2, r2, #12
 8001798:	17db      	asrs	r3, r3, #31
 800179a:	1ad2      	subs	r2, r2, r3
 800179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179e:	49a7      	ldr	r1, [pc, #668]	; (8001a3c <GGA_decode+0x344>)
 80017a0:	fb81 0103 	smull	r0, r1, r1, r3
 80017a4:	1149      	asrs	r1, r1, #5
 80017a6:	17db      	asrs	r3, r3, #31
 80017a8:	1acb      	subs	r3, r1, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	643b      	str	r3, [r7, #64]	; 0x40

	min = ((atoi(data_buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	4618      	mov	r0, r3
 80017b4:	f008 fb32 	bl	8009e1c <atoi>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4aa0      	ldr	r2, [pc, #640]	; (8001a3c <GGA_decode+0x344>)
 80017bc:	fb82 1203 	smull	r1, r2, r2, r3
 80017c0:	1152      	asrs	r2, r2, #5
 80017c2:	17db      	asrs	r3, r3, #31
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	4a9d      	ldr	r2, [pc, #628]	; (8001a3c <GGA_decode+0x344>)
 80017c8:	fb82 1203 	smull	r1, r2, r2, r3
 80017cc:	1151      	asrs	r1, r2, #5
 80017ce:	17da      	asrs	r2, r3, #31
 80017d0:	1a8a      	subs	r2, r1, r2
 80017d2:	2164      	movs	r1, #100	; 0x64
 80017d4:	fb01 f202 	mul.w	r2, r1, r2
 80017d8:	1a9a      	subs	r2, r3, r2
 80017da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017dc:	4b97      	ldr	r3, [pc, #604]	; (8001a3c <GGA_decode+0x344>)
 80017de:	fb83 0301 	smull	r0, r3, r3, r1
 80017e2:	1158      	asrs	r0, r3, #5
 80017e4:	17cb      	asrs	r3, r1, #31
 80017e6:	1ac3      	subs	r3, r0, r3
 80017e8:	2064      	movs	r0, #100	; 0x64
 80017ea:	fb00 f303 	mul.w	r3, r0, r3
 80017ee:	1acb      	subs	r3, r1, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c

	sec = (atoi(data_buffer)%100);
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	4618      	mov	r0, r3
 80017fa:	f008 fb0f 	bl	8009e1c <atoi>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a8e      	ldr	r2, [pc, #568]	; (8001a3c <GGA_decode+0x344>)
 8001802:	fb82 1203 	smull	r1, r2, r2, r3
 8001806:	1151      	asrs	r1, r2, #5
 8001808:	17da      	asrs	r2, r3, #31
 800180a:	1a8a      	subs	r2, r1, r2
 800180c:	2164      	movs	r1, #100	; 0x64
 800180e:	fb01 f202 	mul.w	r2, r1, r2
 8001812:	1a9b      	subs	r3, r3, r2
 8001814:	63bb      	str	r3, [r7, #56]	; 0x38

	if (sec > 59)
 8001816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001818:	2b3b      	cmp	r3, #59	; 0x3b
 800181a:	dd05      	ble.n	8001828 <GGA_decode+0x130>
	{
		sec -= 60;
 800181c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800181e:	3b3c      	subs	r3, #60	; 0x3c
 8001820:	63bb      	str	r3, [r7, #56]	; 0x38
		min++;
 8001822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001824:	3301      	adds	r3, #1
 8001826:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	if (min > 59)
 8001828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800182a:	2b3b      	cmp	r3, #59	; 0x3b
 800182c:	dd05      	ble.n	800183a <GGA_decode+0x142>
	{
		min -= 60;
 800182e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001830:	3b3c      	subs	r3, #60	; 0x3c
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
		hr++;
 8001834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001836:	3301      	adds	r3, #1
 8001838:	643b      	str	r3, [r7, #64]	; 0x40
	}
	if (hr<0)
 800183a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	da05      	bge.n	800184c <GGA_decode+0x154>
	{
		hr+=24;
 8001840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001842:	3318      	adds	r3, #24
 8001844:	643b      	str	r3, [r7, #64]	; 0x40
		day_change--;
 8001846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001848:	3b01      	subs	r3, #1
 800184a:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (hr>=24)
 800184c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800184e:	2b17      	cmp	r3, #23
 8001850:	dd05      	ble.n	800185e <GGA_decode+0x166>
	{
		hr-=24;;
 8001852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001854:	3b18      	subs	r3, #24
 8001856:	643b      	str	r3, [r7, #64]	; 0x40
		day_change++;
 8001858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185a:	3301      	adds	r3, #1
 800185c:	637b      	str	r3, [r7, #52]	; 0x34

	/*
	 * passing the time data values to GGA structure
	 */

	GGA->time.hour = hr;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001862:	601a      	str	r2, [r3, #0]
	GGA->time.minuit = min;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001868:	605a      	str	r2, [r3, #4]
	GGA->time.second = sec;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800186e:	609a      	str	r2, [r3, #8]

	////*************GET LATITUDE*****************/////

	idx++;
 8001870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001872:	3301      	adds	r3, #1
 8001874:	64fb      	str	r3, [r7, #76]	; 0x4c
	// reach the first number in latitude

	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	220c      	movs	r2, #12
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f008 fb2c 	bl	8009edc <memset>
	i=0; //resetting i
 8001884:	2300      	movs	r3, #0
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48

	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001888:	e00f      	b.n	80018aa <GGA_decode+0x1b2>
	{
		data_buffer[i]= GGA_buffer[idx];
 800188a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	7819      	ldrb	r1, [r3, #0]
 8001892:	f107 020c 	add.w	r2, r7, #12
 8001896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001898:	4413      	add	r3, r2
 800189a:	460a      	mov	r2, r1
 800189c:	701a      	strb	r2, [r3, #0]
		i++;
 800189e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018a0:	3301      	adds	r3, #1
 80018a2:	64bb      	str	r3, [r7, #72]	; 0x48
		idx++;
 80018a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a6:	3301      	adds	r3, #1
 80018a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 80018aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b2c      	cmp	r3, #44	; 0x2c
 80018b4:	d1e9      	bne.n	800188a <GGA_decode+0x192>
	}
	/*
	 * error for str length
	 */
	temp = (atoi(data_buffer));   // change the buffer to the number. It will only convert to integers
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	4618      	mov	r0, r3
 80018bc:	f008 faae 	bl	8009e1c <atoi>
 80018c0:	4603      	mov	r3, r0
 80018c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

	j = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	647b      	str	r3, [r7, #68]	; 0x44

	/*
	 * counting the number of digits before the decimal
	 */
	while (data_buffer[j] != '.')
 80018c8:	e002      	b.n	80018d0 <GGA_decode+0x1d8>
	{
		j++;
 80018ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018cc:	3301      	adds	r3, #1
 80018ce:	647b      	str	r3, [r7, #68]	; 0x44
	while (data_buffer[j] != '.')
 80018d0:	f107 020c 	add.w	r2, r7, #12
 80018d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d6:	4413      	add	r3, r2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b2e      	cmp	r3, #46	; 0x2e
 80018dc:	d1f5      	bne.n	80018ca <GGA_decode+0x1d2>
	}
	j++;
 80018de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e0:	3301      	adds	r3, #1
 80018e2:	647b      	str	r3, [r7, #68]	; 0x44

	decimal_length = (strlen(data_buffer))-j;  // calculate the number of digit after decimal
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fc7b 	bl	80001e4 <strlen>
 80018ee:	4602      	mov	r2, r0
 80018f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28

	decimal = atoi ((char *) data_buffer+j);  // separate the decimal numbers from the data_buffer
 80018f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f8:	f107 020c 	add.w	r2, r7, #12
 80018fc:	4413      	add	r3, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f008 fa8c 	bl	8009e1c <atoi>
 8001904:	6278      	str	r0, [r7, #36]	; 0x24
	 * latitude from NMEA is 1234.5678
	 * temp =1234 -> 12.34
	 * decimal= 5678 -> 0.005678
	 * latitude = 12.345678
	 */
	latitude = (temp/100)+(((temp-((temp/100)*100))+(decimal/pow(10, (decimal_length))))/60);
 8001906:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800190a:	4a4c      	ldr	r2, [pc, #304]	; (8001a3c <GGA_decode+0x344>)
 800190c:	fb82 1203 	smull	r1, r2, r2, r3
 8001910:	1152      	asrs	r2, r2, #5
 8001912:	17db      	asrs	r3, r3, #31
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	b21b      	sxth	r3, r3
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fe13 	bl	8000544 <__aeabi_i2d>
 800191e:	4604      	mov	r4, r0
 8001920:	460d      	mov	r5, r1
 8001922:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001926:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800192a:	4944      	ldr	r1, [pc, #272]	; (8001a3c <GGA_decode+0x344>)
 800192c:	fb81 0103 	smull	r0, r1, r1, r3
 8001930:	1149      	asrs	r1, r1, #5
 8001932:	17db      	asrs	r3, r3, #31
 8001934:	1acb      	subs	r3, r1, r3
 8001936:	b21b      	sxth	r3, r3
 8001938:	4619      	mov	r1, r3
 800193a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800193e:	fb03 f301 	mul.w	r3, r3, r1
 8001942:	4413      	add	r3, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fdfd 	bl	8000544 <__aeabi_i2d>
 800194a:	4680      	mov	r8, r0
 800194c:	4689      	mov	r9, r1
 800194e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001950:	f7fe fdf8 	bl	8000544 <__aeabi_i2d>
 8001954:	4682      	mov	sl, r0
 8001956:	468b      	mov	fp, r1
 8001958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800195a:	f7fe fdf3 	bl	8000544 <__aeabi_i2d>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	ec43 2b11 	vmov	d1, r2, r3
 8001966:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8001a30 <GGA_decode+0x338>
 800196a:	f00b fc09 	bl	800d180 <pow>
 800196e:	ec53 2b10 	vmov	r2, r3, d0
 8001972:	4650      	mov	r0, sl
 8001974:	4659      	mov	r1, fp
 8001976:	f7fe ff79 	bl	800086c <__aeabi_ddiv>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4640      	mov	r0, r8
 8001980:	4649      	mov	r1, r9
 8001982:	f7fe fc93 	bl	80002ac <__adddf3>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <GGA_decode+0x348>)
 8001994:	f7fe ff6a 	bl	800086c <__aeabi_ddiv>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4620      	mov	r0, r4
 800199e:	4629      	mov	r1, r5
 80019a0:	f7fe fc84 	bl	80002ac <__adddf3>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f92c 	bl	8000c08 <__aeabi_d2f>
 80019b0:	4603      	mov	r3, r0
 80019b2:	623b      	str	r3, [r7, #32]

	GGA ->position.latitude = latitude;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6a3a      	ldr	r2, [r7, #32]
 80019b8:	611a      	str	r2, [r3, #16]

	////*************GET LATITUDE DIRECTION*****************/////
	idx++; //north or south
 80019ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019bc:	3301      	adds	r3, #1
 80019be:	64fb      	str	r3, [r7, #76]	; 0x4c
	GGA ->position.NORTH_SOUTH = data_buffer[idx];
 80019c0:	f107 020c 	add.w	r2, r7, #12
 80019c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c6:	4413      	add	r3, r2
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	751a      	strb	r2, [r3, #20]
	idx++; // ',' after north or south
 80019ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d0:	3301      	adds	r3, #1
 80019d2:	64fb      	str	r3, [r7, #76]	; 0x4c

	////*************GET LONGTIUDE*****************/////

	idx++;
 80019d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d6:	3301      	adds	r3, #1
 80019d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	// reach the first number in latitude

	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	220c      	movs	r2, #12
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f008 fa7a 	bl	8009edc <memset>
	i=0; //resetting i
 80019e8:	2300      	movs	r3, #0
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48

	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 80019ec:	e00f      	b.n	8001a0e <GGA_decode+0x316>
	{
		data_buffer[i]= GGA_buffer[idx];
 80019ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	7819      	ldrb	r1, [r3, #0]
 80019f6:	f107 020c 	add.w	r2, r7, #12
 80019fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019fc:	4413      	add	r3, r2
 80019fe:	460a      	mov	r2, r1
 8001a00:	701a      	strb	r2, [r3, #0]
		i++;
 8001a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a04:	3301      	adds	r3, #1
 8001a06:	64bb      	str	r3, [r7, #72]	; 0x48
		idx++;
 8001a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b2c      	cmp	r3, #44	; 0x2c
 8001a18:	d1e9      	bne.n	80019ee <GGA_decode+0x2f6>
	}
	/*
	 * error for str length
	 */
	temp = (atoi(data_buffer));   // change the buffer to the number. It will only convert to integers
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f008 f9fc 	bl	8009e1c <atoi>
 8001a24:	4603      	mov	r3, r0
 8001a26:	85fb      	strh	r3, [r7, #46]	; 0x2e

	j = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	647b      	str	r3, [r7, #68]	; 0x44

	/*
	 * counting the number of digits before the decimal
	 */
	while (data_buffer[j] != '.')
 8001a2c:	e00d      	b.n	8001a4a <GGA_decode+0x352>
 8001a2e:	bf00      	nop
 8001a30:	00000000 	.word	0x00000000
 8001a34:	40240000 	.word	0x40240000
 8001a38:	68db8bad 	.word	0x68db8bad
 8001a3c:	51eb851f 	.word	0x51eb851f
 8001a40:	404e0000 	.word	0x404e0000
	{
		j++;
 8001a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a46:	3301      	adds	r3, #1
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
	while (data_buffer[j] != '.')
 8001a4a:	f107 020c 	add.w	r2, r7, #12
 8001a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b2e      	cmp	r3, #46	; 0x2e
 8001a56:	d1f5      	bne.n	8001a44 <GGA_decode+0x34c>
	}
	j++;
 8001a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	647b      	str	r3, [r7, #68]	; 0x44

	decimal_length = (strlen(data_buffer))-j;  // calculate the number of digit after decimal
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fbbe 	bl	80001e4 <strlen>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28

	decimal = atoi ((char *) data_buffer+j);  // separate the decimal numbers from the data_buffer
 8001a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a72:	f107 020c 	add.w	r2, r7, #12
 8001a76:	4413      	add	r3, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f008 f9cf 	bl	8009e1c <atoi>
 8001a7e:	6278      	str	r0, [r7, #36]	; 0x24
	 * longitude from NMEA is 1234.5678
	 * temp =1234 -> 12.34
	 * decimal= 5678 -> 0.005678
	 * longitude = 12.345678
	 */
	longitude = (temp/100)+(((temp-((temp/100)*100))+(decimal/pow(10, (decimal_length))))/60);
 8001a80:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a84:	4ab8      	ldr	r2, [pc, #736]	; (8001d68 <GGA_decode+0x670>)
 8001a86:	fb82 1203 	smull	r1, r2, r2, r3
 8001a8a:	1152      	asrs	r2, r2, #5
 8001a8c:	17db      	asrs	r3, r3, #31
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fd56 	bl	8000544 <__aeabi_i2d>
 8001a98:	4604      	mov	r4, r0
 8001a9a:	460d      	mov	r5, r1
 8001a9c:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001aa0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001aa4:	49b0      	ldr	r1, [pc, #704]	; (8001d68 <GGA_decode+0x670>)
 8001aa6:	fb81 0103 	smull	r0, r1, r1, r3
 8001aaa:	1149      	asrs	r1, r1, #5
 8001aac:	17db      	asrs	r3, r3, #31
 8001aae:	1acb      	subs	r3, r1, r3
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001ab8:	fb03 f301 	mul.w	r3, r3, r1
 8001abc:	4413      	add	r3, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd40 	bl	8000544 <__aeabi_i2d>
 8001ac4:	4680      	mov	r8, r0
 8001ac6:	4689      	mov	r9, r1
 8001ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001aca:	f7fe fd3b 	bl	8000544 <__aeabi_i2d>
 8001ace:	4682      	mov	sl, r0
 8001ad0:	468b      	mov	fp, r1
 8001ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ad4:	f7fe fd36 	bl	8000544 <__aeabi_i2d>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	ec43 2b11 	vmov	d1, r2, r3
 8001ae0:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 8001d60 <GGA_decode+0x668>
 8001ae4:	f00b fb4c 	bl	800d180 <pow>
 8001ae8:	ec53 2b10 	vmov	r2, r3, d0
 8001aec:	4650      	mov	r0, sl
 8001aee:	4659      	mov	r1, fp
 8001af0:	f7fe febc 	bl	800086c <__aeabi_ddiv>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4640      	mov	r0, r8
 8001afa:	4649      	mov	r1, r9
 8001afc:	f7fe fbd6 	bl	80002ac <__adddf3>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	4b97      	ldr	r3, [pc, #604]	; (8001d6c <GGA_decode+0x674>)
 8001b0e:	f7fe fead 	bl	800086c <__aeabi_ddiv>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4620      	mov	r0, r4
 8001b18:	4629      	mov	r1, r5
 8001b1a:	f7fe fbc7 	bl	80002ac <__adddf3>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f7ff f86f 	bl	8000c08 <__aeabi_d2f>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	61fb      	str	r3, [r7, #28]

	GGA ->position.logitude = longitude;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	60da      	str	r2, [r3, #12]

	////*************GET LATITUDE DIRECTION*****************/////
	idx++; //east or west
 8001b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b36:	3301      	adds	r3, #1
 8001b38:	64fb      	str	r3, [r7, #76]	; 0x4c
	GGA ->position.EAST_WEST = data_buffer[idx];
 8001b3a:	f107 020c 	add.w	r2, r7, #12
 8001b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b40:	4413      	add	r3, r2
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	755a      	strb	r2, [r3, #21]
	idx++; // ',' after east or west
 8001b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	64fb      	str	r3, [r7, #76]	; 0x4c

	////*************POSITION FIX*****************/////

	idx++;  // reached the character to identify the fix
 8001b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b50:	3301      	adds	r3, #1
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c

	if ((GGA_buffer[idx] == '1') || (GGA_buffer[idx] == '2') || (GGA_buffer[idx] == '6'))   // 0 indicates no fix yet
 8001b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b31      	cmp	r3, #49	; 0x31
 8001b5e:	d00b      	beq.n	8001b78 <GGA_decode+0x480>
 8001b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b32      	cmp	r3, #50	; 0x32
 8001b6a:	d005      	beq.n	8001b78 <GGA_decode+0x480>
 8001b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b36      	cmp	r3, #54	; 0x36
 8001b76:	d106      	bne.n	8001b86 <GGA_decode+0x48e>
	{
		GGA->quality_indicator = 1;   // fix available
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	629a      	str	r2, [r3, #40]	; 0x28
		idx++; // ',' after position fix
 8001b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b80:	3301      	adds	r3, #1
 8001b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b84:	e002      	b.n	8001b8c <GGA_decode+0x494>
	}
	else
	{
		GGA->quality_indicator = 0;   // If the fix is not available
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	////*************NUMBER OF SATTELITES*****************/////
	idx++; // number of sattelites
 8001b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b8e:	3301      	adds	r3, #1
 8001b90:	64fb      	str	r3, [r7, #76]	; 0x4c

	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	220c      	movs	r2, #12
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f008 f99e 	bl	8009edc <memset>
	i=0; //resetting i
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48

	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001ba4:	e00f      	b.n	8001bc6 <GGA_decode+0x4ce>
	{
		data_buffer[i]= GGA_buffer[idx];
 8001ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	7819      	ldrb	r1, [r3, #0]
 8001bae:	f107 020c 	add.w	r2, r7, #12
 8001bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bb4:	4413      	add	r3, r2
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
		i++;
 8001bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	64bb      	str	r3, [r7, #72]	; 0x48
		idx++;
 8001bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b2c      	cmp	r3, #44	; 0x2c
 8001bd0:	d1e9      	bne.n	8001ba6 <GGA_decode+0x4ae>
	}
	GGA ->number_of_sattelites= atoi(data_buffer);
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f008 f920 	bl	8009e1c <atoi>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
	idx++; // ',' after number of sat
 8001be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be4:	3301      	adds	r3, #1
 8001be6:	64fb      	str	r3, [r7, #76]	; 0x4c

	////*************GET ALTITUDE*****************/////

	idx++;
 8001be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bea:	3301      	adds	r3, #1
 8001bec:	64fb      	str	r3, [r7, #76]	; 0x4c
	// reach the first number in altitude

	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f008 f970 	bl	8009edc <memset>
	i=0; //resetting i
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48

	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001c00:	e00f      	b.n	8001c22 <GGA_decode+0x52a>
	{
		data_buffer[i]= GGA_buffer[idx];
 8001c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4413      	add	r3, r2
 8001c08:	7819      	ldrb	r1, [r3, #0]
 8001c0a:	f107 020c 	add.w	r2, r7, #12
 8001c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c10:	4413      	add	r3, r2
 8001c12:	460a      	mov	r2, r1
 8001c14:	701a      	strb	r2, [r3, #0]
		i++;
 8001c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c18:	3301      	adds	r3, #1
 8001c1a:	64bb      	str	r3, [r7, #72]	; 0x48
		idx++;
 8001c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c1e:	3301      	adds	r3, #1
 8001c20:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b2c      	cmp	r3, #44	; 0x2c
 8001c2c:	d1e9      	bne.n	8001c02 <GGA_decode+0x50a>
	}
	/*
	 * error for str length
	 */
	temp = (atoi(data_buffer));   // change the buffer to the number. It will only convert to integers
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	4618      	mov	r0, r3
 8001c34:	f008 f8f2 	bl	8009e1c <atoi>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	j = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	647b      	str	r3, [r7, #68]	; 0x44

	/*
	 * counting the number of digits before the decimal
	 */
	while (data_buffer[j] != '.')
 8001c40:	e002      	b.n	8001c48 <GGA_decode+0x550>
	{
		j++;
 8001c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c44:	3301      	adds	r3, #1
 8001c46:	647b      	str	r3, [r7, #68]	; 0x44
	while (data_buffer[j] != '.')
 8001c48:	f107 020c 	add.w	r2, r7, #12
 8001c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4e:	4413      	add	r3, r2
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b2e      	cmp	r3, #46	; 0x2e
 8001c54:	d1f5      	bne.n	8001c42 <GGA_decode+0x54a>
	}
	j++;
 8001c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c58:	3301      	adds	r3, #1
 8001c5a:	647b      	str	r3, [r7, #68]	; 0x44

	decimal_length = (strlen(data_buffer))-j;  // calculate the number of digit after decimal
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fabf 	bl	80001e4 <strlen>
 8001c66:	4602      	mov	r2, r0
 8001c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	62bb      	str	r3, [r7, #40]	; 0x28

	decimal = atoi ((char *) data_buffer+j);  // separate the decimal numbers from the data_buffer
 8001c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c70:	f107 020c 	add.w	r2, r7, #12
 8001c74:	4413      	add	r3, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f008 f8d0 	bl	8009e1c <atoi>
 8001c7c:	6278      	str	r0, [r7, #36]	; 0x24
	 * altitude from NMEA is 1234.5678
	 * temp =1234 -> 12.34
	 * decimal= 5678 -> 0.005678
	 * altitude = 12.345678
	 */
	altitude = (temp/100)+(((temp-((temp/100)*100))+(decimal/pow(10, (decimal_length))))/60);
 8001c7e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001c82:	4a39      	ldr	r2, [pc, #228]	; (8001d68 <GGA_decode+0x670>)
 8001c84:	fb82 1203 	smull	r1, r2, r2, r3
 8001c88:	1152      	asrs	r2, r2, #5
 8001c8a:	17db      	asrs	r3, r3, #31
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc57 	bl	8000544 <__aeabi_i2d>
 8001c96:	4604      	mov	r4, r0
 8001c98:	460d      	mov	r5, r1
 8001c9a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001c9e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001ca2:	4931      	ldr	r1, [pc, #196]	; (8001d68 <GGA_decode+0x670>)
 8001ca4:	fb81 0103 	smull	r0, r1, r1, r3
 8001ca8:	1149      	asrs	r1, r1, #5
 8001caa:	17db      	asrs	r3, r3, #31
 8001cac:	1acb      	subs	r3, r1, r3
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001cb6:	fb03 f301 	mul.w	r3, r3, r1
 8001cba:	4413      	add	r3, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fc41 	bl	8000544 <__aeabi_i2d>
 8001cc2:	4680      	mov	r8, r0
 8001cc4:	4689      	mov	r9, r1
 8001cc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cc8:	f7fe fc3c 	bl	8000544 <__aeabi_i2d>
 8001ccc:	4682      	mov	sl, r0
 8001cce:	468b      	mov	fp, r1
 8001cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cd2:	f7fe fc37 	bl	8000544 <__aeabi_i2d>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	ec43 2b11 	vmov	d1, r2, r3
 8001cde:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001d60 <GGA_decode+0x668>
 8001ce2:	f00b fa4d 	bl	800d180 <pow>
 8001ce6:	ec53 2b10 	vmov	r2, r3, d0
 8001cea:	4650      	mov	r0, sl
 8001cec:	4659      	mov	r1, fp
 8001cee:	f7fe fdbd 	bl	800086c <__aeabi_ddiv>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4640      	mov	r0, r8
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	f7fe fad7 	bl	80002ac <__adddf3>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <GGA_decode+0x674>)
 8001d0c:	f7fe fdae 	bl	800086c <__aeabi_ddiv>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	f7fe fac8 	bl	80002ac <__adddf3>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7fe ff70 	bl	8000c08 <__aeabi_d2f>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	61bb      	str	r3, [r7, #24]

	GGA ->altitude.altitude = altitude;
 8001d2c:	69b8      	ldr	r0, [r7, #24]
 8001d2e:	f7fe fc1b 	bl	8000568 <__aeabi_f2d>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	e9c1 2306 	strd	r2, r3, [r1, #24]

	////*************GET ALTITUDE DIRECTION*****************/////
	idx++; //altitude unit
 8001d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d3e:	3301      	adds	r3, #1
 8001d40:	64fb      	str	r3, [r7, #76]	; 0x4c
	GGA ->altitude.meters = data_buffer[idx];
 8001d42:	f107 020c 	add.w	r2, r7, #12
 8001d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d48:	4413      	add	r3, r2
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]




}
 8001d52:	bf00      	nop
 8001d54:	3750      	adds	r7, #80	; 0x50
 8001d56:	46bd      	mov	sp, r7
 8001d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5c:	f3af 8000 	nop.w
 8001d60:	00000000 	.word	0x00000000
 8001d64:	40240000 	.word	0x40240000
 8001d68:	51eb851f 	.word	0x51eb851f
 8001d6c:	404e0000 	.word	0x404e0000

08001d70 <RMC_decode>:

void RMC_decode(char *RMC_buffer, RMC_STRUCT *RMC)
{
 8001d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d74:	b090      	sub	sp, #64	; 0x40
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]

	float speed;
	float course;


	int day=0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
	int month=0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
	int year=0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28

	int16_t temp;

	char data_buffer[12];
	int idx=0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	int i = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	63bb      	str	r3, [r7, #56]	; 0x38
	int j = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34

	idx = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001d98:	e002      	b.n	8001da0 <RMC_decode+0x30>
	{
		idx++;  // 1st ','
 8001d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b2c      	cmp	r3, #44	; 0x2c
 8001daa:	d1f6      	bne.n	8001d9a <RMC_decode+0x2a>
	}

	idx++; //time
 8001dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dae:	3301      	adds	r3, #1
 8001db0:	63fb      	str	r3, [r7, #60]	; 0x3c


	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	220c      	movs	r2, #12
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f008 f88e 	bl	8009edc <memset>
	i=0; //resetting i
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	63bb      	str	r3, [r7, #56]	; 0x38

	while (RMC_buffer[idx] != ',')
 8001dc4:	e002      	b.n	8001dcc <RMC_decode+0x5c>
	{
		idx++;  // ',' After time
 8001dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc8:	3301      	adds	r3, #1
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b2c      	cmp	r3, #44	; 0x2c
 8001dd6:	d1f6      	bne.n	8001dc6 <RMC_decode+0x56>
	}

	idx++; //validity
 8001dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dda:	3301      	adds	r3, #1
 8001ddc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/*
	 *  'A' Indicates the data is valid
	 *  'V' indicates invalid data
	 */
	if (RMC_buffer[idx] == 'A')
 8001dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b41      	cmp	r3, #65	; 0x41
 8001de8:	d103      	bne.n	8001df2 <RMC_decode+0x82>
	{
		RMC->validity_status= 1;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2201      	movs	r2, #1
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	e002      	b.n	8001df8 <RMC_decode+0x88>
	}
	else
	{
		RMC->validity_status =0;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	60da      	str	r2, [r3, #12]
	}

	idx++; // ',' after validity
 8001df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
	/*
	 * skipping these parameters as we got them from GGA
	 */

	idx++; //latitude
 8001dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e00:	3301      	adds	r3, #1
 8001e02:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e04:	e002      	b.n	8001e0c <RMC_decode+0x9c>
	{
		idx++;  // ',' after latitude
 8001e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e08:	3301      	adds	r3, #1
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b2c      	cmp	r3, #44	; 0x2c
 8001e16:	d1f6      	bne.n	8001e06 <RMC_decode+0x96>
	}
	idx++; //north or south
 8001e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e1e:	e002      	b.n	8001e26 <RMC_decode+0xb6>
	{
		idx++;  // ',' after north or south
 8001e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e22:	3301      	adds	r3, #1
 8001e24:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b2c      	cmp	r3, #44	; 0x2c
 8001e30:	d1f6      	bne.n	8001e20 <RMC_decode+0xb0>
	}
	idx++; //longitude
 8001e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e34:	3301      	adds	r3, #1
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e38:	e002      	b.n	8001e40 <RMC_decode+0xd0>
	{
		idx++;  // ',' after longitude
 8001e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b2c      	cmp	r3, #44	; 0x2c
 8001e4a:	d1f6      	bne.n	8001e3a <RMC_decode+0xca>
	}
	idx++; //east or west
 8001e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e4e:	3301      	adds	r3, #1
 8001e50:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e52:	e002      	b.n	8001e5a <RMC_decode+0xea>
	{
		idx++;  // ',' after east or west
 8001e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e56:	3301      	adds	r3, #1
 8001e58:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b2c      	cmp	r3, #44	; 0x2c
 8001e64:	d1f6      	bne.n	8001e54 <RMC_decode+0xe4>
	}

	/************************************************GET SPEED*****************************************************/
	idx++; // speed
 8001e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e68:	3301      	adds	r3, #1
 8001e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(data_buffer, '\0', 12);
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	220c      	movs	r2, #12
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f008 f831 	bl	8009edc <memset>
	i=0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	63bb      	str	r3, [r7, #56]	; 0x38

	while (RMC_buffer[idx] != ',')
 8001e7e:	e00f      	b.n	8001ea0 <RMC_decode+0x130>
	{
		data_buffer[i] = RMC_buffer[idx];
 8001e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	7819      	ldrb	r1, [r3, #0]
 8001e88:	f107 0208 	add.w	r2, r7, #8
 8001e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e8e:	4413      	add	r3, r2
 8001e90:	460a      	mov	r2, r1
 8001e92:	701a      	strb	r2, [r3, #0]
		i++;
 8001e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e96:	3301      	adds	r3, #1
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
		idx++;
 8001e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b2c      	cmp	r3, #44	; 0x2c
 8001eaa:	d1e9      	bne.n	8001e80 <RMC_decode+0x110>
	}

	//// if the speed have some data
	if (strlen (data_buffer) > 0)
 8001eac:	f107 0308 	add.w	r3, r7, #8
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d06e      	beq.n	8001f94 <RMC_decode+0x224>
	{
		temp = (atoi(data_buffer));  // convert the data into the number
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f007 ffae 	bl	8009e1c <atoi>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	84fb      	strh	r3, [r7, #38]	; 0x26
		j = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	637b      	str	r3, [r7, #52]	; 0x34
		while (data_buffer[j] != '.')
 8001ec8:	e002      	b.n	8001ed0 <RMC_decode+0x160>
		{
			j++;   // same as above
 8001eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ecc:	3301      	adds	r3, #1
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
		while (data_buffer[j] != '.')
 8001ed0:	f107 0208 	add.w	r2, r7, #8
 8001ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed6:	4413      	add	r3, r2
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b2e      	cmp	r3, #46	; 0x2e
 8001edc:	d1f5      	bne.n	8001eca <RMC_decode+0x15a>
		}
		j++;
 8001ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34

		decimal_length = (strlen(data_buffer))-j;
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe f97b 	bl	80001e4 <strlen>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	623b      	str	r3, [r7, #32]
		decimal = atoi ((char *) data_buffer+j);
 8001ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef8:	f107 0208 	add.w	r2, r7, #8
 8001efc:	4413      	add	r3, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f007 ff8c 	bl	8009e1c <atoi>
 8001f04:	61f8      	str	r0, [r7, #28]

		speed = temp + (decimal/pow(10, (decimal_length)));
 8001f06:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fb1a 	bl	8000544 <__aeabi_i2d>
 8001f10:	4604      	mov	r4, r0
 8001f12:	460d      	mov	r5, r1
 8001f14:	69f8      	ldr	r0, [r7, #28]
 8001f16:	f7fe fb15 	bl	8000544 <__aeabi_i2d>
 8001f1a:	4680      	mov	r8, r0
 8001f1c:	4689      	mov	r9, r1
 8001f1e:	6a38      	ldr	r0, [r7, #32]
 8001f20:	f7fe fb10 	bl	8000544 <__aeabi_i2d>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	ec43 2b11 	vmov	d1, r2, r3
 8001f2c:	ed9f 0b88 	vldr	d0, [pc, #544]	; 8002150 <RMC_decode+0x3e0>
 8001f30:	f00b f926 	bl	800d180 <pow>
 8001f34:	ec53 2b10 	vmov	r2, r3, d0
 8001f38:	4640      	mov	r0, r8
 8001f3a:	4649      	mov	r1, r9
 8001f3c:	f7fe fc96 	bl	800086c <__aeabi_ddiv>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4620      	mov	r0, r4
 8001f46:	4629      	mov	r1, r5
 8001f48:	f7fe f9b0 	bl	80002ac <__adddf3>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fe58 	bl	8000c08 <__aeabi_d2f>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	61bb      	str	r3, [r7, #24]

		RMC->speed_over_gnd = floor(speed*2.1);
 8001f5c:	69b8      	ldr	r0, [r7, #24]
 8001f5e:	f7fe fb03 	bl	8000568 <__aeabi_f2d>
 8001f62:	a37f      	add	r3, pc, #508	; (adr r3, 8002160 <RMC_decode+0x3f0>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe fb56 	bl	8000618 <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	ec43 2b17 	vmov	d7, r2, r3
 8001f74:	eeb0 0a47 	vmov.f32	s0, s14
 8001f78:	eef0 0a67 	vmov.f32	s1, s15
 8001f7c:	f00b f880 	bl	800d080 <floor>
 8001f80:	ec53 2b10 	vmov	r2, r3, d0
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fe3e 	bl	8000c08 <__aeabi_d2f>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	e003      	b.n	8001f9c <RMC_decode+0x22c>
	}

	else RMC->speed_over_gnd = 0;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]

	/************************************************GET COURSE*****************************************************/
	idx++; // ','speed
 8001f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
//	memset(data_buffer, '\0', 12);
//	i=0;

	while (RMC_buffer[idx] != ',')
 8001fa2:	e002      	b.n	8001faa <RMC_decode+0x23a>
	{
//		data_buffer[i] = RMC_buffer[idx];
//		i++;
		idx++;
 8001fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b2c      	cmp	r3, #44	; 0x2c
 8001fb4:	d1f6      	bne.n	8001fa4 <RMC_decode+0x234>
	}

	// if the speed have some data
	if (strlen (data_buffer) > 0)
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d05b      	beq.n	8002078 <RMC_decode+0x308>
	{
		temp = (atoi(data_buffer));  // convert the data into the number
 8001fc0:	f107 0308 	add.w	r3, r7, #8
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f007 ff29 	bl	8009e1c <atoi>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	84fb      	strh	r3, [r7, #38]	; 0x26
		j = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
		while (data_buffer[j] != '.')
 8001fd2:	e002      	b.n	8001fda <RMC_decode+0x26a>
		{
			j++;   // same as above
 8001fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	637b      	str	r3, [r7, #52]	; 0x34
		while (data_buffer[j] != '.')
 8001fda:	f107 0208 	add.w	r2, r7, #8
 8001fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe0:	4413      	add	r3, r2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8001fe6:	d1f5      	bne.n	8001fd4 <RMC_decode+0x264>
		}
		j++;
 8001fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fea:	3301      	adds	r3, #1
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34

		decimal_length = (strlen(data_buffer))-j;
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe f8f6 	bl	80001e4 <strlen>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	623b      	str	r3, [r7, #32]
		decimal = atoi ((char *) data_buffer+j);
 8002000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002002:	f107 0208 	add.w	r2, r7, #8
 8002006:	4413      	add	r3, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f007 ff07 	bl	8009e1c <atoi>
 800200e:	61f8      	str	r0, [r7, #28]

		course = temp + (decimal/pow(10, (decimal_length)));
 8002010:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fa95 	bl	8000544 <__aeabi_i2d>
 800201a:	4604      	mov	r4, r0
 800201c:	460d      	mov	r5, r1
 800201e:	69f8      	ldr	r0, [r7, #28]
 8002020:	f7fe fa90 	bl	8000544 <__aeabi_i2d>
 8002024:	4680      	mov	r8, r0
 8002026:	4689      	mov	r9, r1
 8002028:	6a38      	ldr	r0, [r7, #32]
 800202a:	f7fe fa8b 	bl	8000544 <__aeabi_i2d>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	ec43 2b11 	vmov	d1, r2, r3
 8002036:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8002150 <RMC_decode+0x3e0>
 800203a:	f00b f8a1 	bl	800d180 <pow>
 800203e:	ec53 2b10 	vmov	r2, r3, d0
 8002042:	4640      	mov	r0, r8
 8002044:	4649      	mov	r1, r9
 8002046:	f7fe fc11 	bl	800086c <__aeabi_ddiv>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4620      	mov	r0, r4
 8002050:	4629      	mov	r1, r5
 8002052:	f7fe f92b 	bl	80002ac <__adddf3>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f7fe fdd3 	bl	8000c08 <__aeabi_d2f>
 8002062:	4603      	mov	r3, r0
 8002064:	617b      	str	r3, [r7, #20]

		RMC->course_over_gnd = course;
 8002066:	edd7 7a05 	vldr	s15, [r7, #20]
 800206a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800206e:	ee17 2a90 	vmov	r2, s15
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	615a      	str	r2, [r3, #20]
 8002076:	e002      	b.n	800207e <RMC_decode+0x30e>
	}

	else RMC->course_over_gnd = 0;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]

	////****************************************GET DATE************************************************/////

	idx++;
 800207e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002080:	3301      	adds	r3, #1
 8002082:	63fb      	str	r3, [r7, #60]	; 0x3c

	// reach the first number in time
	i=0; //resetting i
 8002084:	2300      	movs	r3, #0
 8002086:	63bb      	str	r3, [r7, #56]	; 0x38

	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	220c      	movs	r2, #12
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f007 ff23 	bl	8009edc <memset>

	while(RMC_buffer[idx] != ',') //copying the time data in a buffer
 8002096:	e00f      	b.n	80020b8 <RMC_decode+0x348>
	{
		data_buffer[i]= RMC_buffer[idx];
 8002098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	7819      	ldrb	r1, [r3, #0]
 80020a0:	f107 0208 	add.w	r2, r7, #8
 80020a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a6:	4413      	add	r3, r2
 80020a8:	460a      	mov	r2, r1
 80020aa:	701a      	strb	r2, [r3, #0]
		i++;
 80020ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ae:	3301      	adds	r3, #1
 80020b0:	63bb      	str	r3, [r7, #56]	; 0x38
		idx++;
 80020b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b4:	3301      	adds	r3, #1
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(RMC_buffer[idx] != ',') //copying the time data in a buffer
 80020b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b2c      	cmp	r3, #44	; 0x2c
 80020c2:	d1e9      	bne.n	8002098 <RMC_decode+0x328>
	/*
	 * ex.
	 * date:131222
	 */

	day = atoi(data_buffer)/10000;   // get 13
 80020c4:	f107 0308 	add.w	r3, r7, #8
 80020c8:	4618      	mov	r0, r3
 80020ca:	f007 fea7 	bl	8009e1c <atoi>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4a21      	ldr	r2, [pc, #132]	; (8002158 <RMC_decode+0x3e8>)
 80020d2:	fb82 1203 	smull	r1, r2, r2, r3
 80020d6:	1312      	asrs	r2, r2, #12
 80020d8:	17db      	asrs	r3, r3, #31
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	633b      	str	r3, [r7, #48]	; 0x30

	month = ((atoi(data_buffer)/100)%100);  // get 12
 80020de:	f107 0308 	add.w	r3, r7, #8
 80020e2:	4618      	mov	r0, r3
 80020e4:	f007 fe9a 	bl	8009e1c <atoi>
 80020e8:	4603      	mov	r3, r0
 80020ea:	4a1c      	ldr	r2, [pc, #112]	; (800215c <RMC_decode+0x3ec>)
 80020ec:	fb82 1203 	smull	r1, r2, r2, r3
 80020f0:	1152      	asrs	r2, r2, #5
 80020f2:	17db      	asrs	r3, r3, #31
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	4a19      	ldr	r2, [pc, #100]	; (800215c <RMC_decode+0x3ec>)
 80020f8:	fb82 1203 	smull	r1, r2, r2, r3
 80020fc:	1151      	asrs	r1, r2, #5
 80020fe:	17da      	asrs	r2, r3, #31
 8002100:	1a8a      	subs	r2, r1, r2
 8002102:	2164      	movs	r1, #100	; 0x64
 8002104:	fb01 f202 	mul.w	r2, r1, r2
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c

	year = (atoi(data_buffer)%100); //get 22
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	4618      	mov	r0, r3
 8002112:	f007 fe83 	bl	8009e1c <atoi>
 8002116:	4603      	mov	r3, r0
 8002118:	4a10      	ldr	r2, [pc, #64]	; (800215c <RMC_decode+0x3ec>)
 800211a:	fb82 1203 	smull	r1, r2, r2, r3
 800211e:	1151      	asrs	r1, r2, #5
 8002120:	17da      	asrs	r2, r3, #31
 8002122:	1a8a      	subs	r2, r1, r2
 8002124:	2164      	movs	r1, #100	; 0x64
 8002126:	fb01 f202 	mul.w	r2, r1, r2
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28

	RMC->date.day=day;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002132:	601a      	str	r2, [r3, #0]
	RMC->date.month=month;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002138:	605a      	str	r2, [r3, #4]
	RMC->date.year=year;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800213e:	609a      	str	r2, [r3, #8]

}
 8002140:	bf00      	nop
 8002142:	3740      	adds	r7, #64	; 0x40
 8002144:	46bd      	mov	sp, r7
 8002146:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800214a:	bf00      	nop
 800214c:	f3af 8000 	nop.w
 8002150:	00000000 	.word	0x00000000
 8002154:	40240000 	.word	0x40240000
 8002158:	68db8bad 	.word	0x68db8bad
 800215c:	51eb851f 	.word	0x51eb851f
 8002160:	cccccccd 	.word	0xcccccccd
 8002164:	4000cccc 	.word	0x4000cccc

08002168 <HAL_UARTEx_RxEventCallback>:


/*buffer to receive data */
uint8_t g_usart1_rx_buf[USART_BUF_SIZE] = { 0 };
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <HAL_UARTEx_RxEventCallback+0x6c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d110      	bne.n	80021a0 <HAL_UARTEx_RxEventCallback+0x38>
	{
		Flag=1;
 800217e:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <HAL_UARTEx_RxEventCallback+0x70>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8002184:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002188:	4914      	ldr	r1, [pc, #80]	; (80021dc <HAL_UARTEx_RxEventCallback+0x74>)
 800218a:	4815      	ldr	r0, [pc, #84]	; (80021e0 <HAL_UARTEx_RxEventCallback+0x78>)
 800218c:	f004 f813 	bl	80061b6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0208 	bic.w	r2, r2, #8
 800219e:	601a      	str	r2, [r3, #0]
	}
	if (huart->Instance == USART3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <HAL_UARTEx_RxEventCallback+0x80>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10f      	bne.n	80021ca <HAL_UARTEx_RxEventCallback+0x62>
	{
		Flag_Rec=1;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_UARTEx_RxEventCallback+0x84>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) rx_data, sizeof(rx_data));
 80021b0:	220a      	movs	r2, #10
 80021b2:	490f      	ldr	r1, [pc, #60]	; (80021f0 <HAL_UARTEx_RxEventCallback+0x88>)
 80021b4:	480f      	ldr	r0, [pc, #60]	; (80021f4 <HAL_UARTEx_RxEventCallback+0x8c>)
 80021b6:	f003 fffe 	bl	80061b6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_UARTEx_RxEventCallback+0x90>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <HAL_UARTEx_RxEventCallback+0x90>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0208 	bic.w	r2, r2, #8
 80021c8:	601a      	str	r2, [r3, #0]

	}
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40004400 	.word	0x40004400
 80021d8:	20000254 	.word	0x20000254
 80021dc:	20004f80 	.word	0x20004f80
 80021e0:	200052d8 	.word	0x200052d8
 80021e4:	20004bd0 	.word	0x20004bd0
 80021e8:	40004800 	.word	0x40004800
 80021ec:	20000260 	.word	0x20000260
 80021f0:	20004f74 	.word	0x20004f74
 80021f4:	20004cc0 	.word	0x20004cc0
 80021f8:	20004c60 	.word	0x20004c60

080021fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002200:	f001 fa8e 	bl	8003720 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002204:	f000 f8ae 	bl	8002364 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002208:	f000 fa64 	bl	80026d4 <MX_GPIO_Init>
	MX_DMA_Init();
 800220c:	f000 fa1c 	bl	8002648 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8002210:	f000 f99c 	bl	800254c <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8002214:	f000 f910 	bl	8002438 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8002218:	f000 f9c2 	bl	80025a0 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800221c:	f000 f9ea 	bl	80025f4 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8002220:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002224:	4933      	ldr	r1, [pc, #204]	; (80022f4 <main+0xf8>)
 8002226:	4834      	ldr	r0, [pc, #208]	; (80022f8 <main+0xfc>)
 8002228:	f003 ffc5 	bl	80061b6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <main+0x100>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b32      	ldr	r3, [pc, #200]	; (80022fc <main+0x100>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0208 	bic.w	r2, r2, #8
 800223a:	601a      	str	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rx_data, sizeof(rx_data));
 800223c:	220a      	movs	r2, #10
 800223e:	4930      	ldr	r1, [pc, #192]	; (8002300 <main+0x104>)
 8002240:	4830      	ldr	r0, [pc, #192]	; (8002304 <main+0x108>)
 8002242:	f003 ffb8 	bl	80061b6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <main+0x10c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <main+0x10c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0208 	bic.w	r2, r2, #8
 8002254:	601a      	str	r2, [r3, #0]
	LCD_init(); /* Initialize the LCD */
 8002256:	f7fe fea3 	bl	8000fa0 <LCD_init>
	LCD_displayStringRowColumn(0,0,"STM LCD Driver");
 800225a:	4a2c      	ldr	r2, [pc, #176]	; (800230c <main+0x110>)
 800225c:	2100      	movs	r1, #0
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe ff8a 	bl	8001178 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,3,"GRAD PROJECT");
 8002264:	4a2a      	ldr	r2, [pc, #168]	; (8002310 <main+0x114>)
 8002266:	2103      	movs	r1, #3
 8002268:	2001      	movs	r0, #1
 800226a:	f7fe ff85 	bl	8001178 <LCD_displayStringRowColumn>
	HAL_Delay(400); /* wait four seconds */
 800226e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002272:	f001 fa97 	bl	80037a4 <HAL_Delay>

	LCD_clearScreen(); /* clear the LCD display */
 8002276:	f7fe ff94 	bl	80011a2 <LCD_clearScreen>
	LCD_displayString(" ");
 800227a:	4826      	ldr	r0, [pc, #152]	; (8002314 <main+0x118>)
 800227c:	f7fe ff34 	bl	80010e8 <LCD_displayString>
	LCD_displayStringRowColumn(1,3,"4-Bit Mode");
 8002280:	4a25      	ldr	r2, [pc, #148]	; (8002318 <main+0x11c>)
 8002282:	2103      	movs	r1, #3
 8002284:	2001      	movs	r0, #1
 8002286:	f7fe ff77 	bl	8001178 <LCD_displayStringRowColumn>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800228a:	f005 f879 	bl	8007380 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of LidarREAD */
	LidarREADHandle = osThreadNew(StartLidarREAD, NULL, &LidarREAD_attributes);
 800228e:	4a23      	ldr	r2, [pc, #140]	; (800231c <main+0x120>)
 8002290:	2100      	movs	r1, #0
 8002292:	4823      	ldr	r0, [pc, #140]	; (8002320 <main+0x124>)
 8002294:	f005 f8be 	bl	8007414 <osThreadNew>
 8002298:	4603      	mov	r3, r0
 800229a:	4a22      	ldr	r2, [pc, #136]	; (8002324 <main+0x128>)
 800229c:	6013      	str	r3, [r2, #0]

	/* creation of TakeAction_Lida */
	TakeAction_LidaHandle = osThreadNew(Start_TakeAction_Lidar, NULL, &TakeAction_Lida_attributes);
 800229e:	4a22      	ldr	r2, [pc, #136]	; (8002328 <main+0x12c>)
 80022a0:	2100      	movs	r1, #0
 80022a2:	4822      	ldr	r0, [pc, #136]	; (800232c <main+0x130>)
 80022a4:	f005 f8b6 	bl	8007414 <osThreadNew>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a21      	ldr	r2, [pc, #132]	; (8002330 <main+0x134>)
 80022ac:	6013      	str	r3, [r2, #0]

	/* creation of Ultrasonic_Read */
	Ultrasonic_ReadHandle = osThreadNew(Start_Ultrasonic_Read, NULL, &Ultrasonic_Read_attributes);
 80022ae:	4a21      	ldr	r2, [pc, #132]	; (8002334 <main+0x138>)
 80022b0:	2100      	movs	r1, #0
 80022b2:	4821      	ldr	r0, [pc, #132]	; (8002338 <main+0x13c>)
 80022b4:	f005 f8ae 	bl	8007414 <osThreadNew>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4a20      	ldr	r2, [pc, #128]	; (800233c <main+0x140>)
 80022bc:	6013      	str	r3, [r2, #0]

	/* creation of GPS */
	GPSHandle = osThreadNew(Start_GPS, NULL, &GPS_attributes);
 80022be:	4a20      	ldr	r2, [pc, #128]	; (8002340 <main+0x144>)
 80022c0:	2100      	movs	r1, #0
 80022c2:	4820      	ldr	r0, [pc, #128]	; (8002344 <main+0x148>)
 80022c4:	f005 f8a6 	bl	8007414 <osThreadNew>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <main+0x14c>)
 80022cc:	6013      	str	r3, [r2, #0]

	/* creation of Send_Data */
	Send_DataHandle = osThreadNew(StartTask06, NULL, &Send_Data_attributes);
 80022ce:	4a1f      	ldr	r2, [pc, #124]	; (800234c <main+0x150>)
 80022d0:	2100      	movs	r1, #0
 80022d2:	481f      	ldr	r0, [pc, #124]	; (8002350 <main+0x154>)
 80022d4:	f005 f89e 	bl	8007414 <osThreadNew>
 80022d8:	4603      	mov	r3, r0
 80022da:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <main+0x158>)
 80022dc:	6013      	str	r3, [r2, #0]

	/* creation of Rec_Data */
	Rec_DataHandle = osThreadNew(Start_Rec_Transmit, NULL, &Rec_Data_attributes);
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <main+0x15c>)
 80022e0:	2100      	movs	r1, #0
 80022e2:	481e      	ldr	r0, [pc, #120]	; (800235c <main+0x160>)
 80022e4:	f005 f896 	bl	8007414 <osThreadNew>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <main+0x164>)
 80022ec:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80022ee:	f005 f86b 	bl	80073c8 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80022f2:	e7fe      	b.n	80022f2 <main+0xf6>
 80022f4:	20004f80 	.word	0x20004f80
 80022f8:	200052d8 	.word	0x200052d8
 80022fc:	20004bd0 	.word	0x20004bd0
 8002300:	20004f74 	.word	0x20004f74
 8002304:	20004cc0 	.word	0x20004cc0
 8002308:	20004c60 	.word	0x20004c60
 800230c:	0800e150 	.word	0x0800e150
 8002310:	0800e160 	.word	0x0800e160
 8002314:	0800e170 	.word	0x0800e170
 8002318:	0800e174 	.word	0x0800e174
 800231c:	0800e2f0 	.word	0x0800e2f0
 8002320:	08002851 	.word	0x08002851
 8002324:	2000531c 	.word	0x2000531c
 8002328:	0800e314 	.word	0x0800e314
 800232c:	080028cd 	.word	0x080028cd
 8002330:	20004e34 	.word	0x20004e34
 8002334:	0800e338 	.word	0x0800e338
 8002338:	08002971 	.word	0x08002971
 800233c:	20005324 	.word	0x20005324
 8002340:	0800e35c 	.word	0x0800e35c
 8002344:	080029a9 	.word	0x080029a9
 8002348:	20004d04 	.word	0x20004d04
 800234c:	0800e380 	.word	0x0800e380
 8002350:	08002b2d 	.word	0x08002b2d
 8002354:	200052d4 	.word	0x200052d4
 8002358:	0800e3a4 	.word	0x0800e3a4
 800235c:	08002c81 	.word	0x08002c81
 8002360:	20005320 	.word	0x20005320

08002364 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b094      	sub	sp, #80	; 0x50
 8002368:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236a:	f107 0320 	add.w	r3, r7, #32
 800236e:	2230      	movs	r2, #48	; 0x30
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f007 fdb2 	bl	8009edc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	4b28      	ldr	r3, [pc, #160]	; (8002430 <SystemClock_Config+0xcc>)
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	4a27      	ldr	r2, [pc, #156]	; (8002430 <SystemClock_Config+0xcc>)
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002396:	6413      	str	r3, [r2, #64]	; 0x40
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <SystemClock_Config+0xcc>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a4:	2300      	movs	r3, #0
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <SystemClock_Config+0xd0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a21      	ldr	r2, [pc, #132]	; (8002434 <SystemClock_Config+0xd0>)
 80023ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <SystemClock_Config+0xd0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023c0:	2301      	movs	r3, #1
 80023c2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ca:	2302      	movs	r3, #2
 80023cc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80023d4:	2304      	movs	r3, #4
 80023d6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80023d8:	23a8      	movs	r3, #168	; 0xa8
 80023da:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023dc:	2302      	movs	r3, #2
 80023de:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80023e0:	2304      	movs	r3, #4
 80023e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e4:	f107 0320 	add.w	r3, r7, #32
 80023e8:	4618      	mov	r0, r3
 80023ea:	f002 f899 	bl	8004520 <HAL_RCC_OscConfig>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80023f4:	f000 fd56 	bl	8002ea4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023f8:	230f      	movs	r3, #15
 80023fa:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023fc:	2302      	movs	r3, #2
 80023fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002404:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002408:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800240a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800240e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	2105      	movs	r1, #5
 8002416:	4618      	mov	r0, r3
 8002418:	f002 fafa 	bl	8004a10 <HAL_RCC_ClockConfig>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8002422:	f000 fd3f 	bl	8002ea4 <Error_Handler>
	}
}
 8002426:	bf00      	nop
 8002428:	3750      	adds	r7, #80	; 0x50
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	40007000 	.word	0x40007000

08002438 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243e:	f107 0318 	add.w	r3, r7, #24
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244c:	f107 0310 	add.w	r3, r7, #16
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8002456:	463b      	mov	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002462:	4b38      	ldr	r3, [pc, #224]	; (8002544 <MX_TIM1_Init+0x10c>)
 8002464:	4a38      	ldr	r2, [pc, #224]	; (8002548 <MX_TIM1_Init+0x110>)
 8002466:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 168-1;
 8002468:	4b36      	ldr	r3, [pc, #216]	; (8002544 <MX_TIM1_Init+0x10c>)
 800246a:	22a7      	movs	r2, #167	; 0xa7
 800246c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246e:	4b35      	ldr	r3, [pc, #212]	; (8002544 <MX_TIM1_Init+0x10c>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0xffff-1;
 8002474:	4b33      	ldr	r3, [pc, #204]	; (8002544 <MX_TIM1_Init+0x10c>)
 8002476:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800247a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247c:	4b31      	ldr	r3, [pc, #196]	; (8002544 <MX_TIM1_Init+0x10c>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <MX_TIM1_Init+0x10c>)
 8002484:	2200      	movs	r2, #0
 8002486:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002488:	4b2e      	ldr	r3, [pc, #184]	; (8002544 <MX_TIM1_Init+0x10c>)
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800248e:	482d      	ldr	r0, [pc, #180]	; (8002544 <MX_TIM1_Init+0x10c>)
 8002490:	f002 fcec 	bl	8004e6c <HAL_TIM_Base_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM1_Init+0x66>
	{
		Error_Handler();
 800249a:	f000 fd03 	bl	8002ea4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a2:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024a4:	f107 0318 	add.w	r3, r7, #24
 80024a8:	4619      	mov	r1, r3
 80024aa:	4826      	ldr	r0, [pc, #152]	; (8002544 <MX_TIM1_Init+0x10c>)
 80024ac:	f003 f8c4 	bl	8005638 <HAL_TIM_ConfigClockSource>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM1_Init+0x82>
	{
		Error_Handler();
 80024b6:	f000 fcf5 	bl	8002ea4 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80024ba:	4822      	ldr	r0, [pc, #136]	; (8002544 <MX_TIM1_Init+0x10c>)
 80024bc:	f002 fd96 	bl	8004fec <HAL_TIM_IC_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM1_Init+0x92>
	{
		Error_Handler();
 80024c6:	f000 fced 	bl	8002ea4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	4619      	mov	r1, r3
 80024d8:	481a      	ldr	r0, [pc, #104]	; (8002544 <MX_TIM1_Init+0x10c>)
 80024da:	f003 fc61 	bl	8005da0 <HAL_TIMEx_MasterConfigSynchronization>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM1_Init+0xb0>
	{
		Error_Handler();
 80024e4:	f000 fcde 	bl	8002ea4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024e8:	2300      	movs	r3, #0
 80024ea:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024ec:	2301      	movs	r3, #1
 80024ee:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024f8:	463b      	mov	r3, r7
 80024fa:	2200      	movs	r2, #0
 80024fc:	4619      	mov	r1, r3
 80024fe:	4811      	ldr	r0, [pc, #68]	; (8002544 <MX_TIM1_Init+0x10c>)
 8002500:	f002 fffe 	bl	8005500 <HAL_TIM_IC_ConfigChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM1_Init+0xd6>
	{
		Error_Handler();
 800250a:	f000 fccb 	bl	8002ea4 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800250e:	463b      	mov	r3, r7
 8002510:	2204      	movs	r2, #4
 8002512:	4619      	mov	r1, r3
 8002514:	480b      	ldr	r0, [pc, #44]	; (8002544 <MX_TIM1_Init+0x10c>)
 8002516:	f002 fff3 	bl	8005500 <HAL_TIM_IC_ConfigChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM1_Init+0xec>
	{
		Error_Handler();
 8002520:	f000 fcc0 	bl	8002ea4 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002524:	463b      	mov	r3, r7
 8002526:	2208      	movs	r2, #8
 8002528:	4619      	mov	r1, r3
 800252a:	4806      	ldr	r0, [pc, #24]	; (8002544 <MX_TIM1_Init+0x10c>)
 800252c:	f002 ffe8 	bl	8005500 <HAL_TIM_IC_ConfigChannel>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM1_Init+0x102>
	{
		Error_Handler();
 8002536:	f000 fcb5 	bl	8002ea4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20004f2c 	.word	0x20004f2c
 8002548:	40010000 	.word	0x40010000

0800254c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <MX_USART1_UART_Init+0x4c>)
 8002552:	4a12      	ldr	r2, [pc, #72]	; (800259c <MX_USART1_UART_Init+0x50>)
 8002554:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <MX_USART1_UART_Init+0x4c>)
 8002558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800255c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <MX_USART1_UART_Init+0x4c>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <MX_USART1_UART_Init+0x4c>)
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <MX_USART1_UART_Init+0x4c>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <MX_USART1_UART_Init+0x4c>)
 8002572:	220c      	movs	r2, #12
 8002574:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <MX_USART1_UART_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <MX_USART1_UART_Init+0x4c>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002582:	4805      	ldr	r0, [pc, #20]	; (8002598 <MX_USART1_UART_Init+0x4c>)
 8002584:	f003 fc9c 	bl	8005ec0 <HAL_UART_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800258e:	f000 fc89 	bl	8002ea4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20004ee8 	.word	0x20004ee8
 800259c:	40011000 	.word	0x40011000

080025a0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <MX_USART2_UART_Init+0x4c>)
 80025a6:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <MX_USART2_UART_Init+0x50>)
 80025a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <MX_USART2_UART_Init+0x4c>)
 80025ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <MX_USART2_UART_Init+0x4c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <MX_USART2_UART_Init+0x4c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <MX_USART2_UART_Init+0x4c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <MX_USART2_UART_Init+0x4c>)
 80025c6:	220c      	movs	r2, #12
 80025c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ca:	4b08      	ldr	r3, [pc, #32]	; (80025ec <MX_USART2_UART_Init+0x4c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <MX_USART2_UART_Init+0x4c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80025d6:	4805      	ldr	r0, [pc, #20]	; (80025ec <MX_USART2_UART_Init+0x4c>)
 80025d8:	f003 fc72 	bl	8005ec0 <HAL_UART_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80025e2:	f000 fc5f 	bl	8002ea4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	200052d8 	.word	0x200052d8
 80025f0:	40004400 	.word	0x40004400

080025f4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <MX_USART3_UART_Init+0x4c>)
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <MX_USART3_UART_Init+0x50>)
 80025fc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <MX_USART3_UART_Init+0x4c>)
 8002600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002604:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002606:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <MX_USART3_UART_Init+0x4c>)
 8002608:	2200      	movs	r2, #0
 800260a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_USART3_UART_Init+0x4c>)
 800260e:	2200      	movs	r2, #0
 8002610:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <MX_USART3_UART_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_USART3_UART_Init+0x4c>)
 800261a:	220c      	movs	r2, #12
 800261c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <MX_USART3_UART_Init+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_USART3_UART_Init+0x4c>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800262a:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_USART3_UART_Init+0x4c>)
 800262c:	f003 fc48 	bl	8005ec0 <HAL_UART_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8002636:	f000 fc35 	bl	8002ea4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20004cc0 	.word	0x20004cc0
 8002644:	40004800 	.word	0x40004800

08002648 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <MX_DMA_Init+0x88>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <MX_DMA_Init+0x88>)
 8002658:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <MX_DMA_Init+0x88>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_DMA_Init+0x88>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <MX_DMA_Init+0x88>)
 8002674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <MX_DMA_Init+0x88>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2105      	movs	r1, #5
 800268a:	200c      	movs	r0, #12
 800268c:	f001 f966 	bl	800395c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002690:	200c      	movs	r0, #12
 8002692:	f001 f97f 	bl	8003994 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2105      	movs	r1, #5
 800269a:	200e      	movs	r0, #14
 800269c:	f001 f95e 	bl	800395c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80026a0:	200e      	movs	r0, #14
 80026a2:	f001 f977 	bl	8003994 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2105      	movs	r1, #5
 80026aa:	2010      	movs	r0, #16
 80026ac:	f001 f956 	bl	800395c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026b0:	2010      	movs	r0, #16
 80026b2:	f001 f96f 	bl	8003994 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2105      	movs	r1, #5
 80026ba:	203a      	movs	r0, #58	; 0x3a
 80026bc:	f001 f94e 	bl	800395c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80026c0:	203a      	movs	r0, #58	; 0x3a
 80026c2:	f001 f967 	bl	8003994 <HAL_NVIC_EnableIRQ>

}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08c      	sub	sp, #48	; 0x30
 80026d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	4b53      	ldr	r3, [pc, #332]	; (800283c <MX_GPIO_Init+0x168>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a52      	ldr	r2, [pc, #328]	; (800283c <MX_GPIO_Init+0x168>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b50      	ldr	r3, [pc, #320]	; (800283c <MX_GPIO_Init+0x168>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	4b4c      	ldr	r3, [pc, #304]	; (800283c <MX_GPIO_Init+0x168>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a4b      	ldr	r2, [pc, #300]	; (800283c <MX_GPIO_Init+0x168>)
 8002710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b49      	ldr	r3, [pc, #292]	; (800283c <MX_GPIO_Init+0x168>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	4b45      	ldr	r3, [pc, #276]	; (800283c <MX_GPIO_Init+0x168>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a44      	ldr	r2, [pc, #272]	; (800283c <MX_GPIO_Init+0x168>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b42      	ldr	r3, [pc, #264]	; (800283c <MX_GPIO_Init+0x168>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b3e      	ldr	r3, [pc, #248]	; (800283c <MX_GPIO_Init+0x168>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a3d      	ldr	r2, [pc, #244]	; (800283c <MX_GPIO_Init+0x168>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b3b      	ldr	r3, [pc, #236]	; (800283c <MX_GPIO_Init+0x168>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	4b37      	ldr	r3, [pc, #220]	; (800283c <MX_GPIO_Init+0x168>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a36      	ldr	r2, [pc, #216]	; (800283c <MX_GPIO_Init+0x168>)
 8002764:	f043 0310 	orr.w	r3, r3, #16
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b34      	ldr	r3, [pc, #208]	; (800283c <MX_GPIO_Init+0x168>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	4b30      	ldr	r3, [pc, #192]	; (800283c <MX_GPIO_Init+0x168>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a2f      	ldr	r2, [pc, #188]	; (800283c <MX_GPIO_Init+0x168>)
 8002780:	f043 0308 	orr.w	r3, r3, #8
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b2d      	ldr	r3, [pc, #180]	; (800283c <MX_GPIO_Init+0x168>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002792:	2200      	movs	r2, #0
 8002794:	210f      	movs	r1, #15
 8002796:	482a      	ldr	r0, [pc, #168]	; (8002840 <MX_GPIO_Init+0x16c>)
 8002798:	f001 fea8 	bl	80044ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800279c:	2200      	movs	r2, #0
 800279e:	210f      	movs	r1, #15
 80027a0:	4828      	ldr	r0, [pc, #160]	; (8002844 <MX_GPIO_Init+0x170>)
 80027a2:	f001 fea3 	bl	80044ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 80027a6:	2200      	movs	r2, #0
 80027a8:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 80027ac:	4826      	ldr	r0, [pc, #152]	; (8002848 <MX_GPIO_Init+0x174>)
 80027ae:	f001 fe9d 	bl	80044ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80027b2:	2200      	movs	r2, #0
 80027b4:	f24f 0107 	movw	r1, #61447	; 0xf007
 80027b8:	4824      	ldr	r0, [pc, #144]	; (800284c <MX_GPIO_Init+0x178>)
 80027ba:	f001 fe97 	bl	80044ec <HAL_GPIO_WritePin>
			|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);

	/*Configure GPIO pins : PC0 PC1 PC2 PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80027be:	230f      	movs	r3, #15
 80027c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c2:	2301      	movs	r3, #1
 80027c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	481a      	ldr	r0, [pc, #104]	; (8002840 <MX_GPIO_Init+0x16c>)
 80027d6:	f001 fced 	bl	80041b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB2 PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80027da:	230f      	movs	r3, #15
 80027dc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027de:	2301      	movs	r3, #1
 80027e0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	4814      	ldr	r0, [pc, #80]	; (8002844 <MX_GPIO_Init+0x170>)
 80027f2:	f001 fcdf 	bl	80041b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE10 PE12 PE14 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 80027f6:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80027fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fc:	2301      	movs	r3, #1
 80027fe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002808:	f107 031c 	add.w	r3, r7, #28
 800280c:	4619      	mov	r1, r3
 800280e:	480e      	ldr	r0, [pc, #56]	; (8002848 <MX_GPIO_Init+0x174>)
 8002810:	f001 fcd0 	bl	80041b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002814:	f24f 0307 	movw	r3, #61447	; 0xf007
 8002818:	61fb      	str	r3, [r7, #28]
			|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281a:	2301      	movs	r3, #1
 800281c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	2300      	movs	r3, #0
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002826:	f107 031c 	add.w	r3, r7, #28
 800282a:	4619      	mov	r1, r3
 800282c:	4807      	ldr	r0, [pc, #28]	; (800284c <MX_GPIO_Init+0x178>)
 800282e:	f001 fcc1 	bl	80041b4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002832:	bf00      	nop
 8002834:	3730      	adds	r7, #48	; 0x30
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	40020800 	.word	0x40020800
 8002844:	40020400 	.word	0x40020400
 8002848:	40021000 	.word	0x40021000
 800284c:	40020c00 	.word	0x40020c00

08002850 <StartLidarREAD>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLidarREAD */
void StartLidarREAD(void *argument)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_DMA(&huart1, g_usart1_rx_buf, USART_BUF_SIZE);
 8002858:	2240      	movs	r2, #64	; 0x40
 800285a:	4916      	ldr	r1, [pc, #88]	; (80028b4 <StartLidarREAD+0x64>)
 800285c:	4816      	ldr	r0, [pc, #88]	; (80028b8 <StartLidarREAD+0x68>)
 800285e:	f003 fbfb 	bl	8006058 <HAL_UART_Receive_DMA>

		/* enable uart IDLE  interrupt */
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <StartLidarREAD+0x68>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <StartLidarREAD+0x68>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0210 	orr.w	r2, r2, #16
 8002870:	60da      	str	r2, [r3, #12]
		if(Global_u16LidarDistance <=100)
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <StartLidarREAD+0x6c>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	2b64      	cmp	r3, #100	; 0x64
 8002878:	d805      	bhi.n	8002886 <StartLidarREAD+0x36>
		{
			Flag_obstacle=1;
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <StartLidarREAD+0x70>)
 800287c:	2201      	movs	r2, #1
 800287e:	601a      	str	r2, [r3, #0]
			Flag_Drive=0;
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <StartLidarREAD+0x74>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
		}
		if(Global_u16LidarDistance < 1200)
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <StartLidarREAD+0x6c>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800288e:	d203      	bcs.n	8002898 <StartLidarREAD+0x48>
		{
			Check_Front_Obs=1;
 8002890:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <StartLidarREAD+0x78>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e008      	b.n	80028aa <StartLidarREAD+0x5a>
		}
		else if(Global_u16LidarDistance == 65535)
 8002898:	4b08      	ldr	r3, [pc, #32]	; (80028bc <StartLidarREAD+0x6c>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d102      	bne.n	80028aa <StartLidarREAD+0x5a>
		{
			Check_Front_Obs=0;
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <StartLidarREAD+0x78>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
		}
		osDelay(800);
 80028aa:	f44f 7048 	mov.w	r0, #800	; 0x320
 80028ae:	f004 fe43 	bl	8007538 <osDelay>
		HAL_UART_Receive_DMA(&huart1, g_usart1_rx_buf, USART_BUF_SIZE);
 80028b2:	e7d1      	b.n	8002858 <StartLidarREAD+0x8>
 80028b4:	20000270 	.word	0x20000270
 80028b8:	20004ee8 	.word	0x20004ee8
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000264 	.word	0x20000264
 80028c4:	20000268 	.word	0x20000268
 80028c8:	2000025c 	.word	0x2000025c

080028cc <Start_TakeAction_Lidar>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_TakeAction_Lidar */
void Start_TakeAction_Lidar(void *argument)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_TakeAction_Lidar */
	/* Infinite loop */
	for(;;)
	{
		if (Flag_obstacle == 1)
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <Start_TakeAction_Lidar+0x88>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d126      	bne.n	800292a <Start_TakeAction_Lidar+0x5e>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,SET);
 80028dc:	2201      	movs	r2, #1
 80028de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028e2:	481d      	ldr	r0, [pc, #116]	; (8002958 <Start_TakeAction_Lidar+0x8c>)
 80028e4:	f001 fe02 	bl	80044ec <HAL_GPIO_WritePin>
			LCD_clearScreen(); /* clear the LCD display */
 80028e8:	f7fe fc5b 	bl	80011a2 <LCD_clearScreen>
			LCD_displayString(" ");
 80028ec:	481b      	ldr	r0, [pc, #108]	; (800295c <Start_TakeAction_Lidar+0x90>)
 80028ee:	f7fe fbfb 	bl	80010e8 <LCD_displayString>
			LCD_displayStringRowColumn(0,0,"Applying Brakes");
 80028f2:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <Start_TakeAction_Lidar+0x94>)
 80028f4:	2100      	movs	r1, #0
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe fc3e 	bl	8001178 <LCD_displayStringRowColumn>
			HAL_Delay(200);
 80028fc:	20c8      	movs	r0, #200	; 0xc8
 80028fe:	f000 ff51 	bl	80037a4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,RESET);
 8002902:	2200      	movs	r2, #0
 8002904:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002908:	4813      	ldr	r0, [pc, #76]	; (8002958 <Start_TakeAction_Lidar+0x8c>)
 800290a:	f001 fdef 	bl	80044ec <HAL_GPIO_WritePin>
			if(Global_u16LidarDistance >=101)
 800290e:	4b15      	ldr	r3, [pc, #84]	; (8002964 <Start_TakeAction_Lidar+0x98>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d902      	bls.n	800291c <Start_TakeAction_Lidar+0x50>
			{
				Flag_Drive=1;
 8002916:	4b14      	ldr	r3, [pc, #80]	; (8002968 <Start_TakeAction_Lidar+0x9c>)
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]
			}
			Flag_obstacle=0;
 800291c:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <Start_TakeAction_Lidar+0x88>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
			osDelay(200);
 8002922:	20c8      	movs	r0, #200	; 0xc8
 8002924:	f004 fe08 	bl	8007538 <osDelay>
 8002928:	e7d4      	b.n	80028d4 <Start_TakeAction_Lidar+0x8>

		}
		else if(Flag_Drive==1) {
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <Start_TakeAction_Lidar+0x9c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d1d0      	bne.n	80028d4 <Start_TakeAction_Lidar+0x8>
			LCD_clearScreen(); /* clear the LCD display */
 8002932:	f7fe fc36 	bl	80011a2 <LCD_clearScreen>
			LCD_displayString(" ");
 8002936:	4809      	ldr	r0, [pc, #36]	; (800295c <Start_TakeAction_Lidar+0x90>)
 8002938:	f7fe fbd6 	bl	80010e8 <LCD_displayString>
			LCD_displayStringRowColumn(0,0,"Drive Mode");
 800293c:	4a0b      	ldr	r2, [pc, #44]	; (800296c <Start_TakeAction_Lidar+0xa0>)
 800293e:	2100      	movs	r1, #0
 8002940:	2000      	movs	r0, #0
 8002942:	f7fe fc19 	bl	8001178 <LCD_displayStringRowColumn>
			Flag_Drive=0;
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <Start_TakeAction_Lidar+0x9c>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
			osDelay(20);
 800294c:	2014      	movs	r0, #20
 800294e:	f004 fdf3 	bl	8007538 <osDelay>
		if (Flag_obstacle == 1)
 8002952:	e7bf      	b.n	80028d4 <Start_TakeAction_Lidar+0x8>
 8002954:	20000264 	.word	0x20000264
 8002958:	40020c00 	.word	0x40020c00
 800295c:	0800e170 	.word	0x0800e170
 8002960:	0800e180 	.word	0x0800e180
 8002964:	20000000 	.word	0x20000000
 8002968:	20000268 	.word	0x20000268
 800296c:	0800e190 	.word	0x0800e190

08002970 <Start_Ultrasonic_Read>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Ultrasonic_Read */
void Start_Ultrasonic_Read(void *argument)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_Ultrasonic_Read */
	/* Infinite loop */
	HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_1);
 8002978:	2100      	movs	r1, #0
 800297a:	480a      	ldr	r0, [pc, #40]	; (80029a4 <Start_Ultrasonic_Read+0x34>)
 800297c:	f002 fb90 	bl	80050a0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_2);
 8002980:	2104      	movs	r1, #4
 8002982:	4808      	ldr	r0, [pc, #32]	; (80029a4 <Start_Ultrasonic_Read+0x34>)
 8002984:	f002 fb8c 	bl	80050a0 <HAL_TIM_IC_Start_IT>
	//HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_3);


	for(;;)
	{
		UltraSonic_Read_Left();
 8002988:	f7fe fcc6 	bl	8001318 <UltraSonic_Read_Left>
		osDelay(400);
 800298c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002990:	f004 fdd2 	bl	8007538 <osDelay>

		UltraSonic_Read_Right();
 8002994:	f7fe fce0 	bl	8001358 <UltraSonic_Read_Right>
		osDelay(400);
 8002998:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800299c:	f004 fdcc 	bl	8007538 <osDelay>
		UltraSonic_Read_Left();
 80029a0:	e7f2      	b.n	8002988 <Start_Ultrasonic_Read+0x18>
 80029a2:	bf00      	nop
 80029a4:	20004f2c 	.word	0x20004f2c

080029a8 <Start_GPS>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_GPS */
void Start_GPS(void *argument)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_GPS */
	/* Infinite loop */
	for(;;)
	{
		if (Flag==1)
 80029b0:	4b54      	ldr	r3, [pc, #336]	; (8002b04 <Start_GPS+0x15c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d1fb      	bne.n	80029b0 <Start_GPS+0x8>
		{
			//	if(Flag == 1){
			char *ptr = strstr((char *)RxBuf,"GPGGA");
 80029b8:	4953      	ldr	r1, [pc, #332]	; (8002b08 <Start_GPS+0x160>)
 80029ba:	4854      	ldr	r0, [pc, #336]	; (8002b0c <Start_GPS+0x164>)
 80029bc:	f007 ff5d 	bl	800a87a <strstr>
 80029c0:	60f8      	str	r0, [r7, #12]
			char *ptr1 = strstr((char *)RxBuf,"GPRMC");
 80029c2:	4953      	ldr	r1, [pc, #332]	; (8002b10 <Start_GPS+0x168>)
 80029c4:	4851      	ldr	r0, [pc, #324]	; (8002b0c <Start_GPS+0x164>)
 80029c6:	f007 ff58 	bl	800a87a <strstr>
 80029ca:	60b8      	str	r0, [r7, #8]


			if(*ptr == 'G' )
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b47      	cmp	r3, #71	; 0x47
 80029d2:	d141      	bne.n	8002a58 <Start_GPS+0xb0>
			{
				if(*(ptr+1) == 'P' )
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3301      	adds	r3, #1
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b50      	cmp	r3, #80	; 0x50
 80029dc:	d13c      	bne.n	8002a58 <Start_GPS+0xb0>

				{
					if(*(ptr+2) == 'G' )
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3302      	adds	r3, #2
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b47      	cmp	r3, #71	; 0x47
 80029e6:	d137      	bne.n	8002a58 <Start_GPS+0xb0>
					{
						if(*(ptr+3) == 'G' )
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3303      	adds	r3, #3
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b47      	cmp	r3, #71	; 0x47
 80029f0:	d132      	bne.n	8002a58 <Start_GPS+0xb0>
						{
							if(*(ptr+4) == 'A' )
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3304      	adds	r3, #4
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b41      	cmp	r3, #65	; 0x41
 80029fa:	d12d      	bne.n	8002a58 <Start_GPS+0xb0>
							{
								while(1)
								{
									GGA[msgindex]=*ptr;
 80029fc:	4b45      	ldr	r3, [pc, #276]	; (8002b14 <Start_GPS+0x16c>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	7819      	ldrb	r1, [r3, #0]
 8002a06:	4b44      	ldr	r3, [pc, #272]	; (8002b18 <Start_GPS+0x170>)
 8002a08:	5499      	strb	r1, [r3, r2]
									msgindex++;
 8002a0a:	4b42      	ldr	r3, [pc, #264]	; (8002b14 <Start_GPS+0x16c>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b40      	ldr	r3, [pc, #256]	; (8002b14 <Start_GPS+0x16c>)
 8002a14:	701a      	strb	r2, [r3, #0]
									*ptr =*(ptr+msgindex);
 8002a16:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <Start_GPS+0x16c>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	701a      	strb	r2, [r3, #0]
									if (*ptr=='*')
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002a2c:	d1e6      	bne.n	80029fc <Start_GPS+0x54>
									{
										GGA[msgindex]='\n';
 8002a2e:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <Start_GPS+0x16c>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <Start_GPS+0x170>)
 8002a36:	210a      	movs	r1, #10
 8002a38:	5499      	strb	r1, [r3, r2]
										msgindex++;
 8002a3a:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <Start_GPS+0x16c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <Start_GPS+0x16c>)
 8002a44:	701a      	strb	r2, [r3, #0]
										GGA[msgindex]='\0';
 8002a46:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <Start_GPS+0x16c>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <Start_GPS+0x170>)
 8002a4e:	2100      	movs	r1, #0
 8002a50:	5499      	strb	r1, [r3, r2]
										msgindex=0;
 8002a52:	4b30      	ldr	r3, [pc, #192]	; (8002b14 <Start_GPS+0x16c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
					}
				}
			}


			if(*ptr1 == 'G' )
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b47      	cmp	r3, #71	; 0x47
 8002a5e:	d141      	bne.n	8002ae4 <Start_GPS+0x13c>
			{
				if(*(ptr1+1) == 'P' )
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	3301      	adds	r3, #1
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b50      	cmp	r3, #80	; 0x50
 8002a68:	d13c      	bne.n	8002ae4 <Start_GPS+0x13c>

				{
					if(*(ptr1+2) == 'R' )
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b52      	cmp	r3, #82	; 0x52
 8002a72:	d137      	bne.n	8002ae4 <Start_GPS+0x13c>
					{
						if(*(ptr1+3) == 'M' )
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	3303      	adds	r3, #3
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b4d      	cmp	r3, #77	; 0x4d
 8002a7c:	d132      	bne.n	8002ae4 <Start_GPS+0x13c>
						{
							if(*(ptr1+4) == 'C' )
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3304      	adds	r3, #4
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b43      	cmp	r3, #67	; 0x43
 8002a86:	d12d      	bne.n	8002ae4 <Start_GPS+0x13c>
							{
								while(1)
								{
									RMC[msgindexRMC]=*ptr1;
 8002a88:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <Start_GPS+0x174>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	7819      	ldrb	r1, [r3, #0]
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <Start_GPS+0x178>)
 8002a94:	5499      	strb	r1, [r3, r2]
									msgindexRMC++;
 8002a96:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <Start_GPS+0x174>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <Start_GPS+0x174>)
 8002aa0:	701a      	strb	r2, [r3, #0]
									*ptr1 =*(ptr1+msgindexRMC);
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <Start_GPS+0x174>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4413      	add	r3, r2
 8002aac:	781a      	ldrb	r2, [r3, #0]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	701a      	strb	r2, [r3, #0]
									if (*ptr1=='*')
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ab8:	d1e6      	bne.n	8002a88 <Start_GPS+0xe0>
									{
										RMC[msgindexRMC]='\n';
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <Start_GPS+0x174>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <Start_GPS+0x178>)
 8002ac2:	210a      	movs	r1, #10
 8002ac4:	5499      	strb	r1, [r3, r2]
										msgindexRMC++;
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <Start_GPS+0x174>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <Start_GPS+0x174>)
 8002ad0:	701a      	strb	r2, [r3, #0]
										RMC[msgindexRMC]='\0';
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <Start_GPS+0x174>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <Start_GPS+0x178>)
 8002ada:	2100      	movs	r1, #0
 8002adc:	5499      	strb	r1, [r3, r2]
										msgindexRMC=0;
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <Start_GPS+0x174>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
							}
						}
					}
				}
			}
			RMC_decode(RMC, &RMC_DATA);
 8002ae4:	490f      	ldr	r1, [pc, #60]	; (8002b24 <Start_GPS+0x17c>)
 8002ae6:	480e      	ldr	r0, [pc, #56]	; (8002b20 <Start_GPS+0x178>)
 8002ae8:	f7ff f942 	bl	8001d70 <RMC_decode>
			GGA_decode(GGA, &GGA_DATA);
 8002aec:	490e      	ldr	r1, [pc, #56]	; (8002b28 <Start_GPS+0x180>)
 8002aee:	480a      	ldr	r0, [pc, #40]	; (8002b18 <Start_GPS+0x170>)
 8002af0:	f7fe fe02 	bl	80016f8 <GGA_decode>
			Flag=0;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <Start_GPS+0x15c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
			osDelay(100);
 8002afa:	2064      	movs	r0, #100	; 0x64
 8002afc:	f004 fd1c 	bl	8007538 <osDelay>
		if (Flag==1)
 8002b00:	e756      	b.n	80029b0 <Start_GPS+0x8>
 8002b02:	bf00      	nop
 8002b04:	20000254 	.word	0x20000254
 8002b08:	0800e19c 	.word	0x0800e19c
 8002b0c:	20004f80 	.word	0x20004f80
 8002b10:	0800e1a4 	.word	0x0800e1a4
 8002b14:	20000250 	.word	0x20000250
 8002b18:	20004e38 	.word	0x20004e38
 8002b1c:	20000251 	.word	0x20000251
 8002b20:	20004d08 	.word	0x20004d08
 8002b24:	20004db8 	.word	0x20004db8
 8002b28:	20004c30 	.word	0x20004c30

08002b2c <StartTask06>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8002b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2e:	b0ad      	sub	sp, #180	; 0xb4
 8002b30:	af08      	add	r7, sp, #32
 8002b32:	6078      	str	r0, [r7, #4]
		char lat[30];
		char lon[30];
		char D_lat[30];
		char D_lon[30];

		gcvt(GGA_DATA.position.latitude, 10, lat);
 8002b34:	4b44      	ldr	r3, [pc, #272]	; (8002c48 <StartTask06+0x11c>)
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fd15 	bl	8000568 <__aeabi_f2d>
 8002b3e:	4604      	mov	r4, r0
 8002b40:	460d      	mov	r5, r1
 8002b42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b46:	4619      	mov	r1, r3
 8002b48:	200a      	movs	r0, #10
 8002b4a:	ec45 4b10 	vmov	d0, r4, r5
 8002b4e:	f007 f969 	bl	8009e24 <gcvt>
		gcvt(GGA_DATA.position.logitude, 10, lon);
 8002b52:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <StartTask06+0x11c>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fd06 	bl	8000568 <__aeabi_f2d>
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	460d      	mov	r5, r1
 8002b60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b64:	4619      	mov	r1, r3
 8002b66:	200a      	movs	r0, #10
 8002b68:	ec45 4b10 	vmov	d0, r4, r5
 8002b6c:	f007 f95a 	bl	8009e24 <gcvt>
		gcvt(Destination_Latitude, 10, D_lat);
 8002b70:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <StartTask06+0x120>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fcf7 	bl	8000568 <__aeabi_f2d>
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	460d      	mov	r5, r1
 8002b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b82:	4619      	mov	r1, r3
 8002b84:	200a      	movs	r0, #10
 8002b86:	ec45 4b10 	vmov	d0, r4, r5
 8002b8a:	f007 f94b 	bl	8009e24 <gcvt>
		gcvt(Destination_Longitude, 10, D_lon);
 8002b8e:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <StartTask06+0x124>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd fce8 	bl	8000568 <__aeabi_f2d>
 8002b98:	4604      	mov	r4, r0
 8002b9a:	460d      	mov	r5, r1
 8002b9c:	f107 030c 	add.w	r3, r7, #12
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	200a      	movs	r0, #10
 8002ba4:	ec45 4b10 	vmov	d0, r4, r5
 8002ba8:	f007 f93c 	bl	8009e24 <gcvt>
				,
				RMC_DATA.date.day, RMC_DATA.date.month, RMC_DATA.date.year,
				GGA_DATA.time.hour, GGA_DATA.time.minuit, GGA_DATA.time.second, Vehicle_ID,
				lon, lat,(uint16_t)RMC_DATA.speed_over_gnd, Check_Front_Obs, Global_u16LidarDistance,
				Left_Distance, Right_Distance,Rear_Distance, D_lon, D_lat);*/
		int len = snprintf(test_data, sizeof(test_data), "{\n"
 8002bac:	4b29      	ldr	r3, [pc, #164]	; (8002c54 <StartTask06+0x128>)
 8002bae:	681d      	ldr	r5, [r3, #0]
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <StartTask06+0x12c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
				"\"5\": %s,\n" //dest lon
				"\"6\": %s\n}" // dest lat

				/*RMC_DATA.date.year, RMC_DATA.date.month, RMC_DATA.date.day,
				GGA_DATA.time.hour, GGA_DATA.time.minuit, GGA_DATA.time.second*/, Vehicle_ID, Routing_command,
				/*lon, lat,*/(uint16_t)RMC_DATA.speed_over_gnd, Check_Front_Obs, Global_u16LidarDistance,
 8002bb4:	4a29      	ldr	r2, [pc, #164]	; (8002c5c <StartTask06+0x130>)
 8002bb6:	edd2 7a04 	vldr	s15, [r2, #16]
 8002bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bbe:	ee17 2a90 	vmov	r2, s15
 8002bc2:	b292      	uxth	r2, r2
		int len = snprintf(test_data, sizeof(test_data), "{\n"
 8002bc4:	4616      	mov	r6, r2
 8002bc6:	4a26      	ldr	r2, [pc, #152]	; (8002c60 <StartTask06+0x134>)
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	4926      	ldr	r1, [pc, #152]	; (8002c64 <StartTask06+0x138>)
 8002bcc:	8809      	ldrh	r1, [r1, #0]
 8002bce:	6039      	str	r1, [r7, #0]
 8002bd0:	4925      	ldr	r1, [pc, #148]	; (8002c68 <StartTask06+0x13c>)
 8002bd2:	6809      	ldr	r1, [r1, #0]
 8002bd4:	4825      	ldr	r0, [pc, #148]	; (8002c6c <StartTask06+0x140>)
 8002bd6:	6800      	ldr	r0, [r0, #0]
 8002bd8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002bdc:	9407      	str	r4, [sp, #28]
 8002bde:	f107 040c 	add.w	r4, r7, #12
 8002be2:	9406      	str	r4, [sp, #24]
 8002be4:	9005      	str	r0, [sp, #20]
 8002be6:	9104      	str	r1, [sp, #16]
 8002be8:	6839      	ldr	r1, [r7, #0]
 8002bea:	9103      	str	r1, [sp, #12]
 8002bec:	9202      	str	r2, [sp, #8]
 8002bee:	9601      	str	r6, [sp, #4]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	462b      	mov	r3, r5
 8002bf4:	4a1e      	ldr	r2, [pc, #120]	; (8002c70 <StartTask06+0x144>)
 8002bf6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002bfa:	481e      	ldr	r0, [pc, #120]	; (8002c74 <StartTask06+0x148>)
 8002bfc:	f007 fdf8 	bl	800a7f0 <sniprintf>
 8002c00:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

		OBSTACLE_FLAG       = "obsatcle flag"
		OBSTACLE_SPEED      = "obstacle speed"
		OBSTACLE_distance   = "obstacle distance"
		 */
		if (len < 0 || len >= sizeof(test_data)) {
 8002c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	db17      	blt.n	8002c3c <StartTask06+0x110>
 8002c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c10:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002c14:	d212      	bcs.n	8002c3c <StartTask06+0x110>
			// handle error
		} else {
			HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(&huart3, (uint8_t*)test_data, sizeof(test_data));
 8002c16:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002c1a:	4916      	ldr	r1, [pc, #88]	; (8002c74 <StartTask06+0x148>)
 8002c1c:	4816      	ldr	r0, [pc, #88]	; (8002c78 <StartTask06+0x14c>)
 8002c1e:	f003 f99d 	bl	8005f5c <HAL_UART_Transmit_DMA>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			//HAL_Delay(100);
			if (status != HAL_OK) {
 8002c28:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <StartTask06+0x110>
				// handle error
			} else {
				printf("Transmitted %d bytes of data: %s\n", sizeof(test_data), test_data);
 8002c30:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <StartTask06+0x148>)
 8002c32:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002c36:	4811      	ldr	r0, [pc, #68]	; (8002c7c <StartTask06+0x150>)
 8002c38:	f007 fdc2 	bl	800a7c0 <iprintf>
			}
		}

		osDelay(1000);
 8002c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c40:	f004 fc7a 	bl	8007538 <osDelay>
	{
 8002c44:	e776      	b.n	8002b34 <StartTask06+0x8>
 8002c46:	bf00      	nop
 8002c48:	20004c30 	.word	0x20004c30
 8002c4c:	2000000c 	.word	0x2000000c
 8002c50:	20000008 	.word	0x20000008
 8002c54:	20000004 	.word	0x20000004
 8002c58:	20000258 	.word	0x20000258
 8002c5c:	20004db8 	.word	0x20004db8
 8002c60:	2000025c 	.word	0x2000025c
 8002c64:	20000000 	.word	0x20000000
 8002c68:	20000238 	.word	0x20000238
 8002c6c:	20000224 	.word	0x20000224
 8002c70:	0800e1ac 	.word	0x0800e1ac
 8002c74:	20005328 	.word	0x20005328
 8002c78:	20004cc0 	.word	0x20004cc0
 8002c7c:	0800e25c 	.word	0x0800e25c

08002c80 <Start_Rec_Transmit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Rec_Transmit */
void Start_Rec_Transmit(void *argument)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_Rec_Transmit */
	/* Infinite loop */
	for(;;)
	{

		if (Flag_Rec == 1)
 8002c88:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <Start_Rec_Transmit+0x1c8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d1fb      	bne.n	8002c88 <Start_Rec_Transmit+0x8>
		{
			rx_data[strcspn(rx_data, "\r\n")] = '\0';
 8002c90:	496e      	ldr	r1, [pc, #440]	; (8002e4c <Start_Rec_Transmit+0x1cc>)
 8002c92:	486f      	ldr	r0, [pc, #444]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002c94:	f007 fde0 	bl	800a858 <strcspn>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4a6d      	ldr	r2, [pc, #436]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	54d1      	strb	r1, [r2, r3]
			rx_data[strcspn(rx_data, "\r\n")] = '\0';
 8002ca0:	496a      	ldr	r1, [pc, #424]	; (8002e4c <Start_Rec_Transmit+0x1cc>)
 8002ca2:	486b      	ldr	r0, [pc, #428]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002ca4:	f007 fdd8 	bl	800a858 <strcspn>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4a69      	ldr	r2, [pc, #420]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002cac:	2100      	movs	r1, #0
 8002cae:	54d1      	strb	r1, [r2, r3]
			if (strcmp(rx_data, "Right") == 0)
 8002cb0:	4968      	ldr	r1, [pc, #416]	; (8002e54 <Start_Rec_Transmit+0x1d4>)
 8002cb2:	4867      	ldr	r0, [pc, #412]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002cb4:	f7fd fa8c 	bl	80001d0 <strcmp>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d12a      	bne.n	8002d14 <Start_Rec_Transmit+0x94>
			{
				blink_color = 1; // Green
 8002cbe:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <Start_Rec_Transmit+0x1d8>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4864      	ldr	r0, [pc, #400]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002cca:	f001 fc0f 	bl	80044ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	4862      	ldr	r0, [pc, #392]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002cd4:	f001 fc0a 	bl	80044ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2104      	movs	r1, #4
 8002cdc:	485f      	ldr	r0, [pc, #380]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002cde:	f001 fc05 	bl	80044ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2108      	movs	r1, #8
 8002ce6:	485d      	ldr	r0, [pc, #372]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002ce8:	f001 fc00 	bl	80044ec <HAL_GPIO_WritePin>
				memset((rx_data), '\0', strlen(rx_data));
 8002cec:	4858      	ldr	r0, [pc, #352]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002cee:	f7fd fa79 	bl	80001e4 <strlen>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4855      	ldr	r0, [pc, #340]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002cfa:	f007 f8ef 	bl	8009edc <memset>
				LCD_clearScreen(); /* clear the LCD display */
 8002cfe:	f7fe fa50 	bl	80011a2 <LCD_clearScreen>
				LCD_displayString(" ");
 8002d02:	4857      	ldr	r0, [pc, #348]	; (8002e60 <Start_Rec_Transmit+0x1e0>)
 8002d04:	f7fe f9f0 	bl	80010e8 <LCD_displayString>
				LCD_displayStringRowColumn(1,3,"Turn Right");
 8002d08:	4a56      	ldr	r2, [pc, #344]	; (8002e64 <Start_Rec_Transmit+0x1e4>)
 8002d0a:	2103      	movs	r1, #3
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f7fe fa33 	bl	8001178 <LCD_displayStringRowColumn>
 8002d12:	e094      	b.n	8002e3e <Start_Rec_Transmit+0x1be>
			}
			else if( strcmp(rx_data, "Left") == 0)
 8002d14:	4954      	ldr	r1, [pc, #336]	; (8002e68 <Start_Rec_Transmit+0x1e8>)
 8002d16:	484e      	ldr	r0, [pc, #312]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002d18:	f7fd fa5a 	bl	80001d0 <strcmp>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d12a      	bne.n	8002d78 <Start_Rec_Transmit+0xf8>
			{
				blink_color = 2; // Yellow
 8002d22:	4b4d      	ldr	r3, [pc, #308]	; (8002e58 <Start_Rec_Transmit+0x1d8>)
 8002d24:	2202      	movs	r2, #2
 8002d26:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	484b      	ldr	r0, [pc, #300]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002d2e:	f001 fbdd 	bl	80044ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8002d32:	2201      	movs	r2, #1
 8002d34:	2102      	movs	r1, #2
 8002d36:	4849      	ldr	r0, [pc, #292]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002d38:	f001 fbd8 	bl	80044ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2104      	movs	r1, #4
 8002d40:	4846      	ldr	r0, [pc, #280]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002d42:	f001 fbd3 	bl	80044ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2108      	movs	r1, #8
 8002d4a:	4844      	ldr	r0, [pc, #272]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002d4c:	f001 fbce 	bl	80044ec <HAL_GPIO_WritePin>
				memset((rx_data), '\0', strlen(rx_data));
 8002d50:	483f      	ldr	r0, [pc, #252]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002d52:	f7fd fa47 	bl	80001e4 <strlen>
 8002d56:	4603      	mov	r3, r0
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	483c      	ldr	r0, [pc, #240]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002d5e:	f007 f8bd 	bl	8009edc <memset>

				LCD_clearScreen(); /* clear the LCD display */
 8002d62:	f7fe fa1e 	bl	80011a2 <LCD_clearScreen>
				LCD_displayString(" ");
 8002d66:	483e      	ldr	r0, [pc, #248]	; (8002e60 <Start_Rec_Transmit+0x1e0>)
 8002d68:	f7fe f9be 	bl	80010e8 <LCD_displayString>
				LCD_displayStringRowColumn(1,3,"Turn Left");
 8002d6c:	4a3f      	ldr	r2, [pc, #252]	; (8002e6c <Start_Rec_Transmit+0x1ec>)
 8002d6e:	2103      	movs	r1, #3
 8002d70:	2001      	movs	r0, #1
 8002d72:	f7fe fa01 	bl	8001178 <LCD_displayStringRowColumn>
 8002d76:	e062      	b.n	8002e3e <Start_Rec_Transmit+0x1be>
			} else if (strcmp(rx_data, "Straight") == 0)
 8002d78:	493d      	ldr	r1, [pc, #244]	; (8002e70 <Start_Rec_Transmit+0x1f0>)
 8002d7a:	4835      	ldr	r0, [pc, #212]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002d7c:	f7fd fa28 	bl	80001d0 <strcmp>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d12a      	bne.n	8002ddc <Start_Rec_Transmit+0x15c>
			{
				blink_color = 3; // Blue
 8002d86:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <Start_Rec_Transmit+0x1d8>)
 8002d88:	2203      	movs	r2, #3
 8002d8a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4832      	ldr	r0, [pc, #200]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002d92:	f001 fbab 	bl	80044ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8002d96:	2200      	movs	r2, #0
 8002d98:	2102      	movs	r1, #2
 8002d9a:	4830      	ldr	r0, [pc, #192]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002d9c:	f001 fba6 	bl	80044ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8002da0:	2201      	movs	r2, #1
 8002da2:	2104      	movs	r1, #4
 8002da4:	482d      	ldr	r0, [pc, #180]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002da6:	f001 fba1 	bl	80044ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2108      	movs	r1, #8
 8002dae:	482b      	ldr	r0, [pc, #172]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002db0:	f001 fb9c 	bl	80044ec <HAL_GPIO_WritePin>
				memset((rx_data), '\0', strlen(rx_data));
 8002db4:	4826      	ldr	r0, [pc, #152]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002db6:	f7fd fa15 	bl	80001e4 <strlen>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4823      	ldr	r0, [pc, #140]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002dc2:	f007 f88b 	bl	8009edc <memset>

				LCD_clearScreen(); /* clear the LCD display */
 8002dc6:	f7fe f9ec 	bl	80011a2 <LCD_clearScreen>
				LCD_displayString(" ");
 8002dca:	4825      	ldr	r0, [pc, #148]	; (8002e60 <Start_Rec_Transmit+0x1e0>)
 8002dcc:	f7fe f98c 	bl	80010e8 <LCD_displayString>
				LCD_displayStringRowColumn(1,3,"Go Straight");
 8002dd0:	4a28      	ldr	r2, [pc, #160]	; (8002e74 <Start_Rec_Transmit+0x1f4>)
 8002dd2:	2103      	movs	r1, #3
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	f7fe f9cf 	bl	8001178 <LCD_displayStringRowColumn>
 8002dda:	e030      	b.n	8002e3e <Start_Rec_Transmit+0x1be>

			} else if (strcmp(rx_data, "Warning") == 0)
 8002ddc:	4926      	ldr	r1, [pc, #152]	; (8002e78 <Start_Rec_Transmit+0x1f8>)
 8002dde:	481c      	ldr	r0, [pc, #112]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002de0:	f7fd f9f6 	bl	80001d0 <strcmp>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d129      	bne.n	8002e3e <Start_Rec_Transmit+0x1be>
			{
				blink_color = 4; // Red
 8002dea:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <Start_Rec_Transmit+0x1d8>)
 8002dec:	2204      	movs	r2, #4
 8002dee:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8002df0:	2200      	movs	r2, #0
 8002df2:	2101      	movs	r1, #1
 8002df4:	4819      	ldr	r0, [pc, #100]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002df6:	f001 fb79 	bl	80044ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4817      	ldr	r0, [pc, #92]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002e00:	f001 fb74 	bl	80044ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8002e04:	2200      	movs	r2, #0
 8002e06:	2104      	movs	r1, #4
 8002e08:	4814      	ldr	r0, [pc, #80]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002e0a:	f001 fb6f 	bl	80044ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 8002e0e:	2201      	movs	r2, #1
 8002e10:	2108      	movs	r1, #8
 8002e12:	4812      	ldr	r0, [pc, #72]	; (8002e5c <Start_Rec_Transmit+0x1dc>)
 8002e14:	f001 fb6a 	bl	80044ec <HAL_GPIO_WritePin>
				memset((rx_data), '\0', strlen(rx_data));
 8002e18:	480d      	ldr	r0, [pc, #52]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002e1a:	f7fd f9e3 	bl	80001e4 <strlen>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	2100      	movs	r1, #0
 8002e24:	480a      	ldr	r0, [pc, #40]	; (8002e50 <Start_Rec_Transmit+0x1d0>)
 8002e26:	f007 f859 	bl	8009edc <memset>

				LCD_clearScreen(); /* clear the LCD display */
 8002e2a:	f7fe f9ba 	bl	80011a2 <LCD_clearScreen>
				LCD_displayString(" ");
 8002e2e:	480c      	ldr	r0, [pc, #48]	; (8002e60 <Start_Rec_Transmit+0x1e0>)
 8002e30:	f7fe f95a 	bl	80010e8 <LCD_displayString>
				LCD_displayStringRowColumn(1,3,"Warning!!");
 8002e34:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <Start_Rec_Transmit+0x1fc>)
 8002e36:	2103      	movs	r1, #3
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f7fe f99d 	bl	8001178 <LCD_displayStringRowColumn>
			}

			Flag_Rec=0;
 8002e3e:	4b02      	ldr	r3, [pc, #8]	; (8002e48 <Start_Rec_Transmit+0x1c8>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
		if (Flag_Rec == 1)
 8002e44:	e720      	b.n	8002c88 <Start_Rec_Transmit+0x8>
 8002e46:	bf00      	nop
 8002e48:	20000260 	.word	0x20000260
 8002e4c:	0800e280 	.word	0x0800e280
 8002e50:	20004f74 	.word	0x20004f74
 8002e54:	0800e284 	.word	0x0800e284
 8002e58:	2000026c 	.word	0x2000026c
 8002e5c:	40020800 	.word	0x40020800
 8002e60:	0800e170 	.word	0x0800e170
 8002e64:	0800e28c 	.word	0x0800e28c
 8002e68:	0800e298 	.word	0x0800e298
 8002e6c:	0800e2a0 	.word	0x0800e2a0
 8002e70:	0800e2ac 	.word	0x0800e2ac
 8002e74:	0800e2b8 	.word	0x0800e2b8
 8002e78:	0800e2c4 	.word	0x0800e2c4
 8002e7c:	0800e2cc 	.word	0x0800e2cc

08002e80 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a04      	ldr	r2, [pc, #16]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002e92:	f000 fc67 	bl	8003764 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40001000 	.word	0x40001000

08002ea4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea8:	b672      	cpsid	i
}
 8002eaa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002eac:	e7fe      	b.n	8002eac <Error_Handler+0x8>
	...

08002eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_MspInit+0x54>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	4a11      	ldr	r2, [pc, #68]	; (8002f04 <HAL_MspInit+0x54>)
 8002ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec6:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_MspInit+0x54>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_MspInit+0x54>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <HAL_MspInit+0x54>)
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <HAL_MspInit+0x54>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	603b      	str	r3, [r7, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	210f      	movs	r1, #15
 8002ef2:	f06f 0001 	mvn.w	r0, #1
 8002ef6:	f000 fd31 	bl	800395c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800

08002f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_TIM_Base_MspInit+0x94>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d134      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <HAL_TIM_Base_MspInit+0x98>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <HAL_TIM_Base_MspInit+0x98>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <HAL_TIM_Base_MspInit+0x98>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <HAL_TIM_Base_MspInit+0x98>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <HAL_TIM_Base_MspInit+0x98>)
 8002f50:	f043 0310 	orr.w	r3, r3, #16
 8002f54:	6313      	str	r3, [r2, #48]	; 0x30
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_TIM_Base_MspInit+0x98>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8002f62:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8002f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f74:	2301      	movs	r3, #1
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4809      	ldr	r0, [pc, #36]	; (8002fa4 <HAL_TIM_Base_MspInit+0x9c>)
 8002f80:	f001 f918 	bl	80041b4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002f84:	2200      	movs	r2, #0
 8002f86:	2105      	movs	r1, #5
 8002f88:	201b      	movs	r0, #27
 8002f8a:	f000 fce7 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002f8e:	201b      	movs	r0, #27
 8002f90:	f000 fd00 	bl	8003994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002f94:	bf00      	nop
 8002f96:	3728      	adds	r7, #40	; 0x28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40010000 	.word	0x40010000
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40021000 	.word	0x40021000

08002fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08e      	sub	sp, #56	; 0x38
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a67      	ldr	r2, [pc, #412]	; (8003164 <HAL_UART_MspInit+0x1bc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d163      	bne.n	8003092 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	623b      	str	r3, [r7, #32]
 8002fce:	4b66      	ldr	r3, [pc, #408]	; (8003168 <HAL_UART_MspInit+0x1c0>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	4a65      	ldr	r2, [pc, #404]	; (8003168 <HAL_UART_MspInit+0x1c0>)
 8002fd4:	f043 0310 	orr.w	r3, r3, #16
 8002fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fda:	4b63      	ldr	r3, [pc, #396]	; (8003168 <HAL_UART_MspInit+0x1c0>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	623b      	str	r3, [r7, #32]
 8002fe4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	4b5f      	ldr	r3, [pc, #380]	; (8003168 <HAL_UART_MspInit+0x1c0>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a5e      	ldr	r2, [pc, #376]	; (8003168 <HAL_UART_MspInit+0x1c0>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b5c      	ldr	r3, [pc, #368]	; (8003168 <HAL_UART_MspInit+0x1c0>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003002:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003008:	2302      	movs	r3, #2
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300c:	2300      	movs	r3, #0
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003010:	2303      	movs	r3, #3
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003014:	2307      	movs	r3, #7
 8003016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301c:	4619      	mov	r1, r3
 800301e:	4853      	ldr	r0, [pc, #332]	; (800316c <HAL_UART_MspInit+0x1c4>)
 8003020:	f001 f8c8 	bl	80041b4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003024:	4b52      	ldr	r3, [pc, #328]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 8003026:	4a53      	ldr	r2, [pc, #332]	; (8003174 <HAL_UART_MspInit+0x1cc>)
 8003028:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800302a:	4b51      	ldr	r3, [pc, #324]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 800302c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003030:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003032:	4b4f      	ldr	r3, [pc, #316]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003038:	4b4d      	ldr	r3, [pc, #308]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800303e:	4b4c      	ldr	r3, [pc, #304]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 8003040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003044:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003046:	4b4a      	ldr	r3, [pc, #296]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 8003048:	2200      	movs	r2, #0
 800304a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800304c:	4b48      	ldr	r3, [pc, #288]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 800304e:	2200      	movs	r2, #0
 8003050:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003052:	4b47      	ldr	r3, [pc, #284]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 8003054:	2200      	movs	r2, #0
 8003056:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003058:	4b45      	ldr	r3, [pc, #276]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 800305a:	2200      	movs	r2, #0
 800305c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800305e:	4b44      	ldr	r3, [pc, #272]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 8003060:	2200      	movs	r2, #0
 8003062:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003064:	4842      	ldr	r0, [pc, #264]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 8003066:	f000 fca3 	bl	80039b0 <HAL_DMA_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003070:	f7ff ff18 	bl	8002ea4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a3e      	ldr	r2, [pc, #248]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
 800307a:	4a3d      	ldr	r2, [pc, #244]	; (8003170 <HAL_UART_MspInit+0x1c8>)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003080:	2200      	movs	r2, #0
 8003082:	2105      	movs	r1, #5
 8003084:	2025      	movs	r0, #37	; 0x25
 8003086:	f000 fc69 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800308a:	2025      	movs	r0, #37	; 0x25
 800308c:	f000 fc82 	bl	8003994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003090:	e10f      	b.n	80032b2 <HAL_UART_MspInit+0x30a>
  else if(huart->Instance==USART2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a38      	ldr	r2, [pc, #224]	; (8003178 <HAL_UART_MspInit+0x1d0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d173      	bne.n	8003184 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
 80030a0:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_UART_MspInit+0x1c0>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	4a30      	ldr	r2, [pc, #192]	; (8003168 <HAL_UART_MspInit+0x1c0>)
 80030a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030aa:	6413      	str	r3, [r2, #64]	; 0x40
 80030ac:	4b2e      	ldr	r3, [pc, #184]	; (8003168 <HAL_UART_MspInit+0x1c0>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_UART_MspInit+0x1c0>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	4a29      	ldr	r2, [pc, #164]	; (8003168 <HAL_UART_MspInit+0x1c0>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6313      	str	r3, [r2, #48]	; 0x30
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <HAL_UART_MspInit+0x1c0>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030d4:	230c      	movs	r3, #12
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e0:	2303      	movs	r3, #3
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030e4:	2307      	movs	r3, #7
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ec:	4619      	mov	r1, r3
 80030ee:	481f      	ldr	r0, [pc, #124]	; (800316c <HAL_UART_MspInit+0x1c4>)
 80030f0:	f001 f860 	bl	80041b4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80030f4:	4b21      	ldr	r3, [pc, #132]	; (800317c <HAL_UART_MspInit+0x1d4>)
 80030f6:	4a22      	ldr	r2, [pc, #136]	; (8003180 <HAL_UART_MspInit+0x1d8>)
 80030f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_UART_MspInit+0x1d4>)
 80030fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003100:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <HAL_UART_MspInit+0x1d4>)
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003108:	4b1c      	ldr	r3, [pc, #112]	; (800317c <HAL_UART_MspInit+0x1d4>)
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800310e:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_UART_MspInit+0x1d4>)
 8003110:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003114:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003116:	4b19      	ldr	r3, [pc, #100]	; (800317c <HAL_UART_MspInit+0x1d4>)
 8003118:	2200      	movs	r2, #0
 800311a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <HAL_UART_MspInit+0x1d4>)
 800311e:	2200      	movs	r2, #0
 8003120:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <HAL_UART_MspInit+0x1d4>)
 8003124:	2200      	movs	r2, #0
 8003126:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003128:	4b14      	ldr	r3, [pc, #80]	; (800317c <HAL_UART_MspInit+0x1d4>)
 800312a:	2200      	movs	r2, #0
 800312c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800312e:	4b13      	ldr	r3, [pc, #76]	; (800317c <HAL_UART_MspInit+0x1d4>)
 8003130:	2200      	movs	r2, #0
 8003132:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003134:	4811      	ldr	r0, [pc, #68]	; (800317c <HAL_UART_MspInit+0x1d4>)
 8003136:	f000 fc3b 	bl	80039b0 <HAL_DMA_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8003140:	f7ff feb0 	bl	8002ea4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a0d      	ldr	r2, [pc, #52]	; (800317c <HAL_UART_MspInit+0x1d4>)
 8003148:	639a      	str	r2, [r3, #56]	; 0x38
 800314a:	4a0c      	ldr	r2, [pc, #48]	; (800317c <HAL_UART_MspInit+0x1d4>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003150:	2200      	movs	r2, #0
 8003152:	2105      	movs	r1, #5
 8003154:	2026      	movs	r0, #38	; 0x26
 8003156:	f000 fc01 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800315a:	2026      	movs	r0, #38	; 0x26
 800315c:	f000 fc1a 	bl	8003994 <HAL_NVIC_EnableIRQ>
}
 8003160:	e0a7      	b.n	80032b2 <HAL_UART_MspInit+0x30a>
 8003162:	bf00      	nop
 8003164:	40011000 	.word	0x40011000
 8003168:	40023800 	.word	0x40023800
 800316c:	40020000 	.word	0x40020000
 8003170:	20004e88 	.word	0x20004e88
 8003174:	40026440 	.word	0x40026440
 8003178:	40004400 	.word	0x40004400
 800317c:	20004bd0 	.word	0x20004bd0
 8003180:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a4c      	ldr	r2, [pc, #304]	; (80032bc <HAL_UART_MspInit+0x314>)
 800318a:	4293      	cmp	r3, r2
 800318c:	f040 8091 	bne.w	80032b2 <HAL_UART_MspInit+0x30a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <HAL_UART_MspInit+0x318>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	4a49      	ldr	r2, [pc, #292]	; (80032c0 <HAL_UART_MspInit+0x318>)
 800319a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319e:	6413      	str	r3, [r2, #64]	; 0x40
 80031a0:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_UART_MspInit+0x318>)
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <HAL_UART_MspInit+0x318>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	4a42      	ldr	r2, [pc, #264]	; (80032c0 <HAL_UART_MspInit+0x318>)
 80031b6:	f043 0302 	orr.w	r3, r3, #2
 80031ba:	6313      	str	r3, [r2, #48]	; 0x30
 80031bc:	4b40      	ldr	r3, [pc, #256]	; (80032c0 <HAL_UART_MspInit+0x318>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80031c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d6:	2303      	movs	r3, #3
 80031d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031da:	2307      	movs	r3, #7
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031e2:	4619      	mov	r1, r3
 80031e4:	4837      	ldr	r0, [pc, #220]	; (80032c4 <HAL_UART_MspInit+0x31c>)
 80031e6:	f000 ffe5 	bl	80041b4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80031ea:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <HAL_UART_MspInit+0x320>)
 80031ec:	4a37      	ldr	r2, [pc, #220]	; (80032cc <HAL_UART_MspInit+0x324>)
 80031ee:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80031f0:	4b35      	ldr	r3, [pc, #212]	; (80032c8 <HAL_UART_MspInit+0x320>)
 80031f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031f8:	4b33      	ldr	r3, [pc, #204]	; (80032c8 <HAL_UART_MspInit+0x320>)
 80031fa:	2240      	movs	r2, #64	; 0x40
 80031fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031fe:	4b32      	ldr	r3, [pc, #200]	; (80032c8 <HAL_UART_MspInit+0x320>)
 8003200:	2200      	movs	r2, #0
 8003202:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003204:	4b30      	ldr	r3, [pc, #192]	; (80032c8 <HAL_UART_MspInit+0x320>)
 8003206:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800320a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800320c:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <HAL_UART_MspInit+0x320>)
 800320e:	2200      	movs	r2, #0
 8003210:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003212:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <HAL_UART_MspInit+0x320>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003218:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_UART_MspInit+0x320>)
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800321e:	4b2a      	ldr	r3, [pc, #168]	; (80032c8 <HAL_UART_MspInit+0x320>)
 8003220:	2200      	movs	r2, #0
 8003222:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003224:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <HAL_UART_MspInit+0x320>)
 8003226:	2200      	movs	r2, #0
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800322a:	4827      	ldr	r0, [pc, #156]	; (80032c8 <HAL_UART_MspInit+0x320>)
 800322c:	f000 fbc0 	bl	80039b0 <HAL_DMA_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_UART_MspInit+0x292>
      Error_Handler();
 8003236:	f7ff fe35 	bl	8002ea4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <HAL_UART_MspInit+0x320>)
 800323e:	635a      	str	r2, [r3, #52]	; 0x34
 8003240:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <HAL_UART_MspInit+0x320>)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003246:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_UART_MspInit+0x328>)
 8003248:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <HAL_UART_MspInit+0x32c>)
 800324a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800324c:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_UART_MspInit+0x328>)
 800324e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003252:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003254:	4b1e      	ldr	r3, [pc, #120]	; (80032d0 <HAL_UART_MspInit+0x328>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_UART_MspInit+0x328>)
 800325c:	2200      	movs	r2, #0
 800325e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_UART_MspInit+0x328>)
 8003262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003266:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <HAL_UART_MspInit+0x328>)
 800326a:	2200      	movs	r2, #0
 800326c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800326e:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <HAL_UART_MspInit+0x328>)
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003274:	4b16      	ldr	r3, [pc, #88]	; (80032d0 <HAL_UART_MspInit+0x328>)
 8003276:	2200      	movs	r2, #0
 8003278:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <HAL_UART_MspInit+0x328>)
 800327c:	2200      	movs	r2, #0
 800327e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <HAL_UART_MspInit+0x328>)
 8003282:	2200      	movs	r2, #0
 8003284:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003286:	4812      	ldr	r0, [pc, #72]	; (80032d0 <HAL_UART_MspInit+0x328>)
 8003288:	f000 fb92 	bl	80039b0 <HAL_DMA_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 8003292:	f7ff fe07 	bl	8002ea4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_UART_MspInit+0x328>)
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
 800329c:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <HAL_UART_MspInit+0x328>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2105      	movs	r1, #5
 80032a6:	2027      	movs	r0, #39	; 0x27
 80032a8:	f000 fb58 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032ac:	2027      	movs	r0, #39	; 0x27
 80032ae:	f000 fb71 	bl	8003994 <HAL_NVIC_EnableIRQ>
}
 80032b2:	bf00      	nop
 80032b4:	3738      	adds	r7, #56	; 0x38
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40004800 	.word	0x40004800
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40020400 	.word	0x40020400
 80032c8:	20004d58 	.word	0x20004d58
 80032cc:	40026058 	.word	0x40026058
 80032d0:	20004c60 	.word	0x20004c60
 80032d4:	40026028 	.word	0x40026028

080032d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08e      	sub	sp, #56	; 0x38
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_InitTick+0xe4>)
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	4a32      	ldr	r2, [pc, #200]	; (80033bc <HAL_InitTick+0xe4>)
 80032f2:	f043 0310 	orr.w	r3, r3, #16
 80032f6:	6413      	str	r3, [r2, #64]	; 0x40
 80032f8:	4b30      	ldr	r3, [pc, #192]	; (80033bc <HAL_InitTick+0xe4>)
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003304:	f107 0210 	add.w	r2, r7, #16
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fd7a 	bl	8004e08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003314:	6a3b      	ldr	r3, [r7, #32]
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d103      	bne.n	8003326 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800331e:	f001 fd4b 	bl	8004db8 <HAL_RCC_GetPCLK1Freq>
 8003322:	6378      	str	r0, [r7, #52]	; 0x34
 8003324:	e004      	b.n	8003330 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003326:	f001 fd47 	bl	8004db8 <HAL_RCC_GetPCLK1Freq>
 800332a:	4603      	mov	r3, r0
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003332:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <HAL_InitTick+0xe8>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	0c9b      	lsrs	r3, r3, #18
 800333a:	3b01      	subs	r3, #1
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800333e:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <HAL_InitTick+0xec>)
 8003340:	4a21      	ldr	r2, [pc, #132]	; (80033c8 <HAL_InitTick+0xf0>)
 8003342:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003344:	4b1f      	ldr	r3, [pc, #124]	; (80033c4 <HAL_InitTick+0xec>)
 8003346:	f240 32e7 	movw	r2, #999	; 0x3e7
 800334a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800334c:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <HAL_InitTick+0xec>)
 800334e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003350:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_InitTick+0xec>)
 8003354:	2200      	movs	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003358:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <HAL_InitTick+0xec>)
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800335e:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_InitTick+0xec>)
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003364:	4817      	ldr	r0, [pc, #92]	; (80033c4 <HAL_InitTick+0xec>)
 8003366:	f001 fd81 	bl	8004e6c <HAL_TIM_Base_Init>
 800336a:	4603      	mov	r3, r0
 800336c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003370:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003374:	2b00      	cmp	r3, #0
 8003376:	d11b      	bne.n	80033b0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003378:	4812      	ldr	r0, [pc, #72]	; (80033c4 <HAL_InitTick+0xec>)
 800337a:	f001 fdc7 	bl	8004f0c <HAL_TIM_Base_Start_IT>
 800337e:	4603      	mov	r3, r0
 8003380:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003384:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003388:	2b00      	cmp	r3, #0
 800338a:	d111      	bne.n	80033b0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800338c:	2036      	movs	r0, #54	; 0x36
 800338e:	f000 fb01 	bl	8003994 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b0f      	cmp	r3, #15
 8003396:	d808      	bhi.n	80033aa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003398:	2200      	movs	r2, #0
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	2036      	movs	r0, #54	; 0x36
 800339e:	f000 fadd 	bl	800395c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033a2:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <HAL_InitTick+0xf4>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	e002      	b.n	80033b0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80033b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3738      	adds	r7, #56	; 0x38
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	431bde83 	.word	0x431bde83
 80033c4:	200054b8 	.word	0x200054b8
 80033c8:	40001000 	.word	0x40001000
 80033cc:	20000014 	.word	0x20000014

080033d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80033d4:	e7fe      	b.n	80033d4 <NMI_Handler+0x4>

080033d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033da:	e7fe      	b.n	80033da <HardFault_Handler+0x4>

080033dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033e0:	e7fe      	b.n	80033e0 <MemManage_Handler+0x4>

080033e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033e2:	b480      	push	{r7}
 80033e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033e6:	e7fe      	b.n	80033e6 <BusFault_Handler+0x4>

080033e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033ec:	e7fe      	b.n	80033ec <UsageFault_Handler+0x4>

080033ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <DMA1_Stream1_IRQHandler+0x10>)
 8003402:	f000 fc6d 	bl	8003ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20004c60 	.word	0x20004c60

08003410 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <DMA1_Stream3_IRQHandler+0x10>)
 8003416:	f000 fc63 	bl	8003ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20004d58 	.word	0x20004d58

08003424 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <DMA1_Stream5_IRQHandler+0x10>)
 800342a:	f000 fc59 	bl	8003ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20004bd0 	.word	0x20004bd0

08003438 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <TIM1_CC_IRQHandler+0x10>)
 800343e:	f001 ff57 	bl	80052f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20004f2c 	.word	0x20004f2c

0800344c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
	uint8_t error;

	if((__HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE) != RESET))
 8003456:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <USART1_IRQHandler+0x74>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b10      	cmp	r3, #16
 8003462:	d126      	bne.n	80034b2 <USART1_IRQHandler+0x66>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8003464:	2300      	movs	r3, #0
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <USART1_IRQHandler+0x74>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <USART1_IRQHandler+0x74>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	607b      	str	r3, [r7, #4]
 8003478:	687b      	ldr	r3, [r7, #4]

		tmp = huart1.Instance->SR;
 800347a:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <USART1_IRQHandler+0x74>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]
		tmp = huart1.Instance->DR;
 8003482:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <USART1_IRQHandler+0x74>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	60fb      	str	r3, [r7, #12]

		HAL_UART_DMAStop(&huart1);
 800348a:	480d      	ldr	r0, [pc, #52]	; (80034c0 <USART1_IRQHandler+0x74>)
 800348c:	f002 fe14 	bl	80060b8 <HAL_UART_DMAStop>

		tmp =  USART_BUF_SIZE - hdma_usart1_rx.Instance->NDTR;
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <USART1_IRQHandler+0x78>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800349a:	60fb      	str	r3, [r7, #12]

		HAL_UART_Receive_DMA(&huart1, g_usart1_rx_buf, USART_BUF_SIZE);
 800349c:	2240      	movs	r2, #64	; 0x40
 800349e:	490a      	ldr	r1, [pc, #40]	; (80034c8 <USART1_IRQHandler+0x7c>)
 80034a0:	4807      	ldr	r0, [pc, #28]	; (80034c0 <USART1_IRQHandler+0x74>)
 80034a2:	f002 fdd9 	bl	8006058 <HAL_UART_Receive_DMA>

		error=Lidar_get_distance(g_usart1_rx_buf, 9);
 80034a6:	2109      	movs	r1, #9
 80034a8:	4807      	ldr	r0, [pc, #28]	; (80034c8 <USART1_IRQHandler+0x7c>)
 80034aa:	f7fd feb7 	bl	800121c <Lidar_get_distance>
 80034ae:	4603      	mov	r3, r0
 80034b0:	72fb      	strb	r3, [r7, #11]
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034b2:	4803      	ldr	r0, [pc, #12]	; (80034c0 <USART1_IRQHandler+0x74>)
 80034b4:	f002 fee4 	bl	8006280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20004ee8 	.word	0x20004ee8
 80034c4:	20004e88 	.word	0x20004e88
 80034c8:	20000270 	.word	0x20000270

080034cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034d0:	4802      	ldr	r0, [pc, #8]	; (80034dc <USART2_IRQHandler+0x10>)
 80034d2:	f002 fed5 	bl	8006280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	200052d8 	.word	0x200052d8

080034e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <USART3_IRQHandler+0x10>)
 80034e6:	f002 fecb 	bl	8006280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20004cc0 	.word	0x20004cc0

080034f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <TIM6_DAC_IRQHandler+0x10>)
 80034fa:	f001 fef9 	bl	80052f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200054b8 	.word	0x200054b8

08003508 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <DMA2_Stream2_IRQHandler+0x10>)
 800350e:	f000 fbe7 	bl	8003ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20004e88 	.word	0x20004e88

0800351c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return 1;
 8003520:	2301      	movs	r3, #1
}
 8003522:	4618      	mov	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <_kill>:

int _kill(int pid, int sig)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003536:	f006 fc99 	bl	8009e6c <__errno>
 800353a:	4603      	mov	r3, r0
 800353c:	2216      	movs	r2, #22
 800353e:	601a      	str	r2, [r3, #0]
  return -1;
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <_exit>:

void _exit (int status)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003554:	f04f 31ff 	mov.w	r1, #4294967295
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ffe7 	bl	800352c <_kill>
  while (1) {}    /* Make sure we hang here */
 800355e:	e7fe      	b.n	800355e <_exit+0x12>

08003560 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	e00a      	b.n	8003588 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003572:	f3af 8000 	nop.w
 8003576:	4601      	mov	r1, r0
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	60ba      	str	r2, [r7, #8]
 800357e:	b2ca      	uxtb	r2, r1
 8003580:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	3301      	adds	r3, #1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	429a      	cmp	r2, r3
 800358e:	dbf0      	blt.n	8003572 <_read+0x12>
  }

  return len;
 8003590:	687b      	ldr	r3, [r7, #4]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b086      	sub	sp, #24
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e009      	b.n	80035c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	60ba      	str	r2, [r7, #8]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3301      	adds	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	dbf1      	blt.n	80035ac <_write+0x12>
  }
  return len;
 80035c8:	687b      	ldr	r3, [r7, #4]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <_close>:

int _close(int file)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035fa:	605a      	str	r2, [r3, #4]
  return 0;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <_isatty>:

int _isatty(int file)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003612:	2301      	movs	r3, #1
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003644:	4a14      	ldr	r2, [pc, #80]	; (8003698 <_sbrk+0x5c>)
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <_sbrk+0x60>)
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003650:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <_sbrk+0x64>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d102      	bne.n	800365e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <_sbrk+0x64>)
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <_sbrk+0x68>)
 800365c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800365e:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <_sbrk+0x64>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	429a      	cmp	r2, r3
 800366a:	d207      	bcs.n	800367c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800366c:	f006 fbfe 	bl	8009e6c <__errno>
 8003670:	4603      	mov	r3, r0
 8003672:	220c      	movs	r2, #12
 8003674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	e009      	b.n	8003690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <_sbrk+0x64>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <_sbrk+0x64>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <_sbrk+0x64>)
 800368c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20020000 	.word	0x20020000
 800369c:	00000400 	.word	0x00000400
 80036a0:	200002b0 	.word	0x200002b0
 80036a4:	20005558 	.word	0x20005558

080036a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <SystemInit+0x20>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <SystemInit+0x20>)
 80036b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036d0:	480d      	ldr	r0, [pc, #52]	; (8003708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036d2:	490e      	ldr	r1, [pc, #56]	; (800370c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036d4:	4a0e      	ldr	r2, [pc, #56]	; (8003710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036d8:	e002      	b.n	80036e0 <LoopCopyDataInit>

080036da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036de:	3304      	adds	r3, #4

080036e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036e4:	d3f9      	bcc.n	80036da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036e6:	4a0b      	ldr	r2, [pc, #44]	; (8003714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036e8:	4c0b      	ldr	r4, [pc, #44]	; (8003718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036ec:	e001      	b.n	80036f2 <LoopFillZerobss>

080036ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f0:	3204      	adds	r2, #4

080036f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036f4:	d3fb      	bcc.n	80036ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036f6:	f7ff ffd7 	bl	80036a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036fa:	f006 fbbd 	bl	8009e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036fe:	f7fe fd7d 	bl	80021fc <main>
  bx  lr    
 8003702:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800370c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003710:	0800e820 	.word	0x0800e820
  ldr r2, =_sbss
 8003714:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003718:	20005554 	.word	0x20005554

0800371c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800371c:	e7fe      	b.n	800371c <ADC_IRQHandler>
	...

08003720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <HAL_Init+0x40>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <HAL_Init+0x40>)
 800372a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800372e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_Init+0x40>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <HAL_Init+0x40>)
 8003736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800373a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800373c:	4b08      	ldr	r3, [pc, #32]	; (8003760 <HAL_Init+0x40>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a07      	ldr	r2, [pc, #28]	; (8003760 <HAL_Init+0x40>)
 8003742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003748:	2003      	movs	r0, #3
 800374a:	f000 f8fc 	bl	8003946 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800374e:	200f      	movs	r0, #15
 8003750:	f7ff fdc2 	bl	80032d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003754:	f7ff fbac 	bl	8002eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023c00 	.word	0x40023c00

08003764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_IncTick+0x20>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_IncTick+0x24>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4413      	add	r3, r2
 8003774:	4a04      	ldr	r2, [pc, #16]	; (8003788 <HAL_IncTick+0x24>)
 8003776:	6013      	str	r3, [r2, #0]
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000018 	.word	0x20000018
 8003788:	20005500 	.word	0x20005500

0800378c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return uwTick;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_GetTick+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20005500 	.word	0x20005500

080037a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037ac:	f7ff ffee 	bl	800378c <HAL_GetTick>
 80037b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d005      	beq.n	80037ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_Delay+0x44>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037ca:	bf00      	nop
 80037cc:	f7ff ffde 	bl	800378c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d8f7      	bhi.n	80037cc <HAL_Delay+0x28>
  {
  }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000018 	.word	0x20000018

080037ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003808:	4013      	ands	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381e:	4a04      	ldr	r2, [pc, #16]	; (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	60d3      	str	r3, [r2, #12]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <__NVIC_GetPriorityGrouping+0x18>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	f003 0307 	and.w	r3, r3, #7
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db0b      	blt.n	800387a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	4907      	ldr	r1, [pc, #28]	; (8003888 <__NVIC_EnableIRQ+0x38>)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2001      	movs	r0, #1
 8003872:	fa00 f202 	lsl.w	r2, r0, r2
 8003876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000e100 	.word	0xe000e100

0800388c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	6039      	str	r1, [r7, #0]
 8003896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	db0a      	blt.n	80038b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	490c      	ldr	r1, [pc, #48]	; (80038d8 <__NVIC_SetPriority+0x4c>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	0112      	lsls	r2, r2, #4
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	440b      	add	r3, r1
 80038b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b4:	e00a      	b.n	80038cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4908      	ldr	r1, [pc, #32]	; (80038dc <__NVIC_SetPriority+0x50>)
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	3b04      	subs	r3, #4
 80038c4:	0112      	lsls	r2, r2, #4
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	440b      	add	r3, r1
 80038ca:	761a      	strb	r2, [r3, #24]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000e100 	.word	0xe000e100
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b089      	sub	sp, #36	; 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f1c3 0307 	rsb	r3, r3, #7
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	bf28      	it	cs
 80038fe:	2304      	movcs	r3, #4
 8003900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3304      	adds	r3, #4
 8003906:	2b06      	cmp	r3, #6
 8003908:	d902      	bls.n	8003910 <NVIC_EncodePriority+0x30>
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3b03      	subs	r3, #3
 800390e:	e000      	b.n	8003912 <NVIC_EncodePriority+0x32>
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003914:	f04f 32ff 	mov.w	r2, #4294967295
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43da      	mvns	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	401a      	ands	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003928:	f04f 31ff 	mov.w	r1, #4294967295
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa01 f303 	lsl.w	r3, r1, r3
 8003932:	43d9      	mvns	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003938:	4313      	orrs	r3, r2
         );
}
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	; 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff4c 	bl	80037ec <__NVIC_SetPriorityGrouping>
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800396e:	f7ff ff61 	bl	8003834 <__NVIC_GetPriorityGrouping>
 8003972:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	6978      	ldr	r0, [r7, #20]
 800397a:	f7ff ffb1 	bl	80038e0 <NVIC_EncodePriority>
 800397e:	4602      	mov	r2, r0
 8003980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff80 	bl	800388c <__NVIC_SetPriority>
}
 800398c:	bf00      	nop
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ff54 	bl	8003850 <__NVIC_EnableIRQ>
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039bc:	f7ff fee6 	bl	800378c <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e099      	b.n	8003b00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ec:	e00f      	b.n	8003a0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ee:	f7ff fecd 	bl	800378c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b05      	cmp	r3, #5
 80039fa:	d908      	bls.n	8003a0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2203      	movs	r2, #3
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e078      	b.n	8003b00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e8      	bne.n	80039ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4b38      	ldr	r3, [pc, #224]	; (8003b08 <HAL_DMA_Init+0x158>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d107      	bne.n	8003a78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	4313      	orrs	r3, r2
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f023 0307 	bic.w	r3, r3, #7
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d117      	bne.n	8003ad2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fb01 	bl	80040bc <DMA_CheckFifoParam>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2240      	movs	r2, #64	; 0x40
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e016      	b.n	8003b00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fab8 	bl	8004050 <DMA_CalcBaseAndBitshift>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	223f      	movs	r2, #63	; 0x3f
 8003aea:	409a      	lsls	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	f010803f 	.word	0xf010803f

08003b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_DMA_Start_IT+0x26>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e040      	b.n	8003bb4 <HAL_DMA_Start_IT+0xa8>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d12f      	bne.n	8003ba6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68b9      	ldr	r1, [r7, #8]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fa4a 	bl	8003ff4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b64:	223f      	movs	r2, #63	; 0x3f
 8003b66:	409a      	lsls	r2, r3
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0216 	orr.w	r2, r2, #22
 8003b7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0208 	orr.w	r2, r2, #8
 8003b92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	e005      	b.n	8003bb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bca:	f7ff fddf 	bl	800378c <HAL_GetTick>
 8003bce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d008      	beq.n	8003bee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e052      	b.n	8003c94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0216 	bic.w	r2, r2, #22
 8003bfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d103      	bne.n	8003c1e <HAL_DMA_Abort+0x62>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0208 	bic.w	r2, r2, #8
 8003c2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c3e:	e013      	b.n	8003c68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c40:	f7ff fda4 	bl	800378c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	d90c      	bls.n	8003c68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2203      	movs	r2, #3
 8003c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e015      	b.n	8003c94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e4      	bne.n	8003c40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	223f      	movs	r2, #63	; 0x3f
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d004      	beq.n	8003cba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2280      	movs	r2, #128	; 0x80
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e00c      	b.n	8003cd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2205      	movs	r2, #5
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cec:	4b92      	ldr	r3, [pc, #584]	; (8003f38 <HAL_DMA_IRQHandler+0x258>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a92      	ldr	r2, [pc, #584]	; (8003f3c <HAL_DMA_IRQHandler+0x25c>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	0a9b      	lsrs	r3, r3, #10
 8003cf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d01a      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d013      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0204 	bic.w	r2, r2, #4
 8003d32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d38:	2208      	movs	r2, #8
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	2201      	movs	r2, #1
 8003d52:	409a      	lsls	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d012      	beq.n	8003d82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00b      	beq.n	8003d82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6e:	2201      	movs	r2, #1
 8003d70:	409a      	lsls	r2, r3
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	2204      	movs	r2, #4
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d012      	beq.n	8003db8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00b      	beq.n	8003db8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	2204      	movs	r2, #4
 8003da6:	409a      	lsls	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	f043 0204 	orr.w	r2, r3, #4
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	2210      	movs	r2, #16
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d043      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d03c      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	2210      	movs	r2, #16
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d018      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d108      	bne.n	8003e10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d024      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4798      	blx	r3
 8003e0e:	e01f      	b.n	8003e50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01b      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	4798      	blx	r3
 8003e20:	e016      	b.n	8003e50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d107      	bne.n	8003e40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0208 	bic.w	r2, r2, #8
 8003e3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e54:	2220      	movs	r2, #32
 8003e56:	409a      	lsls	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 808e 	beq.w	8003f7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8086 	beq.w	8003f7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	2220      	movs	r2, #32
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b05      	cmp	r3, #5
 8003e88:	d136      	bne.n	8003ef8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0216 	bic.w	r2, r2, #22
 8003e98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d103      	bne.n	8003eba <HAL_DMA_IRQHandler+0x1da>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0208 	bic.w	r2, r2, #8
 8003ec8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	223f      	movs	r2, #63	; 0x3f
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d07d      	beq.n	8003fea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	4798      	blx	r3
        }
        return;
 8003ef6:	e078      	b.n	8003fea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01c      	beq.n	8003f40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d108      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d030      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	4798      	blx	r3
 8003f24:	e02b      	b.n	8003f7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d027      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
 8003f36:	e022      	b.n	8003f7e <HAL_DMA_IRQHandler+0x29e>
 8003f38:	20000010 	.word	0x20000010
 8003f3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10f      	bne.n	8003f6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0210 	bic.w	r2, r2, #16
 8003f5c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d032      	beq.n	8003fec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d022      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2205      	movs	r2, #5
 8003f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	3301      	adds	r3, #1
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d307      	bcc.n	8003fc6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f2      	bne.n	8003faa <HAL_DMA_IRQHandler+0x2ca>
 8003fc4:	e000      	b.n	8003fc8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003fc6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4798      	blx	r3
 8003fe8:	e000      	b.n	8003fec <HAL_DMA_IRQHandler+0x30c>
        return;
 8003fea:	bf00      	nop
    }
  }
}
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop

08003ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004010:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b40      	cmp	r3, #64	; 0x40
 8004020:	d108      	bne.n	8004034 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004032:	e007      	b.n	8004044 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	3b10      	subs	r3, #16
 8004060:	4a14      	ldr	r2, [pc, #80]	; (80040b4 <DMA_CalcBaseAndBitshift+0x64>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	091b      	lsrs	r3, r3, #4
 8004068:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800406a:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <DMA_CalcBaseAndBitshift+0x68>)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b03      	cmp	r3, #3
 800407c:	d909      	bls.n	8004092 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	1d1a      	adds	r2, r3, #4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	659a      	str	r2, [r3, #88]	; 0x58
 8004090:	e007      	b.n	80040a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800409a:	f023 0303 	bic.w	r3, r3, #3
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	aaaaaaab 	.word	0xaaaaaaab
 80040b8:	0800e3e0 	.word	0x0800e3e0

080040bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d11f      	bne.n	8004116 <DMA_CheckFifoParam+0x5a>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d856      	bhi.n	800418a <DMA_CheckFifoParam+0xce>
 80040dc:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <DMA_CheckFifoParam+0x28>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	080040f5 	.word	0x080040f5
 80040e8:	08004107 	.word	0x08004107
 80040ec:	080040f5 	.word	0x080040f5
 80040f0:	0800418b 	.word	0x0800418b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d046      	beq.n	800418e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004104:	e043      	b.n	800418e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800410e:	d140      	bne.n	8004192 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004114:	e03d      	b.n	8004192 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411e:	d121      	bne.n	8004164 <DMA_CheckFifoParam+0xa8>
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b03      	cmp	r3, #3
 8004124:	d837      	bhi.n	8004196 <DMA_CheckFifoParam+0xda>
 8004126:	a201      	add	r2, pc, #4	; (adr r2, 800412c <DMA_CheckFifoParam+0x70>)
 8004128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412c:	0800413d 	.word	0x0800413d
 8004130:	08004143 	.word	0x08004143
 8004134:	0800413d 	.word	0x0800413d
 8004138:	08004155 	.word	0x08004155
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      break;
 8004140:	e030      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d025      	beq.n	800419a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004152:	e022      	b.n	800419a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800415c:	d11f      	bne.n	800419e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004162:	e01c      	b.n	800419e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d903      	bls.n	8004172 <DMA_CheckFifoParam+0xb6>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b03      	cmp	r3, #3
 800416e:	d003      	beq.n	8004178 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004170:	e018      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
      break;
 8004176:	e015      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
      break;
 8004188:	e00b      	b.n	80041a2 <DMA_CheckFifoParam+0xe6>
      break;
 800418a:	bf00      	nop
 800418c:	e00a      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      break;
 800418e:	bf00      	nop
 8004190:	e008      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004192:	bf00      	nop
 8004194:	e006      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004196:	bf00      	nop
 8004198:	e004      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      break;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <DMA_CheckFifoParam+0xe8>
      break;
 80041a2:	bf00      	nop
    }
  } 
  
  return status; 
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop

080041b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b089      	sub	sp, #36	; 0x24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	e16b      	b.n	80044a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041d0:	2201      	movs	r2, #1
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	f040 815a 	bne.w	80044a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d005      	beq.n	8004206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004202:	2b02      	cmp	r3, #2
 8004204:	d130      	bne.n	8004268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	2203      	movs	r2, #3
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4013      	ands	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4313      	orrs	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800423c:	2201      	movs	r2, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	43db      	mvns	r3, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	4013      	ands	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 0201 	and.w	r2, r3, #1
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4313      	orrs	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 0303 	and.w	r3, r3, #3
 8004270:	2b03      	cmp	r3, #3
 8004272:	d017      	beq.n	80042a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	2203      	movs	r2, #3
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4313      	orrs	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d123      	bne.n	80042f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	08da      	lsrs	r2, r3, #3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3208      	adds	r2, #8
 80042b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	220f      	movs	r2, #15
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	08da      	lsrs	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3208      	adds	r2, #8
 80042f2:	69b9      	ldr	r1, [r7, #24]
 80042f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	2203      	movs	r2, #3
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	43db      	mvns	r3, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4013      	ands	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0203 	and.w	r2, r3, #3
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 80b4 	beq.w	80044a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
 800433e:	4b60      	ldr	r3, [pc, #384]	; (80044c0 <HAL_GPIO_Init+0x30c>)
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	4a5f      	ldr	r2, [pc, #380]	; (80044c0 <HAL_GPIO_Init+0x30c>)
 8004344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004348:	6453      	str	r3, [r2, #68]	; 0x44
 800434a:	4b5d      	ldr	r3, [pc, #372]	; (80044c0 <HAL_GPIO_Init+0x30c>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004356:	4a5b      	ldr	r2, [pc, #364]	; (80044c4 <HAL_GPIO_Init+0x310>)
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	089b      	lsrs	r3, r3, #2
 800435c:	3302      	adds	r3, #2
 800435e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	220f      	movs	r2, #15
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4013      	ands	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a52      	ldr	r2, [pc, #328]	; (80044c8 <HAL_GPIO_Init+0x314>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02b      	beq.n	80043da <HAL_GPIO_Init+0x226>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a51      	ldr	r2, [pc, #324]	; (80044cc <HAL_GPIO_Init+0x318>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d025      	beq.n	80043d6 <HAL_GPIO_Init+0x222>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a50      	ldr	r2, [pc, #320]	; (80044d0 <HAL_GPIO_Init+0x31c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01f      	beq.n	80043d2 <HAL_GPIO_Init+0x21e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a4f      	ldr	r2, [pc, #316]	; (80044d4 <HAL_GPIO_Init+0x320>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d019      	beq.n	80043ce <HAL_GPIO_Init+0x21a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a4e      	ldr	r2, [pc, #312]	; (80044d8 <HAL_GPIO_Init+0x324>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d013      	beq.n	80043ca <HAL_GPIO_Init+0x216>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a4d      	ldr	r2, [pc, #308]	; (80044dc <HAL_GPIO_Init+0x328>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00d      	beq.n	80043c6 <HAL_GPIO_Init+0x212>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a4c      	ldr	r2, [pc, #304]	; (80044e0 <HAL_GPIO_Init+0x32c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d007      	beq.n	80043c2 <HAL_GPIO_Init+0x20e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a4b      	ldr	r2, [pc, #300]	; (80044e4 <HAL_GPIO_Init+0x330>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <HAL_GPIO_Init+0x20a>
 80043ba:	2307      	movs	r3, #7
 80043bc:	e00e      	b.n	80043dc <HAL_GPIO_Init+0x228>
 80043be:	2308      	movs	r3, #8
 80043c0:	e00c      	b.n	80043dc <HAL_GPIO_Init+0x228>
 80043c2:	2306      	movs	r3, #6
 80043c4:	e00a      	b.n	80043dc <HAL_GPIO_Init+0x228>
 80043c6:	2305      	movs	r3, #5
 80043c8:	e008      	b.n	80043dc <HAL_GPIO_Init+0x228>
 80043ca:	2304      	movs	r3, #4
 80043cc:	e006      	b.n	80043dc <HAL_GPIO_Init+0x228>
 80043ce:	2303      	movs	r3, #3
 80043d0:	e004      	b.n	80043dc <HAL_GPIO_Init+0x228>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e002      	b.n	80043dc <HAL_GPIO_Init+0x228>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_GPIO_Init+0x228>
 80043da:	2300      	movs	r3, #0
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	f002 0203 	and.w	r2, r2, #3
 80043e2:	0092      	lsls	r2, r2, #2
 80043e4:	4093      	lsls	r3, r2
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ec:	4935      	ldr	r1, [pc, #212]	; (80044c4 <HAL_GPIO_Init+0x310>)
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	3302      	adds	r3, #2
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043fa:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <HAL_GPIO_Init+0x334>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	43db      	mvns	r3, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4013      	ands	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800441e:	4a32      	ldr	r2, [pc, #200]	; (80044e8 <HAL_GPIO_Init+0x334>)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004424:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <HAL_GPIO_Init+0x334>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004448:	4a27      	ldr	r2, [pc, #156]	; (80044e8 <HAL_GPIO_Init+0x334>)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <HAL_GPIO_Init+0x334>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	43db      	mvns	r3, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4013      	ands	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004472:	4a1d      	ldr	r2, [pc, #116]	; (80044e8 <HAL_GPIO_Init+0x334>)
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004478:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <HAL_GPIO_Init+0x334>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	43db      	mvns	r3, r3
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	4013      	ands	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800449c:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <HAL_GPIO_Init+0x334>)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	3301      	adds	r3, #1
 80044a6:	61fb      	str	r3, [r7, #28]
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b0f      	cmp	r3, #15
 80044ac:	f67f ae90 	bls.w	80041d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	3724      	adds	r7, #36	; 0x24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40013800 	.word	0x40013800
 80044c8:	40020000 	.word	0x40020000
 80044cc:	40020400 	.word	0x40020400
 80044d0:	40020800 	.word	0x40020800
 80044d4:	40020c00 	.word	0x40020c00
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40021400 	.word	0x40021400
 80044e0:	40021800 	.word	0x40021800
 80044e4:	40021c00 	.word	0x40021c00
 80044e8:	40013c00 	.word	0x40013c00

080044ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	807b      	strh	r3, [r7, #2]
 80044f8:	4613      	mov	r3, r2
 80044fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044fc:	787b      	ldrb	r3, [r7, #1]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004508:	e003      	b.n	8004512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800450a:	887b      	ldrh	r3, [r7, #2]
 800450c:	041a      	lsls	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	619a      	str	r2, [r3, #24]
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e264      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d075      	beq.n	800462a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800453e:	4ba3      	ldr	r3, [pc, #652]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b04      	cmp	r3, #4
 8004548:	d00c      	beq.n	8004564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454a:	4ba0      	ldr	r3, [pc, #640]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004552:	2b08      	cmp	r3, #8
 8004554:	d112      	bne.n	800457c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004556:	4b9d      	ldr	r3, [pc, #628]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004562:	d10b      	bne.n	800457c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004564:	4b99      	ldr	r3, [pc, #612]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d05b      	beq.n	8004628 <HAL_RCC_OscConfig+0x108>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d157      	bne.n	8004628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e23f      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004584:	d106      	bne.n	8004594 <HAL_RCC_OscConfig+0x74>
 8004586:	4b91      	ldr	r3, [pc, #580]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a90      	ldr	r2, [pc, #576]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 800458c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	e01d      	b.n	80045d0 <HAL_RCC_OscConfig+0xb0>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800459c:	d10c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x98>
 800459e:	4b8b      	ldr	r3, [pc, #556]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a8a      	ldr	r2, [pc, #552]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	4b88      	ldr	r3, [pc, #544]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a87      	ldr	r2, [pc, #540]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b4:	6013      	str	r3, [r2, #0]
 80045b6:	e00b      	b.n	80045d0 <HAL_RCC_OscConfig+0xb0>
 80045b8:	4b84      	ldr	r3, [pc, #528]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a83      	ldr	r2, [pc, #524]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80045be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	4b81      	ldr	r3, [pc, #516]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a80      	ldr	r2, [pc, #512]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80045ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d013      	beq.n	8004600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d8:	f7ff f8d8 	bl	800378c <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e0:	f7ff f8d4 	bl	800378c <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b64      	cmp	r3, #100	; 0x64
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e204      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f2:	4b76      	ldr	r3, [pc, #472]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0xc0>
 80045fe:	e014      	b.n	800462a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7ff f8c4 	bl	800378c <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004608:	f7ff f8c0 	bl	800378c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b64      	cmp	r3, #100	; 0x64
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e1f0      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461a:	4b6c      	ldr	r3, [pc, #432]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0xe8>
 8004626:	e000      	b.n	800462a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d063      	beq.n	80046fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004636:	4b65      	ldr	r3, [pc, #404]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004642:	4b62      	ldr	r3, [pc, #392]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800464a:	2b08      	cmp	r3, #8
 800464c:	d11c      	bne.n	8004688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800464e:	4b5f      	ldr	r3, [pc, #380]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d116      	bne.n	8004688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465a:	4b5c      	ldr	r3, [pc, #368]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_RCC_OscConfig+0x152>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d001      	beq.n	8004672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e1c4      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004672:	4b56      	ldr	r3, [pc, #344]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4952      	ldr	r1, [pc, #328]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004682:	4313      	orrs	r3, r2
 8004684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004686:	e03a      	b.n	80046fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d020      	beq.n	80046d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004690:	4b4f      	ldr	r3, [pc, #316]	; (80047d0 <HAL_RCC_OscConfig+0x2b0>)
 8004692:	2201      	movs	r2, #1
 8004694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7ff f879 	bl	800378c <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800469e:	f7ff f875 	bl	800378c <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e1a5      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b0:	4b46      	ldr	r3, [pc, #280]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0f0      	beq.n	800469e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046bc:	4b43      	ldr	r3, [pc, #268]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4940      	ldr	r1, [pc, #256]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	600b      	str	r3, [r1, #0]
 80046d0:	e015      	b.n	80046fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046d2:	4b3f      	ldr	r3, [pc, #252]	; (80047d0 <HAL_RCC_OscConfig+0x2b0>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7ff f858 	bl	800378c <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e0:	f7ff f854 	bl	800378c <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e184      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f2:	4b36      	ldr	r3, [pc, #216]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d030      	beq.n	800476c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d016      	beq.n	8004740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004712:	4b30      	ldr	r3, [pc, #192]	; (80047d4 <HAL_RCC_OscConfig+0x2b4>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7ff f838 	bl	800378c <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004720:	f7ff f834 	bl	800378c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e164      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004732:	4b26      	ldr	r3, [pc, #152]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0x200>
 800473e:	e015      	b.n	800476c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004740:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <HAL_RCC_OscConfig+0x2b4>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004746:	f7ff f821 	bl	800378c <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800474e:	f7ff f81d 	bl	800378c <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e14d      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004760:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f0      	bne.n	800474e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80a0 	beq.w	80048ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a0e      	ldr	r2, [pc, #56]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <HAL_RCC_OscConfig+0x2ac>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCC_OscConfig+0x2b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d121      	bne.n	80047fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <HAL_RCC_OscConfig+0x2b8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a07      	ldr	r2, [pc, #28]	; (80047d8 <HAL_RCC_OscConfig+0x2b8>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c2:	f7fe ffe3 	bl	800378c <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	e011      	b.n	80047ee <HAL_RCC_OscConfig+0x2ce>
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800
 80047d0:	42470000 	.word	0x42470000
 80047d4:	42470e80 	.word	0x42470e80
 80047d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047dc:	f7fe ffd6 	bl	800378c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e106      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ee:	4b85      	ldr	r3, [pc, #532]	; (8004a04 <HAL_RCC_OscConfig+0x4e4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d106      	bne.n	8004810 <HAL_RCC_OscConfig+0x2f0>
 8004802:	4b81      	ldr	r3, [pc, #516]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a80      	ldr	r2, [pc, #512]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	e01c      	b.n	800484a <HAL_RCC_OscConfig+0x32a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b05      	cmp	r3, #5
 8004816:	d10c      	bne.n	8004832 <HAL_RCC_OscConfig+0x312>
 8004818:	4b7b      	ldr	r3, [pc, #492]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 800481a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481c:	4a7a      	ldr	r2, [pc, #488]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 800481e:	f043 0304 	orr.w	r3, r3, #4
 8004822:	6713      	str	r3, [r2, #112]	; 0x70
 8004824:	4b78      	ldr	r3, [pc, #480]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	4a77      	ldr	r2, [pc, #476]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6713      	str	r3, [r2, #112]	; 0x70
 8004830:	e00b      	b.n	800484a <HAL_RCC_OscConfig+0x32a>
 8004832:	4b75      	ldr	r3, [pc, #468]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004836:	4a74      	ldr	r2, [pc, #464]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	6713      	str	r3, [r2, #112]	; 0x70
 800483e:	4b72      	ldr	r3, [pc, #456]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	4a71      	ldr	r2, [pc, #452]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 8004844:	f023 0304 	bic.w	r3, r3, #4
 8004848:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d015      	beq.n	800487e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004852:	f7fe ff9b 	bl	800378c <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004858:	e00a      	b.n	8004870 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7fe ff97 	bl	800378c <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	; 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e0c5      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004870:	4b65      	ldr	r3, [pc, #404]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ee      	beq.n	800485a <HAL_RCC_OscConfig+0x33a>
 800487c:	e014      	b.n	80048a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800487e:	f7fe ff85 	bl	800378c <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004884:	e00a      	b.n	800489c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004886:	f7fe ff81 	bl	800378c <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	f241 3288 	movw	r2, #5000	; 0x1388
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0af      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489c:	4b5a      	ldr	r3, [pc, #360]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1ee      	bne.n	8004886 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d105      	bne.n	80048ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ae:	4b56      	ldr	r3, [pc, #344]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a55      	ldr	r2, [pc, #340]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 80048b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 809b 	beq.w	80049fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048c4:	4b50      	ldr	r3, [pc, #320]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d05c      	beq.n	800498a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d141      	bne.n	800495c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d8:	4b4c      	ldr	r3, [pc, #304]	; (8004a0c <HAL_RCC_OscConfig+0x4ec>)
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048de:	f7fe ff55 	bl	800378c <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e6:	f7fe ff51 	bl	800378c <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e081      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f8:	4b43      	ldr	r3, [pc, #268]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f0      	bne.n	80048e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	019b      	lsls	r3, r3, #6
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	3b01      	subs	r3, #1
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	061b      	lsls	r3, r3, #24
 8004928:	4937      	ldr	r1, [pc, #220]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 800492a:	4313      	orrs	r3, r2
 800492c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800492e:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <HAL_RCC_OscConfig+0x4ec>)
 8004930:	2201      	movs	r2, #1
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fe ff2a 	bl	800378c <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493c:	f7fe ff26 	bl	800378c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e056      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494e:	4b2e      	ldr	r3, [pc, #184]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x41c>
 800495a:	e04e      	b.n	80049fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495c:	4b2b      	ldr	r3, [pc, #172]	; (8004a0c <HAL_RCC_OscConfig+0x4ec>)
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004962:	f7fe ff13 	bl	800378c <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496a:	f7fe ff0f 	bl	800378c <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e03f      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497c:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f0      	bne.n	800496a <HAL_RCC_OscConfig+0x44a>
 8004988:	e037      	b.n	80049fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e032      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004996:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <HAL_RCC_OscConfig+0x4e8>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d028      	beq.n	80049f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d121      	bne.n	80049f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d11a      	bne.n	80049f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049c6:	4013      	ands	r3, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d111      	bne.n	80049f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	3b01      	subs	r3, #1
 80049e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d107      	bne.n	80049f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d001      	beq.n	80049fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40007000 	.word	0x40007000
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	42470060 	.word	0x42470060

08004a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0cc      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a24:	4b68      	ldr	r3, [pc, #416]	; (8004bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d90c      	bls.n	8004a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a32:	4b65      	ldr	r3, [pc, #404]	; (8004bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3a:	4b63      	ldr	r3, [pc, #396]	; (8004bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d001      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e0b8      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d020      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a64:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	4a58      	ldr	r2, [pc, #352]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a7c:	4b53      	ldr	r3, [pc, #332]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4a52      	ldr	r2, [pc, #328]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a88:	4b50      	ldr	r3, [pc, #320]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	494d      	ldr	r1, [pc, #308]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d044      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d107      	bne.n	8004abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aae:	4b47      	ldr	r3, [pc, #284]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d119      	bne.n	8004aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e07f      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d003      	beq.n	8004ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d107      	bne.n	8004ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ace:	4b3f      	ldr	r3, [pc, #252]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e06f      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ade:	4b3b      	ldr	r3, [pc, #236]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e067      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aee:	4b37      	ldr	r3, [pc, #220]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f023 0203 	bic.w	r2, r3, #3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4934      	ldr	r1, [pc, #208]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b00:	f7fe fe44 	bl	800378c <HAL_GetTick>
 8004b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b06:	e00a      	b.n	8004b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b08:	f7fe fe40 	bl	800378c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e04f      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1e:	4b2b      	ldr	r3, [pc, #172]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 020c 	and.w	r2, r3, #12
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d1eb      	bne.n	8004b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b30:	4b25      	ldr	r3, [pc, #148]	; (8004bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d20c      	bcs.n	8004b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3e:	4b22      	ldr	r3, [pc, #136]	; (8004bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e032      	b.n	8004bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4916      	ldr	r1, [pc, #88]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	490e      	ldr	r1, [pc, #56]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b96:	f000 f821 	bl	8004bdc <HAL_RCC_GetSysClockFreq>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	490a      	ldr	r1, [pc, #40]	; (8004bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba8:	5ccb      	ldrb	r3, [r1, r3]
 8004baa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bae:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bb2:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fe fb8e 	bl	80032d8 <HAL_InitTick>

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40023c00 	.word	0x40023c00
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	0800e3c8 	.word	0x0800e3c8
 8004bd4:	20000010 	.word	0x20000010
 8004bd8:	20000014 	.word	0x20000014

08004bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bdc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	607b      	str	r3, [r7, #4]
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	2300      	movs	r3, #0
 8004bee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bf4:	4b67      	ldr	r3, [pc, #412]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 030c 	and.w	r3, r3, #12
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d00d      	beq.n	8004c1c <HAL_RCC_GetSysClockFreq+0x40>
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	f200 80bd 	bhi.w	8004d80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x34>
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c0e:	e0b7      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c10:	4b61      	ldr	r3, [pc, #388]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c12:	60bb      	str	r3, [r7, #8]
       break;
 8004c14:	e0b7      	b.n	8004d86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c16:	4b61      	ldr	r3, [pc, #388]	; (8004d9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004c18:	60bb      	str	r3, [r7, #8]
      break;
 8004c1a:	e0b4      	b.n	8004d86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c1c:	4b5d      	ldr	r3, [pc, #372]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c26:	4b5b      	ldr	r3, [pc, #364]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d04d      	beq.n	8004cce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c32:	4b58      	ldr	r3, [pc, #352]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	099b      	lsrs	r3, r3, #6
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c42:	f04f 0100 	mov.w	r1, #0
 8004c46:	ea02 0800 	and.w	r8, r2, r0
 8004c4a:	ea03 0901 	and.w	r9, r3, r1
 8004c4e:	4640      	mov	r0, r8
 8004c50:	4649      	mov	r1, r9
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	014b      	lsls	r3, r1, #5
 8004c5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c60:	0142      	lsls	r2, r0, #5
 8004c62:	4610      	mov	r0, r2
 8004c64:	4619      	mov	r1, r3
 8004c66:	ebb0 0008 	subs.w	r0, r0, r8
 8004c6a:	eb61 0109 	sbc.w	r1, r1, r9
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	018b      	lsls	r3, r1, #6
 8004c78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c7c:	0182      	lsls	r2, r0, #6
 8004c7e:	1a12      	subs	r2, r2, r0
 8004c80:	eb63 0301 	sbc.w	r3, r3, r1
 8004c84:	f04f 0000 	mov.w	r0, #0
 8004c88:	f04f 0100 	mov.w	r1, #0
 8004c8c:	00d9      	lsls	r1, r3, #3
 8004c8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c92:	00d0      	lsls	r0, r2, #3
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	eb12 0208 	adds.w	r2, r2, r8
 8004c9c:	eb43 0309 	adc.w	r3, r3, r9
 8004ca0:	f04f 0000 	mov.w	r0, #0
 8004ca4:	f04f 0100 	mov.w	r1, #0
 8004ca8:	0259      	lsls	r1, r3, #9
 8004caa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004cae:	0250      	lsls	r0, r2, #9
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	f7fb fff2 	bl	8000ca8 <__aeabi_uldivmod>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4613      	mov	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	e04a      	b.n	8004d64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cce:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	099b      	lsrs	r3, r3, #6
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cde:	f04f 0100 	mov.w	r1, #0
 8004ce2:	ea02 0400 	and.w	r4, r2, r0
 8004ce6:	ea03 0501 	and.w	r5, r3, r1
 8004cea:	4620      	mov	r0, r4
 8004cec:	4629      	mov	r1, r5
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	014b      	lsls	r3, r1, #5
 8004cf8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cfc:	0142      	lsls	r2, r0, #5
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	1b00      	subs	r0, r0, r4
 8004d04:	eb61 0105 	sbc.w	r1, r1, r5
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	018b      	lsls	r3, r1, #6
 8004d12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d16:	0182      	lsls	r2, r0, #6
 8004d18:	1a12      	subs	r2, r2, r0
 8004d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d1e:	f04f 0000 	mov.w	r0, #0
 8004d22:	f04f 0100 	mov.w	r1, #0
 8004d26:	00d9      	lsls	r1, r3, #3
 8004d28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d2c:	00d0      	lsls	r0, r2, #3
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	1912      	adds	r2, r2, r4
 8004d34:	eb45 0303 	adc.w	r3, r5, r3
 8004d38:	f04f 0000 	mov.w	r0, #0
 8004d3c:	f04f 0100 	mov.w	r1, #0
 8004d40:	0299      	lsls	r1, r3, #10
 8004d42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d46:	0290      	lsls	r0, r2, #10
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	461a      	mov	r2, r3
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	f7fb ffa6 	bl	8000ca8 <__aeabi_uldivmod>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4613      	mov	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	0c1b      	lsrs	r3, r3, #16
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	3301      	adds	r3, #1
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	60bb      	str	r3, [r7, #8]
      break;
 8004d7e:	e002      	b.n	8004d86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d82:	60bb      	str	r3, [r7, #8]
      break;
 8004d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d86:	68bb      	ldr	r3, [r7, #8]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d92:	bf00      	nop
 8004d94:	40023800 	.word	0x40023800
 8004d98:	00f42400 	.word	0x00f42400
 8004d9c:	007a1200 	.word	0x007a1200

08004da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da4:	4b03      	ldr	r3, [pc, #12]	; (8004db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004da6:	681b      	ldr	r3, [r3, #0]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000010 	.word	0x20000010

08004db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dbc:	f7ff fff0 	bl	8004da0 <HAL_RCC_GetHCLKFreq>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	0a9b      	lsrs	r3, r3, #10
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	4903      	ldr	r1, [pc, #12]	; (8004ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dce:	5ccb      	ldrb	r3, [r1, r3]
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	0800e3d8 	.word	0x0800e3d8

08004de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004de4:	f7ff ffdc 	bl	8004da0 <HAL_RCC_GetHCLKFreq>
 8004de8:	4602      	mov	r2, r0
 8004dea:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	0b5b      	lsrs	r3, r3, #13
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	4903      	ldr	r1, [pc, #12]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004df6:	5ccb      	ldrb	r3, [r1, r3]
 8004df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40023800 	.word	0x40023800
 8004e04:	0800e3d8 	.word	0x0800e3d8

08004e08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	220f      	movs	r2, #15
 8004e16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e18:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_RCC_GetClockConfig+0x5c>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 0203 	and.w	r2, r3, #3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <HAL_RCC_GetClockConfig+0x5c>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <HAL_RCC_GetClockConfig+0x5c>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e3c:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <HAL_RCC_GetClockConfig+0x5c>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	08db      	lsrs	r3, r3, #3
 8004e42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e4a:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <HAL_RCC_GetClockConfig+0x60>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0207 	and.w	r2, r3, #7
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	601a      	str	r2, [r3, #0]
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40023800 	.word	0x40023800
 8004e68:	40023c00 	.word	0x40023c00

08004e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e041      	b.n	8004f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fe f838 	bl	8002f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f000 fcee 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d001      	beq.n	8004f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e04e      	b.n	8004fc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a23      	ldr	r2, [pc, #140]	; (8004fd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d022      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4e:	d01d      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d018      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1c      	ldr	r2, [pc, #112]	; (8004fdc <HAL_TIM_Base_Start_IT+0xd0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00e      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d009      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_TIM_Base_Start_IT+0x80>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d111      	bne.n	8004fb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b06      	cmp	r3, #6
 8004f9c:	d010      	beq.n	8004fc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0201 	orr.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fae:	e007      	b.n	8004fc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40010400 	.word	0x40010400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40001800 	.word	0x40001800

08004fec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e041      	b.n	8005082 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f839 	bl	800508a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f000 fc2e 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <HAL_TIM_IC_Start_IT+0x1e>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	e013      	b.n	80050e6 <HAL_TIM_IC_Start_IT+0x46>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_IC_Start_IT+0x2e>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	e00b      	b.n	80050e6 <HAL_TIM_IC_Start_IT+0x46>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d104      	bne.n	80050de <HAL_TIM_IC_Start_IT+0x3e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	e003      	b.n	80050e6 <HAL_TIM_IC_Start_IT+0x46>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d104      	bne.n	80050f8 <HAL_TIM_IC_Start_IT+0x58>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	e013      	b.n	8005120 <HAL_TIM_IC_Start_IT+0x80>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d104      	bne.n	8005108 <HAL_TIM_IC_Start_IT+0x68>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005104:	b2db      	uxtb	r3, r3
 8005106:	e00b      	b.n	8005120 <HAL_TIM_IC_Start_IT+0x80>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b08      	cmp	r3, #8
 800510c:	d104      	bne.n	8005118 <HAL_TIM_IC_Start_IT+0x78>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e003      	b.n	8005120 <HAL_TIM_IC_Start_IT+0x80>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800511e:	b2db      	uxtb	r3, r3
 8005120:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005122:	7bbb      	ldrb	r3, [r7, #14]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d102      	bne.n	800512e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005128:	7b7b      	ldrb	r3, [r7, #13]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d001      	beq.n	8005132 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e0cc      	b.n	80052cc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d104      	bne.n	8005142 <HAL_TIM_IC_Start_IT+0xa2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005140:	e013      	b.n	800516a <HAL_TIM_IC_Start_IT+0xca>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b04      	cmp	r3, #4
 8005146:	d104      	bne.n	8005152 <HAL_TIM_IC_Start_IT+0xb2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005150:	e00b      	b.n	800516a <HAL_TIM_IC_Start_IT+0xca>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d104      	bne.n	8005162 <HAL_TIM_IC_Start_IT+0xc2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005160:	e003      	b.n	800516a <HAL_TIM_IC_Start_IT+0xca>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <HAL_TIM_IC_Start_IT+0xda>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005178:	e013      	b.n	80051a2 <HAL_TIM_IC_Start_IT+0x102>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b04      	cmp	r3, #4
 800517e:	d104      	bne.n	800518a <HAL_TIM_IC_Start_IT+0xea>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005188:	e00b      	b.n	80051a2 <HAL_TIM_IC_Start_IT+0x102>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d104      	bne.n	800519a <HAL_TIM_IC_Start_IT+0xfa>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005198:	e003      	b.n	80051a2 <HAL_TIM_IC_Start_IT+0x102>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b0c      	cmp	r3, #12
 80051a6:	d841      	bhi.n	800522c <HAL_TIM_IC_Start_IT+0x18c>
 80051a8:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <HAL_TIM_IC_Start_IT+0x110>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	080051e5 	.word	0x080051e5
 80051b4:	0800522d 	.word	0x0800522d
 80051b8:	0800522d 	.word	0x0800522d
 80051bc:	0800522d 	.word	0x0800522d
 80051c0:	080051f7 	.word	0x080051f7
 80051c4:	0800522d 	.word	0x0800522d
 80051c8:	0800522d 	.word	0x0800522d
 80051cc:	0800522d 	.word	0x0800522d
 80051d0:	08005209 	.word	0x08005209
 80051d4:	0800522d 	.word	0x0800522d
 80051d8:	0800522d 	.word	0x0800522d
 80051dc:	0800522d 	.word	0x0800522d
 80051e0:	0800521b 	.word	0x0800521b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0202 	orr.w	r2, r2, #2
 80051f2:	60da      	str	r2, [r3, #12]
      break;
 80051f4:	e01d      	b.n	8005232 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0204 	orr.w	r2, r2, #4
 8005204:	60da      	str	r2, [r3, #12]
      break;
 8005206:	e014      	b.n	8005232 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0208 	orr.w	r2, r2, #8
 8005216:	60da      	str	r2, [r3, #12]
      break;
 8005218:	e00b      	b.n	8005232 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0210 	orr.w	r2, r2, #16
 8005228:	60da      	str	r2, [r3, #12]
      break;
 800522a:	e002      	b.n	8005232 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
      break;
 8005230:	bf00      	nop
  }

  if (status == HAL_OK)
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d148      	bne.n	80052ca <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2201      	movs	r2, #1
 800523e:	6839      	ldr	r1, [r7, #0]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fd87 	bl	8005d54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a22      	ldr	r2, [pc, #136]	; (80052d4 <HAL_TIM_IC_Start_IT+0x234>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d022      	beq.n	8005296 <HAL_TIM_IC_Start_IT+0x1f6>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005258:	d01d      	beq.n	8005296 <HAL_TIM_IC_Start_IT+0x1f6>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a1e      	ldr	r2, [pc, #120]	; (80052d8 <HAL_TIM_IC_Start_IT+0x238>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d018      	beq.n	8005296 <HAL_TIM_IC_Start_IT+0x1f6>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <HAL_TIM_IC_Start_IT+0x23c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <HAL_TIM_IC_Start_IT+0x1f6>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <HAL_TIM_IC_Start_IT+0x240>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00e      	beq.n	8005296 <HAL_TIM_IC_Start_IT+0x1f6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <HAL_TIM_IC_Start_IT+0x244>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d009      	beq.n	8005296 <HAL_TIM_IC_Start_IT+0x1f6>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_TIM_IC_Start_IT+0x248>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d004      	beq.n	8005296 <HAL_TIM_IC_Start_IT+0x1f6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a16      	ldr	r2, [pc, #88]	; (80052ec <HAL_TIM_IC_Start_IT+0x24c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d111      	bne.n	80052ba <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b06      	cmp	r3, #6
 80052a6:	d010      	beq.n	80052ca <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b8:	e007      	b.n	80052ca <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40010000 	.word	0x40010000
 80052d8:	40000400 	.word	0x40000400
 80052dc:	40000800 	.word	0x40000800
 80052e0:	40000c00 	.word	0x40000c00
 80052e4:	40010400 	.word	0x40010400
 80052e8:	40014000 	.word	0x40014000
 80052ec:	40001800 	.word	0x40001800

080052f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b02      	cmp	r3, #2
 8005304:	d122      	bne.n	800534c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b02      	cmp	r3, #2
 8005312:	d11b      	bne.n	800534c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0202 	mvn.w	r2, #2
 800531c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fc f830 	bl	8001398 <HAL_TIM_IC_CaptureCallback>
 8005338:	e005      	b.n	8005346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fa88 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fa8f 	bl	8005864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b04      	cmp	r3, #4
 8005358:	d122      	bne.n	80053a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b04      	cmp	r3, #4
 8005366:	d11b      	bne.n	80053a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0204 	mvn.w	r2, #4
 8005370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fc f806 	bl	8001398 <HAL_TIM_IC_CaptureCallback>
 800538c:	e005      	b.n	800539a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa5e 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fa65 	bl	8005864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d122      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d11b      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0208 	mvn.w	r2, #8
 80053c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2204      	movs	r2, #4
 80053ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fb ffdc 	bl	8001398 <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa34 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fa3b 	bl	8005864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b10      	cmp	r3, #16
 8005400:	d122      	bne.n	8005448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b10      	cmp	r3, #16
 800540e:	d11b      	bne.n	8005448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0210 	mvn.w	r2, #16
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2208      	movs	r2, #8
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fb ffb2 	bl	8001398 <HAL_TIM_IC_CaptureCallback>
 8005434:	e005      	b.n	8005442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fa0a 	bl	8005850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fa11 	bl	8005864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b01      	cmp	r3, #1
 8005454:	d10e      	bne.n	8005474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b01      	cmp	r3, #1
 8005462:	d107      	bne.n	8005474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0201 	mvn.w	r2, #1
 800546c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fd fd06 	bl	8002e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547e:	2b80      	cmp	r3, #128	; 0x80
 8005480:	d10e      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548c:	2b80      	cmp	r3, #128	; 0x80
 800548e:	d107      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fd06 	bl	8005eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d10e      	bne.n	80054cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d107      	bne.n	80054cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f9d6 	bl	8005878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d10e      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d107      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0220 	mvn.w	r2, #32
 80054f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fcd0 	bl	8005e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_TIM_IC_ConfigChannel+0x1e>
 800551a:	2302      	movs	r3, #2
 800551c:	e088      	b.n	8005630 <HAL_TIM_IC_ConfigChannel+0x130>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d11b      	bne.n	8005564 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	6819      	ldr	r1, [r3, #0]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f000 fa46 	bl	80059cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 020c 	bic.w	r2, r2, #12
 800554e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6999      	ldr	r1, [r3, #24]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	619a      	str	r2, [r3, #24]
 8005562:	e060      	b.n	8005626 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b04      	cmp	r3, #4
 8005568:	d11c      	bne.n	80055a4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	6819      	ldr	r1, [r3, #0]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f000 faca 	bl	8005b12 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699a      	ldr	r2, [r3, #24]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800558c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6999      	ldr	r1, [r3, #24]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	021a      	lsls	r2, r3, #8
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	619a      	str	r2, [r3, #24]
 80055a2:	e040      	b.n	8005626 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d11b      	bne.n	80055e2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	6819      	ldr	r1, [r3, #0]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f000 fb17 	bl	8005bec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 020c 	bic.w	r2, r2, #12
 80055cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	69d9      	ldr	r1, [r3, #28]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	61da      	str	r2, [r3, #28]
 80055e0:	e021      	b.n	8005626 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b0c      	cmp	r3, #12
 80055e6:	d11c      	bne.n	8005622 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f000 fb34 	bl	8005c64 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69da      	ldr	r2, [r3, #28]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800560a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69d9      	ldr	r1, [r3, #28]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	021a      	lsls	r2, r3, #8
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	61da      	str	r2, [r3, #28]
 8005620:	e001      	b.n	8005626 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800562e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIM_ConfigClockSource+0x1c>
 8005650:	2302      	movs	r3, #2
 8005652:	e0b4      	b.n	80057be <HAL_TIM_ConfigClockSource+0x186>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568c:	d03e      	beq.n	800570c <HAL_TIM_ConfigClockSource+0xd4>
 800568e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005692:	f200 8087 	bhi.w	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 8005696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569a:	f000 8086 	beq.w	80057aa <HAL_TIM_ConfigClockSource+0x172>
 800569e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a2:	d87f      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056a4:	2b70      	cmp	r3, #112	; 0x70
 80056a6:	d01a      	beq.n	80056de <HAL_TIM_ConfigClockSource+0xa6>
 80056a8:	2b70      	cmp	r3, #112	; 0x70
 80056aa:	d87b      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056ac:	2b60      	cmp	r3, #96	; 0x60
 80056ae:	d050      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x11a>
 80056b0:	2b60      	cmp	r3, #96	; 0x60
 80056b2:	d877      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056b4:	2b50      	cmp	r3, #80	; 0x50
 80056b6:	d03c      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0xfa>
 80056b8:	2b50      	cmp	r3, #80	; 0x50
 80056ba:	d873      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056bc:	2b40      	cmp	r3, #64	; 0x40
 80056be:	d058      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0x13a>
 80056c0:	2b40      	cmp	r3, #64	; 0x40
 80056c2:	d86f      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056c4:	2b30      	cmp	r3, #48	; 0x30
 80056c6:	d064      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x15a>
 80056c8:	2b30      	cmp	r3, #48	; 0x30
 80056ca:	d86b      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d060      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x15a>
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	d867      	bhi.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d05c      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x15a>
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d05a      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x15a>
 80056dc:	e062      	b.n	80057a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6899      	ldr	r1, [r3, #8]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f000 fb11 	bl	8005d14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005700:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	609a      	str	r2, [r3, #8]
      break;
 800570a:	e04f      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	6899      	ldr	r1, [r3, #8]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f000 fafa 	bl	8005d14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800572e:	609a      	str	r2, [r3, #8]
      break;
 8005730:	e03c      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6818      	ldr	r0, [r3, #0]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	6859      	ldr	r1, [r3, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	461a      	mov	r2, r3
 8005740:	f000 f9b8 	bl	8005ab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2150      	movs	r1, #80	; 0x50
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fac7 	bl	8005cde <TIM_ITRx_SetConfig>
      break;
 8005750:	e02c      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6859      	ldr	r1, [r3, #4]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	461a      	mov	r2, r3
 8005760:	f000 fa14 	bl	8005b8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2160      	movs	r1, #96	; 0x60
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fab7 	bl	8005cde <TIM_ITRx_SetConfig>
      break;
 8005770:	e01c      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6859      	ldr	r1, [r3, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	461a      	mov	r2, r3
 8005780:	f000 f998 	bl	8005ab4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2140      	movs	r1, #64	; 0x40
 800578a:	4618      	mov	r0, r3
 800578c:	f000 faa7 	bl	8005cde <TIM_ITRx_SetConfig>
      break;
 8005790:	e00c      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4619      	mov	r1, r3
 800579c:	4610      	mov	r0, r2
 800579e:	f000 fa9e 	bl	8005cde <TIM_ITRx_SetConfig>
      break;
 80057a2:	e003      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
      break;
 80057a8:	e000      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b0c      	cmp	r3, #12
 80057da:	d831      	bhi.n	8005840 <HAL_TIM_ReadCapturedValue+0x78>
 80057dc:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	08005819 	.word	0x08005819
 80057e8:	08005841 	.word	0x08005841
 80057ec:	08005841 	.word	0x08005841
 80057f0:	08005841 	.word	0x08005841
 80057f4:	08005823 	.word	0x08005823
 80057f8:	08005841 	.word	0x08005841
 80057fc:	08005841 	.word	0x08005841
 8005800:	08005841 	.word	0x08005841
 8005804:	0800582d 	.word	0x0800582d
 8005808:	08005841 	.word	0x08005841
 800580c:	08005841 	.word	0x08005841
 8005810:	08005841 	.word	0x08005841
 8005814:	08005837 	.word	0x08005837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581e:	60fb      	str	r3, [r7, #12]

      break;
 8005820:	e00f      	b.n	8005842 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005828:	60fb      	str	r3, [r7, #12]

      break;
 800582a:	e00a      	b.n	8005842 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	60fb      	str	r3, [r7, #12]

      break;
 8005834:	e005      	b.n	8005842 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	60fb      	str	r3, [r7, #12]

      break;
 800583e:	e000      	b.n	8005842 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005840:	bf00      	nop
  }

  return tmpreg;
 8005842:	68fb      	ldr	r3, [r7, #12]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a40      	ldr	r2, [pc, #256]	; (80059a0 <TIM_Base_SetConfig+0x114>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d013      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058aa:	d00f      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a3d      	ldr	r2, [pc, #244]	; (80059a4 <TIM_Base_SetConfig+0x118>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d00b      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a3c      	ldr	r2, [pc, #240]	; (80059a8 <TIM_Base_SetConfig+0x11c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d007      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a3b      	ldr	r2, [pc, #236]	; (80059ac <TIM_Base_SetConfig+0x120>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_Base_SetConfig+0x40>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a3a      	ldr	r2, [pc, #232]	; (80059b0 <TIM_Base_SetConfig+0x124>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d108      	bne.n	80058de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2f      	ldr	r2, [pc, #188]	; (80059a0 <TIM_Base_SetConfig+0x114>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d02b      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ec:	d027      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2c      	ldr	r2, [pc, #176]	; (80059a4 <TIM_Base_SetConfig+0x118>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d023      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2b      	ldr	r2, [pc, #172]	; (80059a8 <TIM_Base_SetConfig+0x11c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01f      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2a      	ldr	r2, [pc, #168]	; (80059ac <TIM_Base_SetConfig+0x120>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01b      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a29      	ldr	r2, [pc, #164]	; (80059b0 <TIM_Base_SetConfig+0x124>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d017      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a28      	ldr	r2, [pc, #160]	; (80059b4 <TIM_Base_SetConfig+0x128>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a27      	ldr	r2, [pc, #156]	; (80059b8 <TIM_Base_SetConfig+0x12c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00f      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a26      	ldr	r2, [pc, #152]	; (80059bc <TIM_Base_SetConfig+0x130>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00b      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a25      	ldr	r2, [pc, #148]	; (80059c0 <TIM_Base_SetConfig+0x134>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d007      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a24      	ldr	r2, [pc, #144]	; (80059c4 <TIM_Base_SetConfig+0x138>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_Base_SetConfig+0xb2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a23      	ldr	r2, [pc, #140]	; (80059c8 <TIM_Base_SetConfig+0x13c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d108      	bne.n	8005950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a0a      	ldr	r2, [pc, #40]	; (80059a0 <TIM_Base_SetConfig+0x114>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0xf8>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a0c      	ldr	r2, [pc, #48]	; (80059b0 <TIM_Base_SetConfig+0x124>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d103      	bne.n	800598c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	615a      	str	r2, [r3, #20]
}
 8005992:	bf00      	nop
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40010400 	.word	0x40010400
 80059b4:	40014000 	.word	0x40014000
 80059b8:	40014400 	.word	0x40014400
 80059bc:	40014800 	.word	0x40014800
 80059c0:	40001800 	.word	0x40001800
 80059c4:	40001c00 	.word	0x40001c00
 80059c8:	40002000 	.word	0x40002000

080059cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0201 	bic.w	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4a28      	ldr	r2, [pc, #160]	; (8005a98 <TIM_TI1_SetConfig+0xcc>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d01b      	beq.n	8005a32 <TIM_TI1_SetConfig+0x66>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a00:	d017      	beq.n	8005a32 <TIM_TI1_SetConfig+0x66>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <TIM_TI1_SetConfig+0xd0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d013      	beq.n	8005a32 <TIM_TI1_SetConfig+0x66>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4a24      	ldr	r2, [pc, #144]	; (8005aa0 <TIM_TI1_SetConfig+0xd4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00f      	beq.n	8005a32 <TIM_TI1_SetConfig+0x66>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4a23      	ldr	r2, [pc, #140]	; (8005aa4 <TIM_TI1_SetConfig+0xd8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00b      	beq.n	8005a32 <TIM_TI1_SetConfig+0x66>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a22      	ldr	r2, [pc, #136]	; (8005aa8 <TIM_TI1_SetConfig+0xdc>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d007      	beq.n	8005a32 <TIM_TI1_SetConfig+0x66>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4a21      	ldr	r2, [pc, #132]	; (8005aac <TIM_TI1_SetConfig+0xe0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d003      	beq.n	8005a32 <TIM_TI1_SetConfig+0x66>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4a20      	ldr	r2, [pc, #128]	; (8005ab0 <TIM_TI1_SetConfig+0xe4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d101      	bne.n	8005a36 <TIM_TI1_SetConfig+0x6a>
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <TIM_TI1_SetConfig+0x6c>
 8005a36:	2300      	movs	r3, #0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d008      	beq.n	8005a4e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e003      	b.n	8005a56 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f043 0301 	orr.w	r3, r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f023 030a 	bic.w	r3, r3, #10
 8005a70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f003 030a 	and.w	r3, r3, #10
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	621a      	str	r2, [r3, #32]
}
 8005a8a:	bf00      	nop
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40000400 	.word	0x40000400
 8005aa0:	40000800 	.word	0x40000800
 8005aa4:	40000c00 	.word	0x40000c00
 8005aa8:	40010400 	.word	0x40010400
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40001800 	.word	0x40001800

08005ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f023 0201 	bic.w	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 030a 	bic.w	r3, r3, #10
 8005af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b087      	sub	sp, #28
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f023 0210 	bic.w	r2, r3, #16
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	031b      	lsls	r3, r3, #12
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f023 0210 	bic.w	r2, r3, #16
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	031b      	lsls	r3, r3, #12
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	621a      	str	r2, [r3, #32]
}
 8005be0:	bf00      	nop
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f023 0303 	bic.w	r3, r3, #3
 8005c18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005c3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	621a      	str	r2, [r3, #32]
}
 8005c58:	bf00      	nop
 8005c5a:	371c      	adds	r7, #28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ca2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	031b      	lsls	r3, r3, #12
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005cb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	031b      	lsls	r3, r3, #12
 8005cbc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	621a      	str	r2, [r3, #32]
}
 8005cd2:	bf00      	nop
 8005cd4:	371c      	adds	r7, #28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f043 0307 	orr.w	r3, r3, #7
 8005d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	609a      	str	r2, [r3, #8]
}
 8005d08:	bf00      	nop
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	021a      	lsls	r2, r3, #8
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	609a      	str	r2, [r3, #8]
}
 8005d48:	bf00      	nop
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2201      	movs	r2, #1
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a1a      	ldr	r2, [r3, #32]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	43db      	mvns	r3, r3
 8005d76:	401a      	ands	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a1a      	ldr	r2, [r3, #32]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e05a      	b.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d022      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d01d      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1d      	ldr	r2, [pc, #116]	; (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d018      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1b      	ldr	r2, [pc, #108]	; (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00e      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d009      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d004      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d10c      	bne.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40000c00 	.word	0x40000c00
 8005e8c:	40010400 	.word	0x40010400
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40001800 	.word	0x40001800

08005e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e03f      	b.n	8005f52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fd f85e 	bl	8002fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2224      	movs	r2, #36	; 0x24
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 f82f 	bl	8006f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695a      	ldr	r2, [r3, #20]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08c      	sub	sp, #48	; 0x30
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d165      	bne.n	8006042 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_UART_Transmit_DMA+0x26>
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e05e      	b.n	8006044 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_UART_Transmit_DMA+0x38>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e057      	b.n	8006044 <HAL_UART_Transmit_DMA+0xe8>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	88fa      	ldrh	r2, [r7, #6]
 8005fa6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	88fa      	ldrh	r2, [r7, #6]
 8005fac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2221      	movs	r2, #33	; 0x21
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc0:	4a22      	ldr	r2, [pc, #136]	; (800604c <HAL_UART_Transmit_DMA+0xf0>)
 8005fc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc8:	4a21      	ldr	r2, [pc, #132]	; (8006050 <HAL_UART_Transmit_DMA+0xf4>)
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd0:	4a20      	ldr	r2, [pc, #128]	; (8006054 <HAL_UART_Transmit_DMA+0xf8>)
 8005fd2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd8:	2200      	movs	r2, #0
 8005fda:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005fdc:	f107 0308 	add.w	r3, r7, #8
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	6819      	ldr	r1, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	f7fd fd8a 	bl	8003b0c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006000:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3314      	adds	r3, #20
 8006010:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	617b      	str	r3, [r7, #20]
   return(result);
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800602a:	627a      	str	r2, [r7, #36]	; 0x24
 800602c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6a39      	ldr	r1, [r7, #32]
 8006030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	61fb      	str	r3, [r7, #28]
   return(result);
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e5      	bne.n	800600a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	e000      	b.n	8006044 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006042:	2302      	movs	r3, #2
  }
}
 8006044:	4618      	mov	r0, r3
 8006046:	3730      	adds	r7, #48	; 0x30
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	08006801 	.word	0x08006801
 8006050:	0800689b 	.word	0x0800689b
 8006054:	08006a13 	.word	0x08006a13

08006058 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b20      	cmp	r3, #32
 8006070:	d11d      	bne.n	80060ae <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_UART_Receive_DMA+0x26>
 8006078:	88fb      	ldrh	r3, [r7, #6]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e016      	b.n	80060b0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_UART_Receive_DMA+0x38>
 800608c:	2302      	movs	r3, #2
 800608e:	e00f      	b.n	80060b0 <HAL_UART_Receive_DMA+0x58>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	461a      	mov	r2, r3
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 fcff 	bl	8006aa8 <UART_Start_Receive_DMA>
 80060aa:	4603      	mov	r3, r0
 80060ac:	e000      	b.n	80060b0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80060ae:	2302      	movs	r3, #2
  }
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b090      	sub	sp, #64	; 0x40
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b80      	cmp	r3, #128	; 0x80
 80060d0:	bf0c      	ite	eq
 80060d2:	2301      	moveq	r3, #1
 80060d4:	2300      	movne	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b21      	cmp	r3, #33	; 0x21
 80060e4:	d128      	bne.n	8006138 <HAL_UART_DMAStop+0x80>
 80060e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d025      	beq.n	8006138 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3314      	adds	r3, #20
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	623b      	str	r3, [r7, #32]
   return(result);
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006102:	63bb      	str	r3, [r7, #56]	; 0x38
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3314      	adds	r3, #20
 800610a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800610c:	633a      	str	r2, [r7, #48]	; 0x30
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006114:	e841 2300 	strex	r3, r2, [r1]
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1e5      	bne.n	80060ec <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612c:	4618      	mov	r0, r3
 800612e:	f7fd fd45 	bl	8003bbc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fd56 	bl	8006be4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006142:	2b40      	cmp	r3, #64	; 0x40
 8006144:	bf0c      	ite	eq
 8006146:	2301      	moveq	r3, #1
 8006148:	2300      	movne	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b22      	cmp	r3, #34	; 0x22
 8006158:	d128      	bne.n	80061ac <HAL_UART_DMAStop+0xf4>
 800615a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d025      	beq.n	80061ac <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3314      	adds	r3, #20
 8006166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3314      	adds	r3, #20
 800617e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006180:	61fa      	str	r2, [r7, #28]
 8006182:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	69b9      	ldr	r1, [r7, #24]
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	617b      	str	r3, [r7, #20]
   return(result);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e5      	bne.n	8006160 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	2b00      	cmp	r3, #0
 800619a:	d004      	beq.n	80061a6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fd fd0b 	bl	8003bbc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fd44 	bl	8006c34 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3740      	adds	r7, #64	; 0x40
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b08c      	sub	sp, #48	; 0x30
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	4613      	mov	r3, r2
 80061c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d152      	bne.n	8006276 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e04b      	b.n	8006278 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e044      	b.n	8006278 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80061fc:	88fb      	ldrh	r3, [r7, #6]
 80061fe:	461a      	mov	r2, r3
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 fc50 	bl	8006aa8 <UART_Start_Receive_DMA>
 8006208:	4603      	mov	r3, r0
 800620a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800620e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006212:	2b00      	cmp	r3, #0
 8006214:	d12c      	bne.n	8006270 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	2b01      	cmp	r3, #1
 800621c:	d125      	bne.n	800626a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	617b      	str	r3, [r7, #20]
   return(result);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f043 0310 	orr.w	r3, r3, #16
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006254:	627a      	str	r2, [r7, #36]	; 0x24
 8006256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6a39      	ldr	r1, [r7, #32]
 800625a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	61fb      	str	r3, [r7, #28]
   return(result);
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e5      	bne.n	8006234 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006268:	e002      	b.n	8006270 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006270:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006274:	e000      	b.n	8006278 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006276:	2302      	movs	r3, #2
  }
}
 8006278:	4618      	mov	r0, r3
 800627a:	3730      	adds	r7, #48	; 0x30
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b0ba      	sub	sp, #232	; 0xe8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80062be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10f      	bne.n	80062e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <HAL_UART_IRQHandler+0x66>
 80062d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fd87 	bl	8006df2 <UART_Receive_IT>
      return;
 80062e4:	e256      	b.n	8006794 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 80de 	beq.w	80064ac <HAL_UART_IRQHandler+0x22c>
 80062f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d106      	bne.n	800630a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006300:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 80d1 	beq.w	80064ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800630a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00b      	beq.n	800632e <HAL_UART_IRQHandler+0xae>
 8006316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800631a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f043 0201 	orr.w	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800632e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00b      	beq.n	8006352 <HAL_UART_IRQHandler+0xd2>
 800633a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	f043 0202 	orr.w	r2, r3, #2
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00b      	beq.n	8006376 <HAL_UART_IRQHandler+0xf6>
 800635e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d005      	beq.n	8006376 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f043 0204 	orr.w	r2, r3, #4
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637a:	f003 0308 	and.w	r3, r3, #8
 800637e:	2b00      	cmp	r3, #0
 8006380:	d011      	beq.n	80063a6 <HAL_UART_IRQHandler+0x126>
 8006382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d105      	bne.n	800639a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800638e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	f043 0208 	orr.w	r2, r3, #8
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 81ed 	beq.w	800678a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_UART_IRQHandler+0x14e>
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fd12 	bl	8006df2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <HAL_UART_IRQHandler+0x17a>
 80063f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d04f      	beq.n	800649a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fc1a 	bl	8006c34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	d141      	bne.n	8006492 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3314      	adds	r3, #20
 8006414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006424:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3314      	adds	r3, #20
 8006436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800643a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800643e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800644a:	e841 2300 	strex	r3, r2, [r1]
 800644e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1d9      	bne.n	800640e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	2b00      	cmp	r3, #0
 8006460:	d013      	beq.n	800648a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006466:	4a7d      	ldr	r2, [pc, #500]	; (800665c <HAL_UART_IRQHandler+0x3dc>)
 8006468:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	4618      	mov	r0, r3
 8006470:	f7fd fc14 	bl	8003c9c <HAL_DMA_Abort_IT>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d016      	beq.n	80064a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006484:	4610      	mov	r0, r2
 8006486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006488:	e00e      	b.n	80064a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f9ae 	bl	80067ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	e00a      	b.n	80064a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f9aa 	bl	80067ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006498:	e006      	b.n	80064a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f9a6 	bl	80067ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80064a6:	e170      	b.n	800678a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a8:	bf00      	nop
    return;
 80064aa:	e16e      	b.n	800678a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	f040 814a 	bne.w	800674a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ba:	f003 0310 	and.w	r3, r3, #16
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 8143 	beq.w	800674a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 813c 	beq.w	800674a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064d2:	2300      	movs	r3, #0
 80064d4:	60bb      	str	r3, [r7, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	60bb      	str	r3, [r7, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	60bb      	str	r3, [r7, #8]
 80064e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b40      	cmp	r3, #64	; 0x40
 80064f4:	f040 80b4 	bne.w	8006660 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8140 	beq.w	800678e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006516:	429a      	cmp	r2, r3
 8006518:	f080 8139 	bcs.w	800678e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006522:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800652e:	f000 8088 	beq.w	8006642 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	330c      	adds	r3, #12
 8006538:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800654c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800655e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800656a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1d9      	bne.n	8006532 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3314      	adds	r3, #20
 8006584:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800658e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006590:	f023 0301 	bic.w	r3, r3, #1
 8006594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3314      	adds	r3, #20
 800659e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e1      	bne.n	800657e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3314      	adds	r3, #20
 80065c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3314      	adds	r3, #20
 80065da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e3      	bne.n	80065ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	330c      	adds	r3, #12
 8006606:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660a:	e853 3f00 	ldrex	r3, [r3]
 800660e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006612:	f023 0310 	bic.w	r3, r3, #16
 8006616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	330c      	adds	r3, #12
 8006620:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006624:	65ba      	str	r2, [r7, #88]	; 0x58
 8006626:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800662a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e3      	bne.n	8006600 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	4618      	mov	r0, r3
 800663e:	f7fd fabd 	bl	8003bbc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800664a:	b29b      	uxth	r3, r3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	b29b      	uxth	r3, r3
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fb fd88 	bl	8002168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006658:	e099      	b.n	800678e <HAL_UART_IRQHandler+0x50e>
 800665a:	bf00      	nop
 800665c:	08006cfb 	.word	0x08006cfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006668:	b29b      	uxth	r3, r3
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 808b 	beq.w	8006792 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800667c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 8086 	beq.w	8006792 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	330c      	adds	r3, #12
 800668c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006698:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800669c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80066aa:	647a      	str	r2, [r7, #68]	; 0x44
 80066ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066b2:	e841 2300 	strex	r3, r2, [r1]
 80066b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1e3      	bne.n	8006686 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3314      	adds	r3, #20
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	e853 3f00 	ldrex	r3, [r3]
 80066cc:	623b      	str	r3, [r7, #32]
   return(result);
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	f023 0301 	bic.w	r3, r3, #1
 80066d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3314      	adds	r3, #20
 80066de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066e2:	633a      	str	r2, [r7, #48]	; 0x30
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e3      	bne.n	80066be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	60fb      	str	r3, [r7, #12]
   return(result);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0310 	bic.w	r3, r3, #16
 800671a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	330c      	adds	r3, #12
 8006724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006728:	61fa      	str	r2, [r7, #28]
 800672a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	69b9      	ldr	r1, [r7, #24]
 800672e:	69fa      	ldr	r2, [r7, #28]
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	617b      	str	r3, [r7, #20]
   return(result);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e3      	bne.n	8006704 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800673c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006740:	4619      	mov	r1, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fb fd10 	bl	8002168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006748:	e023      	b.n	8006792 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <HAL_UART_IRQHandler+0x4ea>
 8006756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fadd 	bl	8006d22 <UART_Transmit_IT>
    return;
 8006768:	e014      	b.n	8006794 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00e      	beq.n	8006794 <HAL_UART_IRQHandler+0x514>
 8006776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d008      	beq.n	8006794 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fb1d 	bl	8006dc2 <UART_EndTransmit_IT>
    return;
 8006788:	e004      	b.n	8006794 <HAL_UART_IRQHandler+0x514>
    return;
 800678a:	bf00      	nop
 800678c:	e002      	b.n	8006794 <HAL_UART_IRQHandler+0x514>
      return;
 800678e:	bf00      	nop
 8006790:	e000      	b.n	8006794 <HAL_UART_IRQHandler+0x514>
      return;
 8006792:	bf00      	nop
  }
}
 8006794:	37e8      	adds	r7, #232	; 0xe8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop

0800679c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b090      	sub	sp, #64	; 0x40
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006818:	2b00      	cmp	r3, #0
 800681a:	d137      	bne.n	800688c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800681c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681e:	2200      	movs	r2, #0
 8006820:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3314      	adds	r3, #20
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	623b      	str	r3, [r7, #32]
   return(result);
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006838:	63bb      	str	r3, [r7, #56]	; 0x38
 800683a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3314      	adds	r3, #20
 8006840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006842:	633a      	str	r2, [r7, #48]	; 0x30
 8006844:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	330c      	adds	r3, #12
 800685c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	60fb      	str	r3, [r7, #12]
   return(result);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686c:	637b      	str	r3, [r7, #52]	; 0x34
 800686e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	330c      	adds	r3, #12
 8006874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006876:	61fa      	str	r2, [r7, #28]
 8006878:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	69b9      	ldr	r1, [r7, #24]
 800687c:	69fa      	ldr	r2, [r7, #28]
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	617b      	str	r3, [r7, #20]
   return(result);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e5      	bne.n	8006856 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800688a:	e002      	b.n	8006892 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800688c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800688e:	f7ff ff85 	bl	800679c <HAL_UART_TxCpltCallback>
}
 8006892:	bf00      	nop
 8006894:	3740      	adds	r7, #64	; 0x40
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7ff ff81 	bl	80067b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ae:	bf00      	nop
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b09c      	sub	sp, #112	; 0x70
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d172      	bne.n	80069b8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80068d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d4:	2200      	movs	r2, #0
 80068d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80068f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	330c      	adds	r3, #12
 80068f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80068fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e5      	bne.n	80068d8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	e853 3f00 	ldrex	r3, [r3]
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691e:	f023 0301 	bic.w	r3, r3, #1
 8006922:	667b      	str	r3, [r7, #100]	; 0x64
 8006924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3314      	adds	r3, #20
 800692a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800692c:	647a      	str	r2, [r7, #68]	; 0x44
 800692e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006930:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006934:	e841 2300 	strex	r3, r2, [r1]
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800693a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e5      	bne.n	800690c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3314      	adds	r3, #20
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	623b      	str	r3, [r7, #32]
   return(result);
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006956:	663b      	str	r3, [r7, #96]	; 0x60
 8006958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3314      	adds	r3, #20
 800695e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006960:	633a      	str	r2, [r7, #48]	; 0x30
 8006962:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e5      	bne.n	8006940 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800697c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	2b01      	cmp	r3, #1
 8006982:	d119      	bne.n	80069b8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	60fb      	str	r3, [r7, #12]
   return(result);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0310 	bic.w	r3, r3, #16
 800699a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800699c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	330c      	adds	r3, #12
 80069a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069a4:	61fa      	str	r2, [r7, #28]
 80069a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	69b9      	ldr	r1, [r7, #24]
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	617b      	str	r3, [r7, #20]
   return(result);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e5      	bne.n	8006984 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d106      	bne.n	80069ce <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069c4:	4619      	mov	r1, r3
 80069c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80069c8:	f7fb fbce 	bl	8002168 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069cc:	e002      	b.n	80069d4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80069ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80069d0:	f7ff fef8 	bl	80067c4 <HAL_UART_RxCpltCallback>
}
 80069d4:	bf00      	nop
 80069d6:	3770      	adds	r7, #112	; 0x70
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d108      	bne.n	8006a04 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069f6:	085b      	lsrs	r3, r3, #1
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	4619      	mov	r1, r3
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7fb fbb3 	bl	8002168 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a02:	e002      	b.n	8006a0a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f7ff fee7 	bl	80067d8 <HAL_UART_RxHalfCpltCallback>
}
 8006a0a:	bf00      	nop
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2e:	2b80      	cmp	r3, #128	; 0x80
 8006a30:	bf0c      	ite	eq
 8006a32:	2301      	moveq	r3, #1
 8006a34:	2300      	movne	r3, #0
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b21      	cmp	r3, #33	; 0x21
 8006a44:	d108      	bne.n	8006a58 <UART_DMAError+0x46>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006a52:	68b8      	ldr	r0, [r7, #8]
 8006a54:	f000 f8c6 	bl	8006be4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a62:	2b40      	cmp	r3, #64	; 0x40
 8006a64:	bf0c      	ite	eq
 8006a66:	2301      	moveq	r3, #1
 8006a68:	2300      	movne	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b22      	cmp	r3, #34	; 0x22
 8006a78:	d108      	bne.n	8006a8c <UART_DMAError+0x7a>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2200      	movs	r2, #0
 8006a84:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a86:	68b8      	ldr	r0, [r7, #8]
 8006a88:	f000 f8d4 	bl	8006c34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	f043 0210 	orr.w	r2, r3, #16
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a98:	68b8      	ldr	r0, [r7, #8]
 8006a9a:	f7ff fea7 	bl	80067ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a9e:	bf00      	nop
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b098      	sub	sp, #96	; 0x60
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	88fa      	ldrh	r2, [r7, #6]
 8006ac0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2222      	movs	r2, #34	; 0x22
 8006acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	4a40      	ldr	r2, [pc, #256]	; (8006bd8 <UART_Start_Receive_DMA+0x130>)
 8006ad6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	4a3f      	ldr	r2, [pc, #252]	; (8006bdc <UART_Start_Receive_DMA+0x134>)
 8006ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	4a3e      	ldr	r2, [pc, #248]	; (8006be0 <UART_Start_Receive_DMA+0x138>)
 8006ae6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	2200      	movs	r2, #0
 8006aee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006af0:	f107 0308 	add.w	r3, r7, #8
 8006af4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	f7fd f800 	bl	8003b0c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	613b      	str	r3, [r7, #16]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d019      	beq.n	8006b66 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	330c      	adds	r3, #12
 8006b38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b48:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b52:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006b54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e5      	bne.n	8006b32 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	f043 0301 	orr.w	r3, r3, #1
 8006b7c:	657b      	str	r3, [r7, #84]	; 0x54
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3314      	adds	r3, #20
 8006b84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b86:	63ba      	str	r2, [r7, #56]	; 0x38
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e5      	bne.n	8006b66 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3314      	adds	r3, #20
 8006ba0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb0:	653b      	str	r3, [r7, #80]	; 0x50
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3314      	adds	r3, #20
 8006bb8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bba:	627a      	str	r2, [r7, #36]	; 0x24
 8006bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6a39      	ldr	r1, [r7, #32]
 8006bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e5      	bne.n	8006b9a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3760      	adds	r7, #96	; 0x60
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	080068b7 	.word	0x080068b7
 8006bdc:	080069dd 	.word	0x080069dd
 8006be0:	08006a13 	.word	0x08006a13

08006be4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b089      	sub	sp, #36	; 0x24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	330c      	adds	r3, #12
 8006bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	e853 3f00 	ldrex	r3, [r3]
 8006bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006c02:	61fb      	str	r3, [r7, #28]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	330c      	adds	r3, #12
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	61ba      	str	r2, [r7, #24]
 8006c0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c10:	6979      	ldr	r1, [r7, #20]
 8006c12:	69ba      	ldr	r2, [r7, #24]
 8006c14:	e841 2300 	strex	r3, r2, [r1]
 8006c18:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e5      	bne.n	8006bec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006c28:	bf00      	nop
 8006c2a:	3724      	adds	r7, #36	; 0x24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b095      	sub	sp, #84	; 0x54
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	330c      	adds	r3, #12
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	330c      	adds	r3, #12
 8006c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c5c:	643a      	str	r2, [r7, #64]	; 0x40
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e5      	bne.n	8006c3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3314      	adds	r3, #20
 8006c76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	e853 3f00 	ldrex	r3, [r3]
 8006c7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3314      	adds	r3, #20
 8006c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e5      	bne.n	8006c70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d119      	bne.n	8006ce0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f023 0310 	bic.w	r3, r3, #16
 8006cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ccc:	61ba      	str	r2, [r7, #24]
 8006cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6979      	ldr	r1, [r7, #20]
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e5      	bne.n	8006cac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006cee:	bf00      	nop
 8006cf0:	3754      	adds	r7, #84	; 0x54
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff fd69 	bl	80067ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b21      	cmp	r3, #33	; 0x21
 8006d34:	d13e      	bne.n	8006db4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3e:	d114      	bne.n	8006d6a <UART_Transmit_IT+0x48>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d110      	bne.n	8006d6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	461a      	mov	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	1c9a      	adds	r2, r3, #2
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	621a      	str	r2, [r3, #32]
 8006d68:	e008      	b.n	8006d7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	1c59      	adds	r1, r3, #1
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6211      	str	r1, [r2, #32]
 8006d74:	781a      	ldrb	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	4619      	mov	r1, r3
 8006d8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10f      	bne.n	8006db0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68da      	ldr	r2, [r3, #12]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006db4:	2302      	movs	r3, #2
  }
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff fcda 	bl	800679c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b08c      	sub	sp, #48	; 0x30
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b22      	cmp	r3, #34	; 0x22
 8006e04:	f040 80ab 	bne.w	8006f5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e10:	d117      	bne.n	8006e42 <UART_Receive_IT+0x50>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d113      	bne.n	8006e42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	1c9a      	adds	r2, r3, #2
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e40:	e026      	b.n	8006e90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e54:	d007      	beq.n	8006e66 <UART_Receive_IT+0x74>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <UART_Receive_IT+0x82>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	e008      	b.n	8006e86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d15a      	bne.n	8006f5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0220 	bic.w	r2, r2, #32
 8006eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ec2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	695a      	ldr	r2, [r3, #20]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0201 	bic.w	r2, r2, #1
 8006ed2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d135      	bne.n	8006f50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	330c      	adds	r3, #12
 8006ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	e853 3f00 	ldrex	r3, [r3]
 8006ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f023 0310 	bic.w	r3, r3, #16
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	330c      	adds	r3, #12
 8006f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f0a:	623a      	str	r2, [r7, #32]
 8006f0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0e:	69f9      	ldr	r1, [r7, #28]
 8006f10:	6a3a      	ldr	r2, [r7, #32]
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e5      	bne.n	8006eea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0310 	and.w	r3, r3, #16
 8006f28:	2b10      	cmp	r3, #16
 8006f2a:	d10a      	bne.n	8006f42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7fb f90d 	bl	8002168 <HAL_UARTEx_RxEventCallback>
 8006f4e:	e002      	b.n	8006f56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff fc37 	bl	80067c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	e002      	b.n	8006f60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e000      	b.n	8006f60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006f5e:	2302      	movs	r3, #2
  }
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3730      	adds	r7, #48	; 0x30
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	b09f      	sub	sp, #124	; 0x7c
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f7e:	68d9      	ldr	r1, [r3, #12]
 8006f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	ea40 0301 	orr.w	r3, r0, r1
 8006f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006fac:	f021 010c 	bic.w	r1, r1, #12
 8006fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc6:	6999      	ldr	r1, [r3, #24]
 8006fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	ea40 0301 	orr.w	r3, r0, r1
 8006fd0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	4bc5      	ldr	r3, [pc, #788]	; (80072ec <UART_SetConfig+0x384>)
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d004      	beq.n	8006fe6 <UART_SetConfig+0x7e>
 8006fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	4bc3      	ldr	r3, [pc, #780]	; (80072f0 <UART_SetConfig+0x388>)
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d103      	bne.n	8006fee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fe6:	f7fd fefb 	bl	8004de0 <HAL_RCC_GetPCLK2Freq>
 8006fea:	6778      	str	r0, [r7, #116]	; 0x74
 8006fec:	e002      	b.n	8006ff4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fee:	f7fd fee3 	bl	8004db8 <HAL_RCC_GetPCLK1Freq>
 8006ff2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff6:	69db      	ldr	r3, [r3, #28]
 8006ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ffc:	f040 80b6 	bne.w	800716c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007002:	461c      	mov	r4, r3
 8007004:	f04f 0500 	mov.w	r5, #0
 8007008:	4622      	mov	r2, r4
 800700a:	462b      	mov	r3, r5
 800700c:	1891      	adds	r1, r2, r2
 800700e:	6439      	str	r1, [r7, #64]	; 0x40
 8007010:	415b      	adcs	r3, r3
 8007012:	647b      	str	r3, [r7, #68]	; 0x44
 8007014:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007018:	1912      	adds	r2, r2, r4
 800701a:	eb45 0303 	adc.w	r3, r5, r3
 800701e:	f04f 0000 	mov.w	r0, #0
 8007022:	f04f 0100 	mov.w	r1, #0
 8007026:	00d9      	lsls	r1, r3, #3
 8007028:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800702c:	00d0      	lsls	r0, r2, #3
 800702e:	4602      	mov	r2, r0
 8007030:	460b      	mov	r3, r1
 8007032:	1911      	adds	r1, r2, r4
 8007034:	6639      	str	r1, [r7, #96]	; 0x60
 8007036:	416b      	adcs	r3, r5
 8007038:	667b      	str	r3, [r7, #100]	; 0x64
 800703a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	461a      	mov	r2, r3
 8007040:	f04f 0300 	mov.w	r3, #0
 8007044:	1891      	adds	r1, r2, r2
 8007046:	63b9      	str	r1, [r7, #56]	; 0x38
 8007048:	415b      	adcs	r3, r3
 800704a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800704c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007050:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007054:	f7f9 fe28 	bl	8000ca8 <__aeabi_uldivmod>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4ba5      	ldr	r3, [pc, #660]	; (80072f4 <UART_SetConfig+0x38c>)
 800705e:	fba3 2302 	umull	r2, r3, r3, r2
 8007062:	095b      	lsrs	r3, r3, #5
 8007064:	011e      	lsls	r6, r3, #4
 8007066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007068:	461c      	mov	r4, r3
 800706a:	f04f 0500 	mov.w	r5, #0
 800706e:	4622      	mov	r2, r4
 8007070:	462b      	mov	r3, r5
 8007072:	1891      	adds	r1, r2, r2
 8007074:	6339      	str	r1, [r7, #48]	; 0x30
 8007076:	415b      	adcs	r3, r3
 8007078:	637b      	str	r3, [r7, #52]	; 0x34
 800707a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800707e:	1912      	adds	r2, r2, r4
 8007080:	eb45 0303 	adc.w	r3, r5, r3
 8007084:	f04f 0000 	mov.w	r0, #0
 8007088:	f04f 0100 	mov.w	r1, #0
 800708c:	00d9      	lsls	r1, r3, #3
 800708e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007092:	00d0      	lsls	r0, r2, #3
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	1911      	adds	r1, r2, r4
 800709a:	65b9      	str	r1, [r7, #88]	; 0x58
 800709c:	416b      	adcs	r3, r5
 800709e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	461a      	mov	r2, r3
 80070a6:	f04f 0300 	mov.w	r3, #0
 80070aa:	1891      	adds	r1, r2, r2
 80070ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80070ae:	415b      	adcs	r3, r3
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80070ba:	f7f9 fdf5 	bl	8000ca8 <__aeabi_uldivmod>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4b8c      	ldr	r3, [pc, #560]	; (80072f4 <UART_SetConfig+0x38c>)
 80070c4:	fba3 1302 	umull	r1, r3, r3, r2
 80070c8:	095b      	lsrs	r3, r3, #5
 80070ca:	2164      	movs	r1, #100	; 0x64
 80070cc:	fb01 f303 	mul.w	r3, r1, r3
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	3332      	adds	r3, #50	; 0x32
 80070d6:	4a87      	ldr	r2, [pc, #540]	; (80072f4 <UART_SetConfig+0x38c>)
 80070d8:	fba2 2303 	umull	r2, r3, r2, r3
 80070dc:	095b      	lsrs	r3, r3, #5
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070e4:	441e      	add	r6, r3
 80070e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070e8:	4618      	mov	r0, r3
 80070ea:	f04f 0100 	mov.w	r1, #0
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	1894      	adds	r4, r2, r2
 80070f4:	623c      	str	r4, [r7, #32]
 80070f6:	415b      	adcs	r3, r3
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
 80070fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070fe:	1812      	adds	r2, r2, r0
 8007100:	eb41 0303 	adc.w	r3, r1, r3
 8007104:	f04f 0400 	mov.w	r4, #0
 8007108:	f04f 0500 	mov.w	r5, #0
 800710c:	00dd      	lsls	r5, r3, #3
 800710e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007112:	00d4      	lsls	r4, r2, #3
 8007114:	4622      	mov	r2, r4
 8007116:	462b      	mov	r3, r5
 8007118:	1814      	adds	r4, r2, r0
 800711a:	653c      	str	r4, [r7, #80]	; 0x50
 800711c:	414b      	adcs	r3, r1
 800711e:	657b      	str	r3, [r7, #84]	; 0x54
 8007120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	461a      	mov	r2, r3
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	1891      	adds	r1, r2, r2
 800712c:	61b9      	str	r1, [r7, #24]
 800712e:	415b      	adcs	r3, r3
 8007130:	61fb      	str	r3, [r7, #28]
 8007132:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007136:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800713a:	f7f9 fdb5 	bl	8000ca8 <__aeabi_uldivmod>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4b6c      	ldr	r3, [pc, #432]	; (80072f4 <UART_SetConfig+0x38c>)
 8007144:	fba3 1302 	umull	r1, r3, r3, r2
 8007148:	095b      	lsrs	r3, r3, #5
 800714a:	2164      	movs	r1, #100	; 0x64
 800714c:	fb01 f303 	mul.w	r3, r1, r3
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	3332      	adds	r3, #50	; 0x32
 8007156:	4a67      	ldr	r2, [pc, #412]	; (80072f4 <UART_SetConfig+0x38c>)
 8007158:	fba2 2303 	umull	r2, r3, r2, r3
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	f003 0207 	and.w	r2, r3, #7
 8007162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4432      	add	r2, r6
 8007168:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800716a:	e0b9      	b.n	80072e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800716c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800716e:	461c      	mov	r4, r3
 8007170:	f04f 0500 	mov.w	r5, #0
 8007174:	4622      	mov	r2, r4
 8007176:	462b      	mov	r3, r5
 8007178:	1891      	adds	r1, r2, r2
 800717a:	6139      	str	r1, [r7, #16]
 800717c:	415b      	adcs	r3, r3
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007184:	1912      	adds	r2, r2, r4
 8007186:	eb45 0303 	adc.w	r3, r5, r3
 800718a:	f04f 0000 	mov.w	r0, #0
 800718e:	f04f 0100 	mov.w	r1, #0
 8007192:	00d9      	lsls	r1, r3, #3
 8007194:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007198:	00d0      	lsls	r0, r2, #3
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	eb12 0804 	adds.w	r8, r2, r4
 80071a2:	eb43 0905 	adc.w	r9, r3, r5
 80071a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f04f 0100 	mov.w	r1, #0
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	008b      	lsls	r3, r1, #2
 80071ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071be:	0082      	lsls	r2, r0, #2
 80071c0:	4640      	mov	r0, r8
 80071c2:	4649      	mov	r1, r9
 80071c4:	f7f9 fd70 	bl	8000ca8 <__aeabi_uldivmod>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4b49      	ldr	r3, [pc, #292]	; (80072f4 <UART_SetConfig+0x38c>)
 80071ce:	fba3 2302 	umull	r2, r3, r3, r2
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	011e      	lsls	r6, r3, #4
 80071d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071d8:	4618      	mov	r0, r3
 80071da:	f04f 0100 	mov.w	r1, #0
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	1894      	adds	r4, r2, r2
 80071e4:	60bc      	str	r4, [r7, #8]
 80071e6:	415b      	adcs	r3, r3
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071ee:	1812      	adds	r2, r2, r0
 80071f0:	eb41 0303 	adc.w	r3, r1, r3
 80071f4:	f04f 0400 	mov.w	r4, #0
 80071f8:	f04f 0500 	mov.w	r5, #0
 80071fc:	00dd      	lsls	r5, r3, #3
 80071fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007202:	00d4      	lsls	r4, r2, #3
 8007204:	4622      	mov	r2, r4
 8007206:	462b      	mov	r3, r5
 8007208:	1814      	adds	r4, r2, r0
 800720a:	64bc      	str	r4, [r7, #72]	; 0x48
 800720c:	414b      	adcs	r3, r1
 800720e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	4618      	mov	r0, r3
 8007216:	f04f 0100 	mov.w	r1, #0
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	f04f 0300 	mov.w	r3, #0
 8007222:	008b      	lsls	r3, r1, #2
 8007224:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007228:	0082      	lsls	r2, r0, #2
 800722a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800722e:	f7f9 fd3b 	bl	8000ca8 <__aeabi_uldivmod>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4b2f      	ldr	r3, [pc, #188]	; (80072f4 <UART_SetConfig+0x38c>)
 8007238:	fba3 1302 	umull	r1, r3, r3, r2
 800723c:	095b      	lsrs	r3, r3, #5
 800723e:	2164      	movs	r1, #100	; 0x64
 8007240:	fb01 f303 	mul.w	r3, r1, r3
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	3332      	adds	r3, #50	; 0x32
 800724a:	4a2a      	ldr	r2, [pc, #168]	; (80072f4 <UART_SetConfig+0x38c>)
 800724c:	fba2 2303 	umull	r2, r3, r2, r3
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007256:	441e      	add	r6, r3
 8007258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800725a:	4618      	mov	r0, r3
 800725c:	f04f 0100 	mov.w	r1, #0
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	1894      	adds	r4, r2, r2
 8007266:	603c      	str	r4, [r7, #0]
 8007268:	415b      	adcs	r3, r3
 800726a:	607b      	str	r3, [r7, #4]
 800726c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007270:	1812      	adds	r2, r2, r0
 8007272:	eb41 0303 	adc.w	r3, r1, r3
 8007276:	f04f 0400 	mov.w	r4, #0
 800727a:	f04f 0500 	mov.w	r5, #0
 800727e:	00dd      	lsls	r5, r3, #3
 8007280:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007284:	00d4      	lsls	r4, r2, #3
 8007286:	4622      	mov	r2, r4
 8007288:	462b      	mov	r3, r5
 800728a:	eb12 0a00 	adds.w	sl, r2, r0
 800728e:	eb43 0b01 	adc.w	fp, r3, r1
 8007292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	4618      	mov	r0, r3
 8007298:	f04f 0100 	mov.w	r1, #0
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	008b      	lsls	r3, r1, #2
 80072a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072aa:	0082      	lsls	r2, r0, #2
 80072ac:	4650      	mov	r0, sl
 80072ae:	4659      	mov	r1, fp
 80072b0:	f7f9 fcfa 	bl	8000ca8 <__aeabi_uldivmod>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4b0e      	ldr	r3, [pc, #56]	; (80072f4 <UART_SetConfig+0x38c>)
 80072ba:	fba3 1302 	umull	r1, r3, r3, r2
 80072be:	095b      	lsrs	r3, r3, #5
 80072c0:	2164      	movs	r1, #100	; 0x64
 80072c2:	fb01 f303 	mul.w	r3, r1, r3
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	3332      	adds	r3, #50	; 0x32
 80072cc:	4a09      	ldr	r2, [pc, #36]	; (80072f4 <UART_SetConfig+0x38c>)
 80072ce:	fba2 2303 	umull	r2, r3, r2, r3
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	f003 020f 	and.w	r2, r3, #15
 80072d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4432      	add	r2, r6
 80072de:	609a      	str	r2, [r3, #8]
}
 80072e0:	bf00      	nop
 80072e2:	377c      	adds	r7, #124	; 0x7c
 80072e4:	46bd      	mov	sp, r7
 80072e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ea:	bf00      	nop
 80072ec:	40011000 	.word	0x40011000
 80072f0:	40011400 	.word	0x40011400
 80072f4:	51eb851f 	.word	0x51eb851f

080072f8 <__NVIC_SetPriority>:
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	4603      	mov	r3, r0
 8007300:	6039      	str	r1, [r7, #0]
 8007302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007308:	2b00      	cmp	r3, #0
 800730a:	db0a      	blt.n	8007322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	b2da      	uxtb	r2, r3
 8007310:	490c      	ldr	r1, [pc, #48]	; (8007344 <__NVIC_SetPriority+0x4c>)
 8007312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007316:	0112      	lsls	r2, r2, #4
 8007318:	b2d2      	uxtb	r2, r2
 800731a:	440b      	add	r3, r1
 800731c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007320:	e00a      	b.n	8007338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	b2da      	uxtb	r2, r3
 8007326:	4908      	ldr	r1, [pc, #32]	; (8007348 <__NVIC_SetPriority+0x50>)
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	f003 030f 	and.w	r3, r3, #15
 800732e:	3b04      	subs	r3, #4
 8007330:	0112      	lsls	r2, r2, #4
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	440b      	add	r3, r1
 8007336:	761a      	strb	r2, [r3, #24]
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	e000e100 	.word	0xe000e100
 8007348:	e000ed00 	.word	0xe000ed00

0800734c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <SysTick_Handler+0x1c>)
 8007352:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007354:	f001 fcfe 	bl	8008d54 <xTaskGetSchedulerState>
 8007358:	4603      	mov	r3, r0
 800735a:	2b01      	cmp	r3, #1
 800735c:	d001      	beq.n	8007362 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800735e:	f002 fae3 	bl	8009928 <xPortSysTickHandler>
  }
}
 8007362:	bf00      	nop
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	e000e010 	.word	0xe000e010

0800736c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007370:	2100      	movs	r1, #0
 8007372:	f06f 0004 	mvn.w	r0, #4
 8007376:	f7ff ffbf 	bl	80072f8 <__NVIC_SetPriority>
#endif
}
 800737a:	bf00      	nop
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007386:	f3ef 8305 	mrs	r3, IPSR
 800738a:	603b      	str	r3, [r7, #0]
  return(result);
 800738c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007392:	f06f 0305 	mvn.w	r3, #5
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	e00c      	b.n	80073b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800739a:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <osKernelInitialize+0x44>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d105      	bne.n	80073ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073a2:	4b08      	ldr	r3, [pc, #32]	; (80073c4 <osKernelInitialize+0x44>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	607b      	str	r3, [r7, #4]
 80073ac:	e002      	b.n	80073b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073ae:	f04f 33ff 	mov.w	r3, #4294967295
 80073b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073b4:	687b      	ldr	r3, [r7, #4]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	200002b4 	.word	0x200002b4

080073c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ce:	f3ef 8305 	mrs	r3, IPSR
 80073d2:	603b      	str	r3, [r7, #0]
  return(result);
 80073d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80073da:	f06f 0305 	mvn.w	r3, #5
 80073de:	607b      	str	r3, [r7, #4]
 80073e0:	e010      	b.n	8007404 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80073e2:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <osKernelStart+0x48>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d109      	bne.n	80073fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073ea:	f7ff ffbf 	bl	800736c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073ee:	4b08      	ldr	r3, [pc, #32]	; (8007410 <osKernelStart+0x48>)
 80073f0:	2202      	movs	r2, #2
 80073f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073f4:	f001 f866 	bl	80084c4 <vTaskStartScheduler>
      stat = osOK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	607b      	str	r3, [r7, #4]
 80073fc:	e002      	b.n	8007404 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007402:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007404:	687b      	ldr	r3, [r7, #4]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	200002b4 	.word	0x200002b4

08007414 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007414:	b580      	push	{r7, lr}
 8007416:	b08e      	sub	sp, #56	; 0x38
 8007418:	af04      	add	r7, sp, #16
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007420:	2300      	movs	r3, #0
 8007422:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007424:	f3ef 8305 	mrs	r3, IPSR
 8007428:	617b      	str	r3, [r7, #20]
  return(result);
 800742a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800742c:	2b00      	cmp	r3, #0
 800742e:	d17e      	bne.n	800752e <osThreadNew+0x11a>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d07b      	beq.n	800752e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007436:	2380      	movs	r3, #128	; 0x80
 8007438:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800743a:	2318      	movs	r3, #24
 800743c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800743e:	2300      	movs	r3, #0
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007442:	f04f 33ff 	mov.w	r3, #4294967295
 8007446:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d045      	beq.n	80074da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <osThreadNew+0x48>
        name = attr->name;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <osThreadNew+0x6e>
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	2b38      	cmp	r3, #56	; 0x38
 8007474:	d805      	bhi.n	8007482 <osThreadNew+0x6e>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <osThreadNew+0x72>
        return (NULL);
 8007482:	2300      	movs	r3, #0
 8007484:	e054      	b.n	8007530 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	089b      	lsrs	r3, r3, #2
 8007494:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00e      	beq.n	80074bc <osThreadNew+0xa8>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	2b5b      	cmp	r3, #91	; 0x5b
 80074a4:	d90a      	bls.n	80074bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d006      	beq.n	80074bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <osThreadNew+0xa8>
        mem = 1;
 80074b6:	2301      	movs	r3, #1
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e010      	b.n	80074de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10c      	bne.n	80074de <osThreadNew+0xca>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d108      	bne.n	80074de <osThreadNew+0xca>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <osThreadNew+0xca>
          mem = 0;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61bb      	str	r3, [r7, #24]
 80074d8:	e001      	b.n	80074de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d110      	bne.n	8007506 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074ec:	9202      	str	r2, [sp, #8]
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fe0c 	bl	8008118 <xTaskCreateStatic>
 8007500:	4603      	mov	r3, r0
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	e013      	b.n	800752e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d110      	bne.n	800752e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	b29a      	uxth	r2, r3
 8007510:	f107 0310 	add.w	r3, r7, #16
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 fe57 	bl	80081d2 <xTaskCreate>
 8007524:	4603      	mov	r3, r0
 8007526:	2b01      	cmp	r3, #1
 8007528:	d001      	beq.n	800752e <osThreadNew+0x11a>
            hTask = NULL;
 800752a:	2300      	movs	r3, #0
 800752c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800752e:	693b      	ldr	r3, [r7, #16]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3728      	adds	r7, #40	; 0x28
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007540:	f3ef 8305 	mrs	r3, IPSR
 8007544:	60bb      	str	r3, [r7, #8]
  return(result);
 8007546:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <osDelay+0x1c>
    stat = osErrorISR;
 800754c:	f06f 0305 	mvn.w	r3, #5
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	e007      	b.n	8007564 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <osDelay+0x2c>
      vTaskDelay(ticks);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 ff7c 	bl	800845c <vTaskDelay>
    }
  }

  return (stat);
 8007564:	68fb      	ldr	r3, [r7, #12]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4a07      	ldr	r2, [pc, #28]	; (800759c <vApplicationGetIdleTaskMemory+0x2c>)
 8007580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	4a06      	ldr	r2, [pc, #24]	; (80075a0 <vApplicationGetIdleTaskMemory+0x30>)
 8007586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2280      	movs	r2, #128	; 0x80
 800758c:	601a      	str	r2, [r3, #0]
}
 800758e:	bf00      	nop
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	200002b8 	.word	0x200002b8
 80075a0:	20000314 	.word	0x20000314

080075a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4a07      	ldr	r2, [pc, #28]	; (80075d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80075b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4a06      	ldr	r2, [pc, #24]	; (80075d4 <vApplicationGetTimerTaskMemory+0x30>)
 80075ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	20000514 	.word	0x20000514
 80075d4:	20000570 	.word	0x20000570

080075d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f103 0208 	add.w	r2, r3, #8
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f04f 32ff 	mov.w	r2, #4294967295
 80075f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f103 0208 	add.w	r2, r3, #8
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f103 0208 	add.w	r2, r3, #8
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007690:	d103      	bne.n	800769a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	e00c      	b.n	80076b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3308      	adds	r3, #8
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e002      	b.n	80076a8 <vListInsert+0x2e>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d2f6      	bcs.n	80076a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	601a      	str	r2, [r3, #0]
}
 80076e0:	bf00      	nop
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	6892      	ldr	r2, [r2, #8]
 8007702:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	6852      	ldr	r2, [r2, #4]
 800770c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d103      	bne.n	8007720 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	1e5a      	subs	r2, r3, #1
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800776a:	f002 f84b 	bl	8009804 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800777a:	fb01 f303 	mul.w	r3, r1, r3
 800777e:	441a      	add	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779a:	3b01      	subs	r3, #1
 800779c:	68f9      	ldr	r1, [r7, #12]
 800779e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077a0:	fb01 f303 	mul.w	r3, r1, r3
 80077a4:	441a      	add	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	22ff      	movs	r2, #255	; 0xff
 80077ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	22ff      	movs	r2, #255	; 0xff
 80077b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d114      	bne.n	80077ea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01a      	beq.n	80077fe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3310      	adds	r3, #16
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 f903 	bl	80089d8 <xTaskRemoveFromEventList>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d012      	beq.n	80077fe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80077d8:	4b0c      	ldr	r3, [pc, #48]	; (800780c <xQueueGenericReset+0xcc>)
 80077da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	e009      	b.n	80077fe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3310      	adds	r3, #16
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7ff fef2 	bl	80075d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3324      	adds	r3, #36	; 0x24
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff feed 	bl	80075d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80077fe:	f002 f831 	bl	8009864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007802:	2301      	movs	r3, #1
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	e000ed04 	.word	0xe000ed04

08007810 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08e      	sub	sp, #56	; 0x38
 8007814:	af02      	add	r7, sp, #8
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007836:	bf00      	nop
 8007838:	e7fe      	b.n	8007838 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10a      	bne.n	8007856 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <xQueueGenericCreateStatic+0x52>
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <xQueueGenericCreateStatic+0x56>
 8007862:	2301      	movs	r3, #1
 8007864:	e000      	b.n	8007868 <xQueueGenericCreateStatic+0x58>
 8007866:	2300      	movs	r3, #0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007870:	f383 8811 	msr	BASEPRI, r3
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	f3bf 8f4f 	dsb	sy
 800787c:	623b      	str	r3, [r7, #32]
}
 800787e:	bf00      	nop
 8007880:	e7fe      	b.n	8007880 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <xQueueGenericCreateStatic+0x7e>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <xQueueGenericCreateStatic+0x82>
 800788e:	2301      	movs	r3, #1
 8007890:	e000      	b.n	8007894 <xQueueGenericCreateStatic+0x84>
 8007892:	2300      	movs	r3, #0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10a      	bne.n	80078ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	61fb      	str	r3, [r7, #28]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80078ae:	2350      	movs	r3, #80	; 0x50
 80078b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b50      	cmp	r3, #80	; 0x50
 80078b6:	d00a      	beq.n	80078ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	61bb      	str	r3, [r7, #24]
}
 80078ca:	bf00      	nop
 80078cc:	e7fe      	b.n	80078cc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80078ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00d      	beq.n	80078f6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80078e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	4613      	mov	r3, r2
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 f805 	bl	8007900 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3730      	adds	r7, #48	; 0x30
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d103      	bne.n	800791c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	e002      	b.n	8007922 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800792e:	2101      	movs	r1, #1
 8007930:	69b8      	ldr	r0, [r7, #24]
 8007932:	f7ff ff05 	bl	8007740 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08e      	sub	sp, #56	; 0x38
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007956:	2300      	movs	r3, #0
 8007958:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10a      	bne.n	800797a <xQueueGenericSend+0x32>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d103      	bne.n	8007988 <xQueueGenericSend+0x40>
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <xQueueGenericSend+0x44>
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <xQueueGenericSend+0x46>
 800798c:	2300      	movs	r3, #0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10a      	bne.n	80079a8 <xQueueGenericSend+0x60>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d103      	bne.n	80079b6 <xQueueGenericSend+0x6e>
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <xQueueGenericSend+0x72>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <xQueueGenericSend+0x74>
 80079ba:	2300      	movs	r3, #0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	623b      	str	r3, [r7, #32]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079d6:	f001 f9bd 	bl	8008d54 <xTaskGetSchedulerState>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d102      	bne.n	80079e6 <xQueueGenericSend+0x9e>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <xQueueGenericSend+0xa2>
 80079e6:	2301      	movs	r3, #1
 80079e8:	e000      	b.n	80079ec <xQueueGenericSend+0xa4>
 80079ea:	2300      	movs	r3, #0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10a      	bne.n	8007a06 <xQueueGenericSend+0xbe>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	61fb      	str	r3, [r7, #28]
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a06:	f001 fefd 	bl	8009804 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d302      	bcc.n	8007a1c <xQueueGenericSend+0xd4>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d129      	bne.n	8007a70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	68b9      	ldr	r1, [r7, #8]
 8007a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a22:	f000 fa0b 	bl	8007e3c <prvCopyDataToQueue>
 8007a26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d010      	beq.n	8007a52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	3324      	adds	r3, #36	; 0x24
 8007a34:	4618      	mov	r0, r3
 8007a36:	f000 ffcf 	bl	80089d8 <xTaskRemoveFromEventList>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d013      	beq.n	8007a68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a40:	4b3f      	ldr	r3, [pc, #252]	; (8007b40 <xQueueGenericSend+0x1f8>)
 8007a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	e00a      	b.n	8007a68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d007      	beq.n	8007a68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a58:	4b39      	ldr	r3, [pc, #228]	; (8007b40 <xQueueGenericSend+0x1f8>)
 8007a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a68:	f001 fefc 	bl	8009864 <vPortExitCritical>
				return pdPASS;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e063      	b.n	8007b38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d103      	bne.n	8007a7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a76:	f001 fef5 	bl	8009864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e05c      	b.n	8007b38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a84:	f107 0314 	add.w	r3, r7, #20
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 f809 	bl	8008aa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a92:	f001 fee7 	bl	8009864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a96:	f000 fd7b 	bl	8008590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a9a:	f001 feb3 	bl	8009804 <vPortEnterCritical>
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007aa4:	b25b      	sxtb	r3, r3
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d103      	bne.n	8007ab4 <xQueueGenericSend+0x16c>
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aba:	b25b      	sxtb	r3, r3
 8007abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac0:	d103      	bne.n	8007aca <xQueueGenericSend+0x182>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aca:	f001 fecb 	bl	8009864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ace:	1d3a      	adds	r2, r7, #4
 8007ad0:	f107 0314 	add.w	r3, r7, #20
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 fff8 	bl	8008acc <xTaskCheckForTimeOut>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d124      	bne.n	8007b2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ae4:	f000 faa2 	bl	800802c <prvIsQueueFull>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d018      	beq.n	8007b20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	3310      	adds	r3, #16
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 ff1e 	bl	8008938 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007afe:	f000 fa2d 	bl	8007f5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b02:	f000 fd53 	bl	80085ac <xTaskResumeAll>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f47f af7c 	bne.w	8007a06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007b0e:	4b0c      	ldr	r3, [pc, #48]	; (8007b40 <xQueueGenericSend+0x1f8>)
 8007b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	e772      	b.n	8007a06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b22:	f000 fa1b 	bl	8007f5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b26:	f000 fd41 	bl	80085ac <xTaskResumeAll>
 8007b2a:	e76c      	b.n	8007a06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b2e:	f000 fa15 	bl	8007f5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b32:	f000 fd3b 	bl	80085ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3738      	adds	r7, #56	; 0x38
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	e000ed04 	.word	0xe000ed04

08007b44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b090      	sub	sp, #64	; 0x40
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d103      	bne.n	8007b80 <xQueueGenericSendFromISR+0x3c>
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <xQueueGenericSendFromISR+0x40>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e000      	b.n	8007b86 <xQueueGenericSendFromISR+0x42>
 8007b84:	2300      	movs	r3, #0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10a      	bne.n	8007ba0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b9c:	bf00      	nop
 8007b9e:	e7fe      	b.n	8007b9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d103      	bne.n	8007bae <xQueueGenericSendFromISR+0x6a>
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d101      	bne.n	8007bb2 <xQueueGenericSendFromISR+0x6e>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <xQueueGenericSendFromISR+0x70>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10a      	bne.n	8007bce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	623b      	str	r3, [r7, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	e7fe      	b.n	8007bcc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bce:	f001 fefb 	bl	80099c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007bd2:	f3ef 8211 	mrs	r2, BASEPRI
 8007bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	61fa      	str	r2, [r7, #28]
 8007be8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007bea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d302      	bcc.n	8007c00 <xQueueGenericSendFromISR+0xbc>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d12f      	bne.n	8007c60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	68b9      	ldr	r1, [r7, #8]
 8007c14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c16:	f000 f911 	bl	8007e3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c22:	d112      	bne.n	8007c4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d016      	beq.n	8007c5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	3324      	adds	r3, #36	; 0x24
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fed1 	bl	80089d8 <xTaskRemoveFromEventList>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00e      	beq.n	8007c5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00b      	beq.n	8007c5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	e007      	b.n	8007c5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c4e:	3301      	adds	r3, #1
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	b25a      	sxtb	r2, r3
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007c5e:	e001      	b.n	8007c64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3740      	adds	r7, #64	; 0x40
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08c      	sub	sp, #48	; 0x30
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10a      	bne.n	8007cac <xQueueReceive+0x30>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	623b      	str	r3, [r7, #32]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d103      	bne.n	8007cba <xQueueReceive+0x3e>
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <xQueueReceive+0x42>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e000      	b.n	8007cc0 <xQueueReceive+0x44>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <xQueueReceive+0x5e>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	61fb      	str	r3, [r7, #28]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cda:	f001 f83b 	bl	8008d54 <xTaskGetSchedulerState>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <xQueueReceive+0x6e>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <xQueueReceive+0x72>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e000      	b.n	8007cf0 <xQueueReceive+0x74>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10a      	bne.n	8007d0a <xQueueReceive+0x8e>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	61bb      	str	r3, [r7, #24]
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d0a:	f001 fd7b 	bl	8009804 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d01f      	beq.n	8007d5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d1e:	f000 f8f7 	bl	8007f10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	1e5a      	subs	r2, r3, #1
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00f      	beq.n	8007d52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	3310      	adds	r3, #16
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fe4e 	bl	80089d8 <xTaskRemoveFromEventList>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d42:	4b3d      	ldr	r3, [pc, #244]	; (8007e38 <xQueueReceive+0x1bc>)
 8007d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d52:	f001 fd87 	bl	8009864 <vPortExitCritical>
				return pdPASS;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e069      	b.n	8007e2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d60:	f001 fd80 	bl	8009864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d64:	2300      	movs	r3, #0
 8007d66:	e062      	b.n	8007e2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d6e:	f107 0310 	add.w	r3, r7, #16
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fe94 	bl	8008aa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d7c:	f001 fd72 	bl	8009864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d80:	f000 fc06 	bl	8008590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d84:	f001 fd3e 	bl	8009804 <vPortEnterCritical>
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d8e:	b25b      	sxtb	r3, r3
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d94:	d103      	bne.n	8007d9e <xQueueReceive+0x122>
 8007d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007da4:	b25b      	sxtb	r3, r3
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007daa:	d103      	bne.n	8007db4 <xQueueReceive+0x138>
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007db4:	f001 fd56 	bl	8009864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007db8:	1d3a      	adds	r2, r7, #4
 8007dba:	f107 0310 	add.w	r3, r7, #16
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 fe83 	bl	8008acc <xTaskCheckForTimeOut>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d123      	bne.n	8007e14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dce:	f000 f917 	bl	8008000 <prvIsQueueEmpty>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d017      	beq.n	8007e08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	3324      	adds	r3, #36	; 0x24
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	4611      	mov	r1, r2
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fda9 	bl	8008938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de8:	f000 f8b8 	bl	8007f5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007dec:	f000 fbde 	bl	80085ac <xTaskResumeAll>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d189      	bne.n	8007d0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007df6:	4b10      	ldr	r3, [pc, #64]	; (8007e38 <xQueueReceive+0x1bc>)
 8007df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	e780      	b.n	8007d0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e0a:	f000 f8a7 	bl	8007f5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e0e:	f000 fbcd 	bl	80085ac <xTaskResumeAll>
 8007e12:	e77a      	b.n	8007d0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e16:	f000 f8a1 	bl	8007f5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e1a:	f000 fbc7 	bl	80085ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e20:	f000 f8ee 	bl	8008000 <prvIsQueueEmpty>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f43f af6f 	beq.w	8007d0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3730      	adds	r7, #48	; 0x30
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10d      	bne.n	8007e76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d14d      	bne.n	8007efe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 ff92 	bl	8008d90 <xTaskPriorityDisinherit>
 8007e6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	609a      	str	r2, [r3, #8]
 8007e74:	e043      	b.n	8007efe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d119      	bne.n	8007eb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6858      	ldr	r0, [r3, #4]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e84:	461a      	mov	r2, r3
 8007e86:	68b9      	ldr	r1, [r7, #8]
 8007e88:	f002 f81a 	bl	8009ec0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e94:	441a      	add	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d32b      	bcc.n	8007efe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	605a      	str	r2, [r3, #4]
 8007eae:	e026      	b.n	8007efe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	68d8      	ldr	r0, [r3, #12]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb8:	461a      	mov	r2, r3
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	f002 f800 	bl	8009ec0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	425b      	negs	r3, r3
 8007eca:	441a      	add	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d207      	bcs.n	8007eec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	425b      	negs	r3, r3
 8007ee6:	441a      	add	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d105      	bne.n	8007efe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d002      	beq.n	8007efe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	1c5a      	adds	r2, r3, #1
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f06:	697b      	ldr	r3, [r7, #20]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d018      	beq.n	8007f54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	441a      	add	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68da      	ldr	r2, [r3, #12]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d303      	bcc.n	8007f44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68d9      	ldr	r1, [r3, #12]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6838      	ldr	r0, [r7, #0]
 8007f50:	f001 ffb6 	bl	8009ec0 <memcpy>
	}
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f64:	f001 fc4e 	bl	8009804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f70:	e011      	b.n	8007f96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d012      	beq.n	8007fa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	3324      	adds	r3, #36	; 0x24
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fd2a 	bl	80089d8 <xTaskRemoveFromEventList>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f8a:	f000 fe01 	bl	8008b90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	dce9      	bgt.n	8007f72 <prvUnlockQueue+0x16>
 8007f9e:	e000      	b.n	8007fa2 <prvUnlockQueue+0x46>
					break;
 8007fa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	22ff      	movs	r2, #255	; 0xff
 8007fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007faa:	f001 fc5b 	bl	8009864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007fae:	f001 fc29 	bl	8009804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fba:	e011      	b.n	8007fe0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d012      	beq.n	8007fea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3310      	adds	r3, #16
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 fd05 	bl	80089d8 <xTaskRemoveFromEventList>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007fd4:	f000 fddc 	bl	8008b90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	dce9      	bgt.n	8007fbc <prvUnlockQueue+0x60>
 8007fe8:	e000      	b.n	8007fec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	22ff      	movs	r2, #255	; 0xff
 8007ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007ff4:	f001 fc36 	bl	8009864 <vPortExitCritical>
}
 8007ff8:	bf00      	nop
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008008:	f001 fbfc 	bl	8009804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	2b00      	cmp	r3, #0
 8008012:	d102      	bne.n	800801a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008014:	2301      	movs	r3, #1
 8008016:	60fb      	str	r3, [r7, #12]
 8008018:	e001      	b.n	800801e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800801a:	2300      	movs	r3, #0
 800801c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800801e:	f001 fc21 	bl	8009864 <vPortExitCritical>

	return xReturn;
 8008022:	68fb      	ldr	r3, [r7, #12]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008034:	f001 fbe6 	bl	8009804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008040:	429a      	cmp	r2, r3
 8008042:	d102      	bne.n	800804a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008044:	2301      	movs	r3, #1
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	e001      	b.n	800804e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800804e:	f001 fc09 	bl	8009864 <vPortExitCritical>

	return xReturn;
 8008052:	68fb      	ldr	r3, [r7, #12]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008066:	2300      	movs	r3, #0
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	e014      	b.n	8008096 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800806c:	4a0f      	ldr	r2, [pc, #60]	; (80080ac <vQueueAddToRegistry+0x50>)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10b      	bne.n	8008090 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008078:	490c      	ldr	r1, [pc, #48]	; (80080ac <vQueueAddToRegistry+0x50>)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008082:	4a0a      	ldr	r2, [pc, #40]	; (80080ac <vQueueAddToRegistry+0x50>)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	4413      	add	r3, r2
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800808e:	e006      	b.n	800809e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3301      	adds	r3, #1
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b07      	cmp	r3, #7
 800809a:	d9e7      	bls.n	800806c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800809c:	bf00      	nop
 800809e:	bf00      	nop
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	20005504 	.word	0x20005504

080080b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80080c0:	f001 fba0 	bl	8009804 <vPortEnterCritical>
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ca:	b25b      	sxtb	r3, r3
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d0:	d103      	bne.n	80080da <vQueueWaitForMessageRestricted+0x2a>
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080e0:	b25b      	sxtb	r3, r3
 80080e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e6:	d103      	bne.n	80080f0 <vQueueWaitForMessageRestricted+0x40>
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080f0:	f001 fbb8 	bl	8009864 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d106      	bne.n	800810a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	3324      	adds	r3, #36	; 0x24
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fc3b 	bl	8008980 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800810a:	6978      	ldr	r0, [r7, #20]
 800810c:	f7ff ff26 	bl	8007f5c <prvUnlockQueue>
	}
 8008110:	bf00      	nop
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08e      	sub	sp, #56	; 0x38
 800811c:	af04      	add	r7, sp, #16
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <xTaskCreateStatic+0x2a>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	623b      	str	r3, [r7, #32]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10a      	bne.n	800815e <xTaskCreateStatic+0x46>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	61fb      	str	r3, [r7, #28]
}
 800815a:	bf00      	nop
 800815c:	e7fe      	b.n	800815c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800815e:	235c      	movs	r3, #92	; 0x5c
 8008160:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2b5c      	cmp	r3, #92	; 0x5c
 8008166:	d00a      	beq.n	800817e <xTaskCreateStatic+0x66>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	61bb      	str	r3, [r7, #24]
}
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800817e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	2b00      	cmp	r3, #0
 8008184:	d01e      	beq.n	80081c4 <xTaskCreateStatic+0xac>
 8008186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008188:	2b00      	cmp	r3, #0
 800818a:	d01b      	beq.n	80081c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008194:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	2202      	movs	r2, #2
 800819a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800819e:	2300      	movs	r3, #0
 80081a0:	9303      	str	r3, [sp, #12]
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	9302      	str	r3, [sp, #8]
 80081a6:	f107 0314 	add.w	r3, r7, #20
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 f850 	bl	800825c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80081be:	f000 f8dd 	bl	800837c <prvAddNewTaskToReadyList>
 80081c2:	e001      	b.n	80081c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80081c8:	697b      	ldr	r3, [r7, #20]
	}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3728      	adds	r7, #40	; 0x28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b08c      	sub	sp, #48	; 0x30
 80081d6:	af04      	add	r7, sp, #16
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	603b      	str	r3, [r7, #0]
 80081de:	4613      	mov	r3, r2
 80081e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081e2:	88fb      	ldrh	r3, [r7, #6]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fc2e 	bl	8009a48 <pvPortMalloc>
 80081ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00e      	beq.n	8008212 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081f4:	205c      	movs	r0, #92	; 0x5c
 80081f6:	f001 fc27 	bl	8009a48 <pvPortMalloc>
 80081fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	631a      	str	r2, [r3, #48]	; 0x30
 8008208:	e005      	b.n	8008216 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800820a:	6978      	ldr	r0, [r7, #20]
 800820c:	f001 fce8 	bl	8009be0 <vPortFree>
 8008210:	e001      	b.n	8008216 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008212:	2300      	movs	r3, #0
 8008214:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d017      	beq.n	800824c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008224:	88fa      	ldrh	r2, [r7, #6]
 8008226:	2300      	movs	r3, #0
 8008228:	9303      	str	r3, [sp, #12]
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	9302      	str	r3, [sp, #8]
 800822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008230:	9301      	str	r3, [sp, #4]
 8008232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 f80e 	bl	800825c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008240:	69f8      	ldr	r0, [r7, #28]
 8008242:	f000 f89b 	bl	800837c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008246:	2301      	movs	r3, #1
 8008248:	61bb      	str	r3, [r7, #24]
 800824a:	e002      	b.n	8008252 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800824c:	f04f 33ff 	mov.w	r3, #4294967295
 8008250:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008252:	69bb      	ldr	r3, [r7, #24]
	}
 8008254:	4618      	mov	r0, r3
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	461a      	mov	r2, r3
 8008274:	21a5      	movs	r1, #165	; 0xa5
 8008276:	f001 fe31 	bl	8009edc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008284:	3b01      	subs	r3, #1
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	f023 0307 	bic.w	r3, r3, #7
 8008292:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800829e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	617b      	str	r3, [r7, #20]
}
 80082b0:	bf00      	nop
 80082b2:	e7fe      	b.n	80082b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01f      	beq.n	80082fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082ba:	2300      	movs	r3, #0
 80082bc:	61fb      	str	r3, [r7, #28]
 80082be:	e012      	b.n	80082e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	7819      	ldrb	r1, [r3, #0]
 80082c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	4413      	add	r3, r2
 80082ce:	3334      	adds	r3, #52	; 0x34
 80082d0:	460a      	mov	r2, r1
 80082d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	4413      	add	r3, r2
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d006      	beq.n	80082ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	3301      	adds	r3, #1
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	2b0f      	cmp	r3, #15
 80082ea:	d9e9      	bls.n	80082c0 <prvInitialiseNewTask+0x64>
 80082ec:	e000      	b.n	80082f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80082ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082f8:	e003      	b.n	8008302 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	2b37      	cmp	r3, #55	; 0x37
 8008306:	d901      	bls.n	800830c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008308:	2337      	movs	r3, #55	; 0x37
 800830a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008310:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008316:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	2200      	movs	r2, #0
 800831c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	3304      	adds	r3, #4
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff f978 	bl	8007618 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	3318      	adds	r3, #24
 800832c:	4618      	mov	r0, r3
 800832e:	f7ff f973 	bl	8007618 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008336:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800833e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008340:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008346:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	2200      	movs	r2, #0
 800834c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	68f9      	ldr	r1, [r7, #12]
 800835a:	69b8      	ldr	r0, [r7, #24]
 800835c:	f001 f928 	bl	80095b0 <pxPortInitialiseStack>
 8008360:	4602      	mov	r2, r0
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008370:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008372:	bf00      	nop
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008384:	f001 fa3e 	bl	8009804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008388:	4b2d      	ldr	r3, [pc, #180]	; (8008440 <prvAddNewTaskToReadyList+0xc4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3301      	adds	r3, #1
 800838e:	4a2c      	ldr	r2, [pc, #176]	; (8008440 <prvAddNewTaskToReadyList+0xc4>)
 8008390:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008392:	4b2c      	ldr	r3, [pc, #176]	; (8008444 <prvAddNewTaskToReadyList+0xc8>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d109      	bne.n	80083ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800839a:	4a2a      	ldr	r2, [pc, #168]	; (8008444 <prvAddNewTaskToReadyList+0xc8>)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80083a0:	4b27      	ldr	r3, [pc, #156]	; (8008440 <prvAddNewTaskToReadyList+0xc4>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d110      	bne.n	80083ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80083a8:	f000 fc16 	bl	8008bd8 <prvInitialiseTaskLists>
 80083ac:	e00d      	b.n	80083ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80083ae:	4b26      	ldr	r3, [pc, #152]	; (8008448 <prvAddNewTaskToReadyList+0xcc>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d109      	bne.n	80083ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083b6:	4b23      	ldr	r3, [pc, #140]	; (8008444 <prvAddNewTaskToReadyList+0xc8>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d802      	bhi.n	80083ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083c4:	4a1f      	ldr	r2, [pc, #124]	; (8008444 <prvAddNewTaskToReadyList+0xc8>)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083ca:	4b20      	ldr	r3, [pc, #128]	; (800844c <prvAddNewTaskToReadyList+0xd0>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3301      	adds	r3, #1
 80083d0:	4a1e      	ldr	r2, [pc, #120]	; (800844c <prvAddNewTaskToReadyList+0xd0>)
 80083d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083d4:	4b1d      	ldr	r3, [pc, #116]	; (800844c <prvAddNewTaskToReadyList+0xd0>)
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e0:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <prvAddNewTaskToReadyList+0xd4>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d903      	bls.n	80083f0 <prvAddNewTaskToReadyList+0x74>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	4a18      	ldr	r2, [pc, #96]	; (8008450 <prvAddNewTaskToReadyList+0xd4>)
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f4:	4613      	mov	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4a15      	ldr	r2, [pc, #84]	; (8008454 <prvAddNewTaskToReadyList+0xd8>)
 80083fe:	441a      	add	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3304      	adds	r3, #4
 8008404:	4619      	mov	r1, r3
 8008406:	4610      	mov	r0, r2
 8008408:	f7ff f913 	bl	8007632 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800840c:	f001 fa2a 	bl	8009864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008410:	4b0d      	ldr	r3, [pc, #52]	; (8008448 <prvAddNewTaskToReadyList+0xcc>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00e      	beq.n	8008436 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008418:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <prvAddNewTaskToReadyList+0xc8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	429a      	cmp	r2, r3
 8008424:	d207      	bcs.n	8008436 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008426:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <prvAddNewTaskToReadyList+0xdc>)
 8008428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	20000e44 	.word	0x20000e44
 8008444:	20000970 	.word	0x20000970
 8008448:	20000e50 	.word	0x20000e50
 800844c:	20000e60 	.word	0x20000e60
 8008450:	20000e4c 	.word	0x20000e4c
 8008454:	20000974 	.word	0x20000974
 8008458:	e000ed04 	.word	0xe000ed04

0800845c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008464:	2300      	movs	r3, #0
 8008466:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d017      	beq.n	800849e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800846e:	4b13      	ldr	r3, [pc, #76]	; (80084bc <vTaskDelay+0x60>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <vTaskDelay+0x30>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	60bb      	str	r3, [r7, #8]
}
 8008488:	bf00      	nop
 800848a:	e7fe      	b.n	800848a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800848c:	f000 f880 	bl	8008590 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008490:	2100      	movs	r1, #0
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fcea 	bl	8008e6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008498:	f000 f888 	bl	80085ac <xTaskResumeAll>
 800849c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d107      	bne.n	80084b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80084a4:	4b06      	ldr	r3, [pc, #24]	; (80084c0 <vTaskDelay+0x64>)
 80084a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084b4:	bf00      	nop
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	20000e6c 	.word	0x20000e6c
 80084c0:	e000ed04 	.word	0xe000ed04

080084c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08a      	sub	sp, #40	; 0x28
 80084c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084ce:	2300      	movs	r3, #0
 80084d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084d2:	463a      	mov	r2, r7
 80084d4:	1d39      	adds	r1, r7, #4
 80084d6:	f107 0308 	add.w	r3, r7, #8
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff f848 	bl	8007570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	9202      	str	r2, [sp, #8]
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	2300      	movs	r3, #0
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	2300      	movs	r3, #0
 80084f0:	460a      	mov	r2, r1
 80084f2:	4921      	ldr	r1, [pc, #132]	; (8008578 <vTaskStartScheduler+0xb4>)
 80084f4:	4821      	ldr	r0, [pc, #132]	; (800857c <vTaskStartScheduler+0xb8>)
 80084f6:	f7ff fe0f 	bl	8008118 <xTaskCreateStatic>
 80084fa:	4603      	mov	r3, r0
 80084fc:	4a20      	ldr	r2, [pc, #128]	; (8008580 <vTaskStartScheduler+0xbc>)
 80084fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008500:	4b1f      	ldr	r3, [pc, #124]	; (8008580 <vTaskStartScheduler+0xbc>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008508:	2301      	movs	r3, #1
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	e001      	b.n	8008512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d102      	bne.n	800851e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008518:	f000 fcfc 	bl	8008f14 <xTimerCreateTimerTask>
 800851c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d116      	bne.n	8008552 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	613b      	str	r3, [r7, #16]
}
 8008536:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008538:	4b12      	ldr	r3, [pc, #72]	; (8008584 <vTaskStartScheduler+0xc0>)
 800853a:	f04f 32ff 	mov.w	r2, #4294967295
 800853e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008540:	4b11      	ldr	r3, [pc, #68]	; (8008588 <vTaskStartScheduler+0xc4>)
 8008542:	2201      	movs	r2, #1
 8008544:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008546:	4b11      	ldr	r3, [pc, #68]	; (800858c <vTaskStartScheduler+0xc8>)
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800854c:	f001 f8b8 	bl	80096c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008550:	e00e      	b.n	8008570 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d10a      	bne.n	8008570 <vTaskStartScheduler+0xac>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	60fb      	str	r3, [r7, #12]
}
 800856c:	bf00      	nop
 800856e:	e7fe      	b.n	800856e <vTaskStartScheduler+0xaa>
}
 8008570:	bf00      	nop
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	0800e2d8 	.word	0x0800e2d8
 800857c:	08008ba9 	.word	0x08008ba9
 8008580:	20000e68 	.word	0x20000e68
 8008584:	20000e64 	.word	0x20000e64
 8008588:	20000e50 	.word	0x20000e50
 800858c:	20000e48 	.word	0x20000e48

08008590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008590:	b480      	push	{r7}
 8008592:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008594:	4b04      	ldr	r3, [pc, #16]	; (80085a8 <vTaskSuspendAll+0x18>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3301      	adds	r3, #1
 800859a:	4a03      	ldr	r2, [pc, #12]	; (80085a8 <vTaskSuspendAll+0x18>)
 800859c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800859e:	bf00      	nop
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	20000e6c 	.word	0x20000e6c

080085ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085ba:	4b42      	ldr	r3, [pc, #264]	; (80086c4 <xTaskResumeAll+0x118>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10a      	bne.n	80085d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	603b      	str	r3, [r7, #0]
}
 80085d4:	bf00      	nop
 80085d6:	e7fe      	b.n	80085d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085d8:	f001 f914 	bl	8009804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085dc:	4b39      	ldr	r3, [pc, #228]	; (80086c4 <xTaskResumeAll+0x118>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3b01      	subs	r3, #1
 80085e2:	4a38      	ldr	r2, [pc, #224]	; (80086c4 <xTaskResumeAll+0x118>)
 80085e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085e6:	4b37      	ldr	r3, [pc, #220]	; (80086c4 <xTaskResumeAll+0x118>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d162      	bne.n	80086b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085ee:	4b36      	ldr	r3, [pc, #216]	; (80086c8 <xTaskResumeAll+0x11c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d05e      	beq.n	80086b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085f6:	e02f      	b.n	8008658 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085f8:	4b34      	ldr	r3, [pc, #208]	; (80086cc <xTaskResumeAll+0x120>)
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3318      	adds	r3, #24
 8008604:	4618      	mov	r0, r3
 8008606:	f7ff f871 	bl	80076ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3304      	adds	r3, #4
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff f86c 	bl	80076ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008618:	4b2d      	ldr	r3, [pc, #180]	; (80086d0 <xTaskResumeAll+0x124>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d903      	bls.n	8008628 <xTaskResumeAll+0x7c>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	4a2a      	ldr	r2, [pc, #168]	; (80086d0 <xTaskResumeAll+0x124>)
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4a27      	ldr	r2, [pc, #156]	; (80086d4 <xTaskResumeAll+0x128>)
 8008636:	441a      	add	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3304      	adds	r3, #4
 800863c:	4619      	mov	r1, r3
 800863e:	4610      	mov	r0, r2
 8008640:	f7fe fff7 	bl	8007632 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008648:	4b23      	ldr	r3, [pc, #140]	; (80086d8 <xTaskResumeAll+0x12c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	429a      	cmp	r2, r3
 8008650:	d302      	bcc.n	8008658 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008652:	4b22      	ldr	r3, [pc, #136]	; (80086dc <xTaskResumeAll+0x130>)
 8008654:	2201      	movs	r2, #1
 8008656:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008658:	4b1c      	ldr	r3, [pc, #112]	; (80086cc <xTaskResumeAll+0x120>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1cb      	bne.n	80085f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d001      	beq.n	800866a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008666:	f000 fb55 	bl	8008d14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800866a:	4b1d      	ldr	r3, [pc, #116]	; (80086e0 <xTaskResumeAll+0x134>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d010      	beq.n	8008698 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008676:	f000 f847 	bl	8008708 <xTaskIncrementTick>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008680:	4b16      	ldr	r3, [pc, #88]	; (80086dc <xTaskResumeAll+0x130>)
 8008682:	2201      	movs	r2, #1
 8008684:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3b01      	subs	r3, #1
 800868a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f1      	bne.n	8008676 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008692:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <xTaskResumeAll+0x134>)
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008698:	4b10      	ldr	r3, [pc, #64]	; (80086dc <xTaskResumeAll+0x130>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d009      	beq.n	80086b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086a0:	2301      	movs	r3, #1
 80086a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086a4:	4b0f      	ldr	r3, [pc, #60]	; (80086e4 <xTaskResumeAll+0x138>)
 80086a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086b4:	f001 f8d6 	bl	8009864 <vPortExitCritical>

	return xAlreadyYielded;
 80086b8:	68bb      	ldr	r3, [r7, #8]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20000e6c 	.word	0x20000e6c
 80086c8:	20000e44 	.word	0x20000e44
 80086cc:	20000e04 	.word	0x20000e04
 80086d0:	20000e4c 	.word	0x20000e4c
 80086d4:	20000974 	.word	0x20000974
 80086d8:	20000970 	.word	0x20000970
 80086dc:	20000e58 	.word	0x20000e58
 80086e0:	20000e54 	.word	0x20000e54
 80086e4:	e000ed04 	.word	0xe000ed04

080086e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <xTaskGetTickCount+0x1c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086f4:	687b      	ldr	r3, [r7, #4]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20000e48 	.word	0x20000e48

08008708 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800870e:	2300      	movs	r3, #0
 8008710:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008712:	4b4f      	ldr	r3, [pc, #316]	; (8008850 <xTaskIncrementTick+0x148>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	f040 808f 	bne.w	800883a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800871c:	4b4d      	ldr	r3, [pc, #308]	; (8008854 <xTaskIncrementTick+0x14c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3301      	adds	r3, #1
 8008722:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008724:	4a4b      	ldr	r2, [pc, #300]	; (8008854 <xTaskIncrementTick+0x14c>)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d120      	bne.n	8008772 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008730:	4b49      	ldr	r3, [pc, #292]	; (8008858 <xTaskIncrementTick+0x150>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00a      	beq.n	8008750 <xTaskIncrementTick+0x48>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	603b      	str	r3, [r7, #0]
}
 800874c:	bf00      	nop
 800874e:	e7fe      	b.n	800874e <xTaskIncrementTick+0x46>
 8008750:	4b41      	ldr	r3, [pc, #260]	; (8008858 <xTaskIncrementTick+0x150>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	60fb      	str	r3, [r7, #12]
 8008756:	4b41      	ldr	r3, [pc, #260]	; (800885c <xTaskIncrementTick+0x154>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a3f      	ldr	r2, [pc, #252]	; (8008858 <xTaskIncrementTick+0x150>)
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	4a3f      	ldr	r2, [pc, #252]	; (800885c <xTaskIncrementTick+0x154>)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	4b3e      	ldr	r3, [pc, #248]	; (8008860 <xTaskIncrementTick+0x158>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3301      	adds	r3, #1
 800876a:	4a3d      	ldr	r2, [pc, #244]	; (8008860 <xTaskIncrementTick+0x158>)
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	f000 fad1 	bl	8008d14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008772:	4b3c      	ldr	r3, [pc, #240]	; (8008864 <xTaskIncrementTick+0x15c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	429a      	cmp	r2, r3
 800877a:	d349      	bcc.n	8008810 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800877c:	4b36      	ldr	r3, [pc, #216]	; (8008858 <xTaskIncrementTick+0x150>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d104      	bne.n	8008790 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008786:	4b37      	ldr	r3, [pc, #220]	; (8008864 <xTaskIncrementTick+0x15c>)
 8008788:	f04f 32ff 	mov.w	r2, #4294967295
 800878c:	601a      	str	r2, [r3, #0]
					break;
 800878e:	e03f      	b.n	8008810 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008790:	4b31      	ldr	r3, [pc, #196]	; (8008858 <xTaskIncrementTick+0x150>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d203      	bcs.n	80087b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087a8:	4a2e      	ldr	r2, [pc, #184]	; (8008864 <xTaskIncrementTick+0x15c>)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087ae:	e02f      	b.n	8008810 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	3304      	adds	r3, #4
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe ff99 	bl	80076ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d004      	beq.n	80087cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	3318      	adds	r3, #24
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe ff90 	bl	80076ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d0:	4b25      	ldr	r3, [pc, #148]	; (8008868 <xTaskIncrementTick+0x160>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d903      	bls.n	80087e0 <xTaskIncrementTick+0xd8>
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087dc:	4a22      	ldr	r2, [pc, #136]	; (8008868 <xTaskIncrementTick+0x160>)
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e4:	4613      	mov	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4a1f      	ldr	r2, [pc, #124]	; (800886c <xTaskIncrementTick+0x164>)
 80087ee:	441a      	add	r2, r3
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4619      	mov	r1, r3
 80087f6:	4610      	mov	r0, r2
 80087f8:	f7fe ff1b 	bl	8007632 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008800:	4b1b      	ldr	r3, [pc, #108]	; (8008870 <xTaskIncrementTick+0x168>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008806:	429a      	cmp	r2, r3
 8008808:	d3b8      	bcc.n	800877c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800880a:	2301      	movs	r3, #1
 800880c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800880e:	e7b5      	b.n	800877c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008810:	4b17      	ldr	r3, [pc, #92]	; (8008870 <xTaskIncrementTick+0x168>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008816:	4915      	ldr	r1, [pc, #84]	; (800886c <xTaskIncrementTick+0x164>)
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d901      	bls.n	800882c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800882c:	4b11      	ldr	r3, [pc, #68]	; (8008874 <xTaskIncrementTick+0x16c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d007      	beq.n	8008844 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008834:	2301      	movs	r3, #1
 8008836:	617b      	str	r3, [r7, #20]
 8008838:	e004      	b.n	8008844 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <xTaskIncrementTick+0x170>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3301      	adds	r3, #1
 8008840:	4a0d      	ldr	r2, [pc, #52]	; (8008878 <xTaskIncrementTick+0x170>)
 8008842:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008844:	697b      	ldr	r3, [r7, #20]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	20000e6c 	.word	0x20000e6c
 8008854:	20000e48 	.word	0x20000e48
 8008858:	20000dfc 	.word	0x20000dfc
 800885c:	20000e00 	.word	0x20000e00
 8008860:	20000e5c 	.word	0x20000e5c
 8008864:	20000e64 	.word	0x20000e64
 8008868:	20000e4c 	.word	0x20000e4c
 800886c:	20000974 	.word	0x20000974
 8008870:	20000970 	.word	0x20000970
 8008874:	20000e58 	.word	0x20000e58
 8008878:	20000e54 	.word	0x20000e54

0800887c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008882:	4b28      	ldr	r3, [pc, #160]	; (8008924 <vTaskSwitchContext+0xa8>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800888a:	4b27      	ldr	r3, [pc, #156]	; (8008928 <vTaskSwitchContext+0xac>)
 800888c:	2201      	movs	r2, #1
 800888e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008890:	e041      	b.n	8008916 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008892:	4b25      	ldr	r3, [pc, #148]	; (8008928 <vTaskSwitchContext+0xac>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008898:	4b24      	ldr	r3, [pc, #144]	; (800892c <vTaskSwitchContext+0xb0>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	60fb      	str	r3, [r7, #12]
 800889e:	e010      	b.n	80088c2 <vTaskSwitchContext+0x46>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10a      	bne.n	80088bc <vTaskSwitchContext+0x40>
	__asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	607b      	str	r3, [r7, #4]
}
 80088b8:	bf00      	nop
 80088ba:	e7fe      	b.n	80088ba <vTaskSwitchContext+0x3e>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3b01      	subs	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	491b      	ldr	r1, [pc, #108]	; (8008930 <vTaskSwitchContext+0xb4>)
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4613      	mov	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	440b      	add	r3, r1
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d0e4      	beq.n	80088a0 <vTaskSwitchContext+0x24>
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4613      	mov	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4a13      	ldr	r2, [pc, #76]	; (8008930 <vTaskSwitchContext+0xb4>)
 80088e2:	4413      	add	r3, r2
 80088e4:	60bb      	str	r3, [r7, #8]
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	605a      	str	r2, [r3, #4]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	3308      	adds	r3, #8
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d104      	bne.n	8008906 <vTaskSwitchContext+0x8a>
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	605a      	str	r2, [r3, #4]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	4a09      	ldr	r2, [pc, #36]	; (8008934 <vTaskSwitchContext+0xb8>)
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	4a06      	ldr	r2, [pc, #24]	; (800892c <vTaskSwitchContext+0xb0>)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6013      	str	r3, [r2, #0]
}
 8008916:	bf00      	nop
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000e6c 	.word	0x20000e6c
 8008928:	20000e58 	.word	0x20000e58
 800892c:	20000e4c 	.word	0x20000e4c
 8008930:	20000974 	.word	0x20000974
 8008934:	20000970 	.word	0x20000970

08008938 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10a      	bne.n	800895e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	60fb      	str	r3, [r7, #12]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800895e:	4b07      	ldr	r3, [pc, #28]	; (800897c <vTaskPlaceOnEventList+0x44>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3318      	adds	r3, #24
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7fe fe87 	bl	800767a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800896c:	2101      	movs	r1, #1
 800896e:	6838      	ldr	r0, [r7, #0]
 8008970:	f000 fa7c 	bl	8008e6c <prvAddCurrentTaskToDelayedList>
}
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	20000970 	.word	0x20000970

08008980 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10a      	bne.n	80089a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	617b      	str	r3, [r7, #20]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089a8:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3318      	adds	r3, #24
 80089ae:	4619      	mov	r1, r3
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f7fe fe3e 	bl	8007632 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80089bc:	f04f 33ff 	mov.w	r3, #4294967295
 80089c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	68b8      	ldr	r0, [r7, #8]
 80089c6:	f000 fa51 	bl	8008e6c <prvAddCurrentTaskToDelayedList>
	}
 80089ca:	bf00      	nop
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000970 	.word	0x20000970

080089d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10a      	bne.n	8008a04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	60fb      	str	r3, [r7, #12]
}
 8008a00:	bf00      	nop
 8008a02:	e7fe      	b.n	8008a02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	3318      	adds	r3, #24
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fe fe6f 	bl	80076ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a0e:	4b1e      	ldr	r3, [pc, #120]	; (8008a88 <xTaskRemoveFromEventList+0xb0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d11d      	bne.n	8008a52 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fe66 	bl	80076ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a24:	4b19      	ldr	r3, [pc, #100]	; (8008a8c <xTaskRemoveFromEventList+0xb4>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d903      	bls.n	8008a34 <xTaskRemoveFromEventList+0x5c>
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a30:	4a16      	ldr	r2, [pc, #88]	; (8008a8c <xTaskRemoveFromEventList+0xb4>)
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4a13      	ldr	r2, [pc, #76]	; (8008a90 <xTaskRemoveFromEventList+0xb8>)
 8008a42:	441a      	add	r2, r3
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	3304      	adds	r3, #4
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	f7fe fdf1 	bl	8007632 <vListInsertEnd>
 8008a50:	e005      	b.n	8008a5e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	3318      	adds	r3, #24
 8008a56:	4619      	mov	r1, r3
 8008a58:	480e      	ldr	r0, [pc, #56]	; (8008a94 <xTaskRemoveFromEventList+0xbc>)
 8008a5a:	f7fe fdea 	bl	8007632 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a62:	4b0d      	ldr	r3, [pc, #52]	; (8008a98 <xTaskRemoveFromEventList+0xc0>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d905      	bls.n	8008a78 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a70:	4b0a      	ldr	r3, [pc, #40]	; (8008a9c <xTaskRemoveFromEventList+0xc4>)
 8008a72:	2201      	movs	r2, #1
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	e001      	b.n	8008a7c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a7c:	697b      	ldr	r3, [r7, #20]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20000e6c 	.word	0x20000e6c
 8008a8c:	20000e4c 	.word	0x20000e4c
 8008a90:	20000974 	.word	0x20000974
 8008a94:	20000e04 	.word	0x20000e04
 8008a98:	20000970 	.word	0x20000970
 8008a9c:	20000e58 	.word	0x20000e58

08008aa0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008aa8:	4b06      	ldr	r3, [pc, #24]	; (8008ac4 <vTaskInternalSetTimeOutState+0x24>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ab0:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <vTaskInternalSetTimeOutState+0x28>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	605a      	str	r2, [r3, #4]
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	20000e5c 	.word	0x20000e5c
 8008ac8:	20000e48 	.word	0x20000e48

08008acc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10a      	bne.n	8008af2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae0:	f383 8811 	msr	BASEPRI, r3
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	613b      	str	r3, [r7, #16]
}
 8008aee:	bf00      	nop
 8008af0:	e7fe      	b.n	8008af0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10a      	bne.n	8008b0e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	60fb      	str	r3, [r7, #12]
}
 8008b0a:	bf00      	nop
 8008b0c:	e7fe      	b.n	8008b0c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008b0e:	f000 fe79 	bl	8009804 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b12:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <xTaskCheckForTimeOut+0xbc>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2a:	d102      	bne.n	8008b32 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61fb      	str	r3, [r7, #28]
 8008b30:	e023      	b.n	8008b7a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	4b15      	ldr	r3, [pc, #84]	; (8008b8c <xTaskCheckForTimeOut+0xc0>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d007      	beq.n	8008b4e <xTaskCheckForTimeOut+0x82>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	69ba      	ldr	r2, [r7, #24]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d302      	bcc.n	8008b4e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	61fb      	str	r3, [r7, #28]
 8008b4c:	e015      	b.n	8008b7a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d20b      	bcs.n	8008b70 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f7ff ff9b 	bl	8008aa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
 8008b6e:	e004      	b.n	8008b7a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2200      	movs	r2, #0
 8008b74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b76:	2301      	movs	r3, #1
 8008b78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b7a:	f000 fe73 	bl	8009864 <vPortExitCritical>

	return xReturn;
 8008b7e:	69fb      	ldr	r3, [r7, #28]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3720      	adds	r7, #32
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	20000e48 	.word	0x20000e48
 8008b8c:	20000e5c 	.word	0x20000e5c

08008b90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b94:	4b03      	ldr	r3, [pc, #12]	; (8008ba4 <vTaskMissedYield+0x14>)
 8008b96:	2201      	movs	r2, #1
 8008b98:	601a      	str	r2, [r3, #0]
}
 8008b9a:	bf00      	nop
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	20000e58 	.word	0x20000e58

08008ba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bb0:	f000 f852 	bl	8008c58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bb4:	4b06      	ldr	r3, [pc, #24]	; (8008bd0 <prvIdleTask+0x28>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d9f9      	bls.n	8008bb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bbc:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <prvIdleTask+0x2c>)
 8008bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bcc:	e7f0      	b.n	8008bb0 <prvIdleTask+0x8>
 8008bce:	bf00      	nop
 8008bd0:	20000974 	.word	0x20000974
 8008bd4:	e000ed04 	.word	0xe000ed04

08008bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bde:	2300      	movs	r3, #0
 8008be0:	607b      	str	r3, [r7, #4]
 8008be2:	e00c      	b.n	8008bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4a12      	ldr	r2, [pc, #72]	; (8008c38 <prvInitialiseTaskLists+0x60>)
 8008bf0:	4413      	add	r3, r2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fcf0 	bl	80075d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	607b      	str	r3, [r7, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b37      	cmp	r3, #55	; 0x37
 8008c02:	d9ef      	bls.n	8008be4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c04:	480d      	ldr	r0, [pc, #52]	; (8008c3c <prvInitialiseTaskLists+0x64>)
 8008c06:	f7fe fce7 	bl	80075d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c0a:	480d      	ldr	r0, [pc, #52]	; (8008c40 <prvInitialiseTaskLists+0x68>)
 8008c0c:	f7fe fce4 	bl	80075d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c10:	480c      	ldr	r0, [pc, #48]	; (8008c44 <prvInitialiseTaskLists+0x6c>)
 8008c12:	f7fe fce1 	bl	80075d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c16:	480c      	ldr	r0, [pc, #48]	; (8008c48 <prvInitialiseTaskLists+0x70>)
 8008c18:	f7fe fcde 	bl	80075d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c1c:	480b      	ldr	r0, [pc, #44]	; (8008c4c <prvInitialiseTaskLists+0x74>)
 8008c1e:	f7fe fcdb 	bl	80075d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c22:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <prvInitialiseTaskLists+0x78>)
 8008c24:	4a05      	ldr	r2, [pc, #20]	; (8008c3c <prvInitialiseTaskLists+0x64>)
 8008c26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c28:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <prvInitialiseTaskLists+0x7c>)
 8008c2a:	4a05      	ldr	r2, [pc, #20]	; (8008c40 <prvInitialiseTaskLists+0x68>)
 8008c2c:	601a      	str	r2, [r3, #0]
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20000974 	.word	0x20000974
 8008c3c:	20000dd4 	.word	0x20000dd4
 8008c40:	20000de8 	.word	0x20000de8
 8008c44:	20000e04 	.word	0x20000e04
 8008c48:	20000e18 	.word	0x20000e18
 8008c4c:	20000e30 	.word	0x20000e30
 8008c50:	20000dfc 	.word	0x20000dfc
 8008c54:	20000e00 	.word	0x20000e00

08008c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c5e:	e019      	b.n	8008c94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c60:	f000 fdd0 	bl	8009804 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c64:	4b10      	ldr	r3, [pc, #64]	; (8008ca8 <prvCheckTasksWaitingTermination+0x50>)
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fe fd3b 	bl	80076ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c76:	4b0d      	ldr	r3, [pc, #52]	; (8008cac <prvCheckTasksWaitingTermination+0x54>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	4a0b      	ldr	r2, [pc, #44]	; (8008cac <prvCheckTasksWaitingTermination+0x54>)
 8008c7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c80:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <prvCheckTasksWaitingTermination+0x58>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	4a0a      	ldr	r2, [pc, #40]	; (8008cb0 <prvCheckTasksWaitingTermination+0x58>)
 8008c88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c8a:	f000 fdeb 	bl	8009864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f810 	bl	8008cb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c94:	4b06      	ldr	r3, [pc, #24]	; (8008cb0 <prvCheckTasksWaitingTermination+0x58>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1e1      	bne.n	8008c60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c9c:	bf00      	nop
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000e18 	.word	0x20000e18
 8008cac:	20000e44 	.word	0x20000e44
 8008cb0:	20000e2c 	.word	0x20000e2c

08008cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d108      	bne.n	8008cd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 ff88 	bl	8009be0 <vPortFree>
				vPortFree( pxTCB );
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 ff85 	bl	8009be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cd6:	e018      	b.n	8008d0a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d103      	bne.n	8008cea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 ff7c 	bl	8009be0 <vPortFree>
	}
 8008ce8:	e00f      	b.n	8008d0a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d00a      	beq.n	8008d0a <prvDeleteTCB+0x56>
	__asm volatile
 8008cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf8:	f383 8811 	msr	BASEPRI, r3
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	60fb      	str	r3, [r7, #12]
}
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <prvDeleteTCB+0x54>
	}
 8008d0a:	bf00      	nop
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d1a:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <prvResetNextTaskUnblockTime+0x38>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d24:	4b0a      	ldr	r3, [pc, #40]	; (8008d50 <prvResetNextTaskUnblockTime+0x3c>)
 8008d26:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d2c:	e008      	b.n	8008d40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <prvResetNextTaskUnblockTime+0x38>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	4a04      	ldr	r2, [pc, #16]	; (8008d50 <prvResetNextTaskUnblockTime+0x3c>)
 8008d3e:	6013      	str	r3, [r2, #0]
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	20000dfc 	.word	0x20000dfc
 8008d50:	20000e64 	.word	0x20000e64

08008d54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d5a:	4b0b      	ldr	r3, [pc, #44]	; (8008d88 <xTaskGetSchedulerState+0x34>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d102      	bne.n	8008d68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d62:	2301      	movs	r3, #1
 8008d64:	607b      	str	r3, [r7, #4]
 8008d66:	e008      	b.n	8008d7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d68:	4b08      	ldr	r3, [pc, #32]	; (8008d8c <xTaskGetSchedulerState+0x38>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d102      	bne.n	8008d76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d70:	2302      	movs	r3, #2
 8008d72:	607b      	str	r3, [r7, #4]
 8008d74:	e001      	b.n	8008d7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d76:	2300      	movs	r3, #0
 8008d78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d7a:	687b      	ldr	r3, [r7, #4]
	}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	20000e50 	.word	0x20000e50
 8008d8c:	20000e6c 	.word	0x20000e6c

08008d90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d056      	beq.n	8008e54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008da6:	4b2e      	ldr	r3, [pc, #184]	; (8008e60 <xTaskPriorityDisinherit+0xd0>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d00a      	beq.n	8008dc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	60fb      	str	r3, [r7, #12]
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	60bb      	str	r3, [r7, #8]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008de8:	1e5a      	subs	r2, r3, #1
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d02c      	beq.n	8008e54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d128      	bne.n	8008e54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	3304      	adds	r3, #4
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fe fc70 	bl	80076ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e24:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <xTaskPriorityDisinherit+0xd4>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d903      	bls.n	8008e34 <xTaskPriorityDisinherit+0xa4>
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e30:	4a0c      	ldr	r2, [pc, #48]	; (8008e64 <xTaskPriorityDisinherit+0xd4>)
 8008e32:	6013      	str	r3, [r2, #0]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e38:	4613      	mov	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4a09      	ldr	r2, [pc, #36]	; (8008e68 <xTaskPriorityDisinherit+0xd8>)
 8008e42:	441a      	add	r2, r3
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	3304      	adds	r3, #4
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	f7fe fbf1 	bl	8007632 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e50:	2301      	movs	r3, #1
 8008e52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e54:	697b      	ldr	r3, [r7, #20]
	}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20000970 	.word	0x20000970
 8008e64:	20000e4c 	.word	0x20000e4c
 8008e68:	20000974 	.word	0x20000974

08008e6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e76:	4b21      	ldr	r3, [pc, #132]	; (8008efc <prvAddCurrentTaskToDelayedList+0x90>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e7c:	4b20      	ldr	r3, [pc, #128]	; (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3304      	adds	r3, #4
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fc32 	bl	80076ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8e:	d10a      	bne.n	8008ea6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d007      	beq.n	8008ea6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e96:	4b1a      	ldr	r3, [pc, #104]	; (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4819      	ldr	r0, [pc, #100]	; (8008f04 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ea0:	f7fe fbc7 	bl	8007632 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ea4:	e026      	b.n	8008ef4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4413      	add	r3, r2
 8008eac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008eae:	4b14      	ldr	r3, [pc, #80]	; (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d209      	bcs.n	8008ed2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ebe:	4b12      	ldr	r3, [pc, #72]	; (8008f08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	4619      	mov	r1, r3
 8008eca:	4610      	mov	r0, r2
 8008ecc:	f7fe fbd5 	bl	800767a <vListInsert>
}
 8008ed0:	e010      	b.n	8008ef4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ed2:	4b0e      	ldr	r3, [pc, #56]	; (8008f0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3304      	adds	r3, #4
 8008edc:	4619      	mov	r1, r3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	f7fe fbcb 	bl	800767a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d202      	bcs.n	8008ef4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008eee:	4a08      	ldr	r2, [pc, #32]	; (8008f10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	6013      	str	r3, [r2, #0]
}
 8008ef4:	bf00      	nop
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000e48 	.word	0x20000e48
 8008f00:	20000970 	.word	0x20000970
 8008f04:	20000e30 	.word	0x20000e30
 8008f08:	20000e00 	.word	0x20000e00
 8008f0c:	20000dfc 	.word	0x20000dfc
 8008f10:	20000e64 	.word	0x20000e64

08008f14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08a      	sub	sp, #40	; 0x28
 8008f18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f1e:	f000 fb07 	bl	8009530 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f22:	4b1c      	ldr	r3, [pc, #112]	; (8008f94 <xTimerCreateTimerTask+0x80>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d021      	beq.n	8008f6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f32:	1d3a      	adds	r2, r7, #4
 8008f34:	f107 0108 	add.w	r1, r7, #8
 8008f38:	f107 030c 	add.w	r3, r7, #12
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fe fb31 	bl	80075a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f42:	6879      	ldr	r1, [r7, #4]
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	9202      	str	r2, [sp, #8]
 8008f4a:	9301      	str	r3, [sp, #4]
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	2300      	movs	r3, #0
 8008f52:	460a      	mov	r2, r1
 8008f54:	4910      	ldr	r1, [pc, #64]	; (8008f98 <xTimerCreateTimerTask+0x84>)
 8008f56:	4811      	ldr	r0, [pc, #68]	; (8008f9c <xTimerCreateTimerTask+0x88>)
 8008f58:	f7ff f8de 	bl	8008118 <xTaskCreateStatic>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	4a10      	ldr	r2, [pc, #64]	; (8008fa0 <xTimerCreateTimerTask+0x8c>)
 8008f60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f62:	4b0f      	ldr	r3, [pc, #60]	; (8008fa0 <xTimerCreateTimerTask+0x8c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	613b      	str	r3, [r7, #16]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f8a:	697b      	ldr	r3, [r7, #20]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	20000ea0 	.word	0x20000ea0
 8008f98:	0800e2e0 	.word	0x0800e2e0
 8008f9c:	080090d9 	.word	0x080090d9
 8008fa0:	20000ea4 	.word	0x20000ea4

08008fa4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08a      	sub	sp, #40	; 0x28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10a      	bne.n	8008fd2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	623b      	str	r3, [r7, #32]
}
 8008fce:	bf00      	nop
 8008fd0:	e7fe      	b.n	8008fd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fd2:	4b1a      	ldr	r3, [pc, #104]	; (800903c <xTimerGenericCommand+0x98>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d02a      	beq.n	8009030 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b05      	cmp	r3, #5
 8008fea:	dc18      	bgt.n	800901e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008fec:	f7ff feb2 	bl	8008d54 <xTaskGetSchedulerState>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d109      	bne.n	800900a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ff6:	4b11      	ldr	r3, [pc, #68]	; (800903c <xTimerGenericCommand+0x98>)
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f107 0110 	add.w	r1, r7, #16
 8008ffe:	2300      	movs	r3, #0
 8009000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009002:	f7fe fca1 	bl	8007948 <xQueueGenericSend>
 8009006:	6278      	str	r0, [r7, #36]	; 0x24
 8009008:	e012      	b.n	8009030 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800900a:	4b0c      	ldr	r3, [pc, #48]	; (800903c <xTimerGenericCommand+0x98>)
 800900c:	6818      	ldr	r0, [r3, #0]
 800900e:	f107 0110 	add.w	r1, r7, #16
 8009012:	2300      	movs	r3, #0
 8009014:	2200      	movs	r2, #0
 8009016:	f7fe fc97 	bl	8007948 <xQueueGenericSend>
 800901a:	6278      	str	r0, [r7, #36]	; 0x24
 800901c:	e008      	b.n	8009030 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800901e:	4b07      	ldr	r3, [pc, #28]	; (800903c <xTimerGenericCommand+0x98>)
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	f107 0110 	add.w	r1, r7, #16
 8009026:	2300      	movs	r3, #0
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	f7fe fd8b 	bl	8007b44 <xQueueGenericSendFromISR>
 800902e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009032:	4618      	mov	r0, r3
 8009034:	3728      	adds	r7, #40	; 0x28
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20000ea0 	.word	0x20000ea0

08009040 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af02      	add	r7, sp, #8
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800904a:	4b22      	ldr	r3, [pc, #136]	; (80090d4 <prvProcessExpiredTimer+0x94>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	3304      	adds	r3, #4
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fb47 	bl	80076ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b00      	cmp	r3, #0
 800906a:	d022      	beq.n	80090b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	699a      	ldr	r2, [r3, #24]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	18d1      	adds	r1, r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	6978      	ldr	r0, [r7, #20]
 800907a:	f000 f8d1 	bl	8009220 <prvInsertTimerInActiveList>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01f      	beq.n	80090c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009084:	2300      	movs	r3, #0
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	2300      	movs	r3, #0
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	2100      	movs	r1, #0
 800908e:	6978      	ldr	r0, [r7, #20]
 8009090:	f7ff ff88 	bl	8008fa4 <xTimerGenericCommand>
 8009094:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d113      	bne.n	80090c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	60fb      	str	r3, [r7, #12]
}
 80090ae:	bf00      	nop
 80090b0:	e7fe      	b.n	80090b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090b8:	f023 0301 	bic.w	r3, r3, #1
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	6978      	ldr	r0, [r7, #20]
 80090ca:	4798      	blx	r3
}
 80090cc:	bf00      	nop
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	20000e98 	.word	0x20000e98

080090d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090e0:	f107 0308 	add.w	r3, r7, #8
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 f857 	bl	8009198 <prvGetNextExpireTime>
 80090ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	4619      	mov	r1, r3
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 f803 	bl	80090fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090f6:	f000 f8d5 	bl	80092a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090fa:	e7f1      	b.n	80090e0 <prvTimerTask+0x8>

080090fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009106:	f7ff fa43 	bl	8008590 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800910a:	f107 0308 	add.w	r3, r7, #8
 800910e:	4618      	mov	r0, r3
 8009110:	f000 f866 	bl	80091e0 <prvSampleTimeNow>
 8009114:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d130      	bne.n	800917e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <prvProcessTimerOrBlockTask+0x3c>
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	429a      	cmp	r2, r3
 8009128:	d806      	bhi.n	8009138 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800912a:	f7ff fa3f 	bl	80085ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800912e:	68f9      	ldr	r1, [r7, #12]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff ff85 	bl	8009040 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009136:	e024      	b.n	8009182 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d008      	beq.n	8009150 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800913e:	4b13      	ldr	r3, [pc, #76]	; (800918c <prvProcessTimerOrBlockTask+0x90>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <prvProcessTimerOrBlockTask+0x50>
 8009148:	2301      	movs	r3, #1
 800914a:	e000      	b.n	800914e <prvProcessTimerOrBlockTask+0x52>
 800914c:	2300      	movs	r3, #0
 800914e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009150:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <prvProcessTimerOrBlockTask+0x94>)
 8009152:	6818      	ldr	r0, [r3, #0]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	4619      	mov	r1, r3
 800915e:	f7fe ffa7 	bl	80080b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009162:	f7ff fa23 	bl	80085ac <xTaskResumeAll>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800916c:	4b09      	ldr	r3, [pc, #36]	; (8009194 <prvProcessTimerOrBlockTask+0x98>)
 800916e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	f3bf 8f6f 	isb	sy
}
 800917c:	e001      	b.n	8009182 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800917e:	f7ff fa15 	bl	80085ac <xTaskResumeAll>
}
 8009182:	bf00      	nop
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20000e9c 	.word	0x20000e9c
 8009190:	20000ea0 	.word	0x20000ea0
 8009194:	e000ed04 	.word	0xe000ed04

08009198 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091a0:	4b0e      	ldr	r3, [pc, #56]	; (80091dc <prvGetNextExpireTime+0x44>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <prvGetNextExpireTime+0x16>
 80091aa:	2201      	movs	r2, #1
 80091ac:	e000      	b.n	80091b0 <prvGetNextExpireTime+0x18>
 80091ae:	2200      	movs	r2, #0
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d105      	bne.n	80091c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091bc:	4b07      	ldr	r3, [pc, #28]	; (80091dc <prvGetNextExpireTime+0x44>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	e001      	b.n	80091cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091c8:	2300      	movs	r3, #0
 80091ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091cc:	68fb      	ldr	r3, [r7, #12]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	20000e98 	.word	0x20000e98

080091e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091e8:	f7ff fa7e 	bl	80086e8 <xTaskGetTickCount>
 80091ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091ee:	4b0b      	ldr	r3, [pc, #44]	; (800921c <prvSampleTimeNow+0x3c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d205      	bcs.n	8009204 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091f8:	f000 f936 	bl	8009468 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	e002      	b.n	800920a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800920a:	4a04      	ldr	r2, [pc, #16]	; (800921c <prvSampleTimeNow+0x3c>)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009210:	68fb      	ldr	r3, [r7, #12]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	20000ea8 	.word	0x20000ea8

08009220 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800922e:	2300      	movs	r3, #0
 8009230:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	429a      	cmp	r2, r3
 8009244:	d812      	bhi.n	800926c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	1ad2      	subs	r2, r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	429a      	cmp	r2, r3
 8009252:	d302      	bcc.n	800925a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009254:	2301      	movs	r3, #1
 8009256:	617b      	str	r3, [r7, #20]
 8009258:	e01b      	b.n	8009292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800925a:	4b10      	ldr	r3, [pc, #64]	; (800929c <prvInsertTimerInActiveList+0x7c>)
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3304      	adds	r3, #4
 8009262:	4619      	mov	r1, r3
 8009264:	4610      	mov	r0, r2
 8009266:	f7fe fa08 	bl	800767a <vListInsert>
 800926a:	e012      	b.n	8009292 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	429a      	cmp	r2, r3
 8009272:	d206      	bcs.n	8009282 <prvInsertTimerInActiveList+0x62>
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	d302      	bcc.n	8009282 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800927c:	2301      	movs	r3, #1
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	e007      	b.n	8009292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009282:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <prvInsertTimerInActiveList+0x80>)
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3304      	adds	r3, #4
 800928a:	4619      	mov	r1, r3
 800928c:	4610      	mov	r0, r2
 800928e:	f7fe f9f4 	bl	800767a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009292:	697b      	ldr	r3, [r7, #20]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	20000e9c 	.word	0x20000e9c
 80092a0:	20000e98 	.word	0x20000e98

080092a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08e      	sub	sp, #56	; 0x38
 80092a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092aa:	e0ca      	b.n	8009442 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	da18      	bge.n	80092e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092b2:	1d3b      	adds	r3, r7, #4
 80092b4:	3304      	adds	r3, #4
 80092b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	61fb      	str	r3, [r7, #28]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092da:	6850      	ldr	r0, [r2, #4]
 80092dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092de:	6892      	ldr	r2, [r2, #8]
 80092e0:	4611      	mov	r1, r2
 80092e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f2c0 80aa 	blt.w	8009440 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d004      	beq.n	8009302 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	3304      	adds	r3, #4
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe f9f5 	bl	80076ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009302:	463b      	mov	r3, r7
 8009304:	4618      	mov	r0, r3
 8009306:	f7ff ff6b 	bl	80091e0 <prvSampleTimeNow>
 800930a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b09      	cmp	r3, #9
 8009310:	f200 8097 	bhi.w	8009442 <prvProcessReceivedCommands+0x19e>
 8009314:	a201      	add	r2, pc, #4	; (adr r2, 800931c <prvProcessReceivedCommands+0x78>)
 8009316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931a:	bf00      	nop
 800931c:	08009345 	.word	0x08009345
 8009320:	08009345 	.word	0x08009345
 8009324:	08009345 	.word	0x08009345
 8009328:	080093b9 	.word	0x080093b9
 800932c:	080093cd 	.word	0x080093cd
 8009330:	08009417 	.word	0x08009417
 8009334:	08009345 	.word	0x08009345
 8009338:	08009345 	.word	0x08009345
 800933c:	080093b9 	.word	0x080093b9
 8009340:	080093cd 	.word	0x080093cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	b2da      	uxtb	r2, r3
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	18d1      	adds	r1, r2, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009364:	f7ff ff5c 	bl	8009220 <prvInsertTimerInActiveList>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d069      	beq.n	8009442 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009374:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	d05e      	beq.n	8009442 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	441a      	add	r2, r3
 800938c:	2300      	movs	r3, #0
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	2300      	movs	r3, #0
 8009392:	2100      	movs	r1, #0
 8009394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009396:	f7ff fe05 	bl	8008fa4 <xTimerGenericCommand>
 800939a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d14f      	bne.n	8009442 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	61bb      	str	r3, [r7, #24]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093be:	f023 0301 	bic.w	r3, r3, #1
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80093ca:	e03a      	b.n	8009442 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093d2:	f043 0301 	orr.w	r3, r3, #1
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10a      	bne.n	8009402 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	617b      	str	r3, [r7, #20]
}
 80093fe:	bf00      	nop
 8009400:	e7fe      	b.n	8009400 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	18d1      	adds	r1, r2, r3
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800940e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009410:	f7ff ff06 	bl	8009220 <prvInsertTimerInActiveList>
					break;
 8009414:	e015      	b.n	8009442 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	2b00      	cmp	r3, #0
 8009422:	d103      	bne.n	800942c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009426:	f000 fbdb 	bl	8009be0 <vPortFree>
 800942a:	e00a      	b.n	8009442 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009432:	f023 0301 	bic.w	r3, r3, #1
 8009436:	b2da      	uxtb	r2, r3
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800943e:	e000      	b.n	8009442 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009440:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009442:	4b08      	ldr	r3, [pc, #32]	; (8009464 <prvProcessReceivedCommands+0x1c0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	1d39      	adds	r1, r7, #4
 8009448:	2200      	movs	r2, #0
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fc16 	bl	8007c7c <xQueueReceive>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	f47f af2a 	bne.w	80092ac <prvProcessReceivedCommands+0x8>
	}
}
 8009458:	bf00      	nop
 800945a:	bf00      	nop
 800945c:	3730      	adds	r7, #48	; 0x30
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20000ea0 	.word	0x20000ea0

08009468 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800946e:	e048      	b.n	8009502 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009470:	4b2d      	ldr	r3, [pc, #180]	; (8009528 <prvSwitchTimerLists+0xc0>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800947a:	4b2b      	ldr	r3, [pc, #172]	; (8009528 <prvSwitchTimerLists+0xc0>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	3304      	adds	r3, #4
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe f92f 	bl	80076ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d02e      	beq.n	8009502 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	4413      	add	r3, r2
 80094ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d90e      	bls.n	80094d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094c2:	4b19      	ldr	r3, [pc, #100]	; (8009528 <prvSwitchTimerLists+0xc0>)
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3304      	adds	r3, #4
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f7fe f8d4 	bl	800767a <vListInsert>
 80094d2:	e016      	b.n	8009502 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094d4:	2300      	movs	r3, #0
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	2300      	movs	r3, #0
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	2100      	movs	r1, #0
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f7ff fd60 	bl	8008fa4 <xTimerGenericCommand>
 80094e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10a      	bne.n	8009502 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	603b      	str	r3, [r7, #0]
}
 80094fe:	bf00      	nop
 8009500:	e7fe      	b.n	8009500 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009502:	4b09      	ldr	r3, [pc, #36]	; (8009528 <prvSwitchTimerLists+0xc0>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1b1      	bne.n	8009470 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800950c:	4b06      	ldr	r3, [pc, #24]	; (8009528 <prvSwitchTimerLists+0xc0>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009512:	4b06      	ldr	r3, [pc, #24]	; (800952c <prvSwitchTimerLists+0xc4>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a04      	ldr	r2, [pc, #16]	; (8009528 <prvSwitchTimerLists+0xc0>)
 8009518:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800951a:	4a04      	ldr	r2, [pc, #16]	; (800952c <prvSwitchTimerLists+0xc4>)
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	6013      	str	r3, [r2, #0]
}
 8009520:	bf00      	nop
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	20000e98 	.word	0x20000e98
 800952c:	20000e9c 	.word	0x20000e9c

08009530 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009536:	f000 f965 	bl	8009804 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800953a:	4b15      	ldr	r3, [pc, #84]	; (8009590 <prvCheckForValidListAndQueue+0x60>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d120      	bne.n	8009584 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009542:	4814      	ldr	r0, [pc, #80]	; (8009594 <prvCheckForValidListAndQueue+0x64>)
 8009544:	f7fe f848 	bl	80075d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009548:	4813      	ldr	r0, [pc, #76]	; (8009598 <prvCheckForValidListAndQueue+0x68>)
 800954a:	f7fe f845 	bl	80075d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800954e:	4b13      	ldr	r3, [pc, #76]	; (800959c <prvCheckForValidListAndQueue+0x6c>)
 8009550:	4a10      	ldr	r2, [pc, #64]	; (8009594 <prvCheckForValidListAndQueue+0x64>)
 8009552:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009554:	4b12      	ldr	r3, [pc, #72]	; (80095a0 <prvCheckForValidListAndQueue+0x70>)
 8009556:	4a10      	ldr	r2, [pc, #64]	; (8009598 <prvCheckForValidListAndQueue+0x68>)
 8009558:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800955a:	2300      	movs	r3, #0
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	4b11      	ldr	r3, [pc, #68]	; (80095a4 <prvCheckForValidListAndQueue+0x74>)
 8009560:	4a11      	ldr	r2, [pc, #68]	; (80095a8 <prvCheckForValidListAndQueue+0x78>)
 8009562:	2110      	movs	r1, #16
 8009564:	200a      	movs	r0, #10
 8009566:	f7fe f953 	bl	8007810 <xQueueGenericCreateStatic>
 800956a:	4603      	mov	r3, r0
 800956c:	4a08      	ldr	r2, [pc, #32]	; (8009590 <prvCheckForValidListAndQueue+0x60>)
 800956e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009570:	4b07      	ldr	r3, [pc, #28]	; (8009590 <prvCheckForValidListAndQueue+0x60>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d005      	beq.n	8009584 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009578:	4b05      	ldr	r3, [pc, #20]	; (8009590 <prvCheckForValidListAndQueue+0x60>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	490b      	ldr	r1, [pc, #44]	; (80095ac <prvCheckForValidListAndQueue+0x7c>)
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe fd6c 	bl	800805c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009584:	f000 f96e 	bl	8009864 <vPortExitCritical>
}
 8009588:	bf00      	nop
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000ea0 	.word	0x20000ea0
 8009594:	20000e70 	.word	0x20000e70
 8009598:	20000e84 	.word	0x20000e84
 800959c:	20000e98 	.word	0x20000e98
 80095a0:	20000e9c 	.word	0x20000e9c
 80095a4:	20000f4c 	.word	0x20000f4c
 80095a8:	20000eac 	.word	0x20000eac
 80095ac:	0800e2e8 	.word	0x0800e2e8

080095b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	3b04      	subs	r3, #4
 80095c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	3b04      	subs	r3, #4
 80095ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f023 0201 	bic.w	r2, r3, #1
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	3b04      	subs	r3, #4
 80095de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095e0:	4a0c      	ldr	r2, [pc, #48]	; (8009614 <pxPortInitialiseStack+0x64>)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3b14      	subs	r3, #20
 80095ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	3b04      	subs	r3, #4
 80095f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f06f 0202 	mvn.w	r2, #2
 80095fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3b20      	subs	r3, #32
 8009604:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009606:	68fb      	ldr	r3, [r7, #12]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	08009619 	.word	0x08009619

08009618 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009622:	4b12      	ldr	r3, [pc, #72]	; (800966c <prvTaskExitError+0x54>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962a:	d00a      	beq.n	8009642 <prvTaskExitError+0x2a>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	60fb      	str	r3, [r7, #12]
}
 800963e:	bf00      	nop
 8009640:	e7fe      	b.n	8009640 <prvTaskExitError+0x28>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	60bb      	str	r3, [r7, #8]
}
 8009654:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009656:	bf00      	nop
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0fc      	beq.n	8009658 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800965e:	bf00      	nop
 8009660:	bf00      	nop
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	2000001c 	.word	0x2000001c

08009670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009670:	4b07      	ldr	r3, [pc, #28]	; (8009690 <pxCurrentTCBConst2>)
 8009672:	6819      	ldr	r1, [r3, #0]
 8009674:	6808      	ldr	r0, [r1, #0]
 8009676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967a:	f380 8809 	msr	PSP, r0
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f04f 0000 	mov.w	r0, #0
 8009686:	f380 8811 	msr	BASEPRI, r0
 800968a:	4770      	bx	lr
 800968c:	f3af 8000 	nop.w

08009690 <pxCurrentTCBConst2>:
 8009690:	20000970 	.word	0x20000970
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop

08009698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009698:	4808      	ldr	r0, [pc, #32]	; (80096bc <prvPortStartFirstTask+0x24>)
 800969a:	6800      	ldr	r0, [r0, #0]
 800969c:	6800      	ldr	r0, [r0, #0]
 800969e:	f380 8808 	msr	MSP, r0
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f380 8814 	msr	CONTROL, r0
 80096aa:	b662      	cpsie	i
 80096ac:	b661      	cpsie	f
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	df00      	svc	0
 80096b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096ba:	bf00      	nop
 80096bc:	e000ed08 	.word	0xe000ed08

080096c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096c6:	4b46      	ldr	r3, [pc, #280]	; (80097e0 <xPortStartScheduler+0x120>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a46      	ldr	r2, [pc, #280]	; (80097e4 <xPortStartScheduler+0x124>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d10a      	bne.n	80096e6 <xPortStartScheduler+0x26>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	613b      	str	r3, [r7, #16]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096e6:	4b3e      	ldr	r3, [pc, #248]	; (80097e0 <xPortStartScheduler+0x120>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a3f      	ldr	r2, [pc, #252]	; (80097e8 <xPortStartScheduler+0x128>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d10a      	bne.n	8009706 <xPortStartScheduler+0x46>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	60fb      	str	r3, [r7, #12]
}
 8009702:	bf00      	nop
 8009704:	e7fe      	b.n	8009704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009706:	4b39      	ldr	r3, [pc, #228]	; (80097ec <xPortStartScheduler+0x12c>)
 8009708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	b2db      	uxtb	r3, r3
 8009710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	22ff      	movs	r2, #255	; 0xff
 8009716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009728:	b2da      	uxtb	r2, r3
 800972a:	4b31      	ldr	r3, [pc, #196]	; (80097f0 <xPortStartScheduler+0x130>)
 800972c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800972e:	4b31      	ldr	r3, [pc, #196]	; (80097f4 <xPortStartScheduler+0x134>)
 8009730:	2207      	movs	r2, #7
 8009732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009734:	e009      	b.n	800974a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009736:	4b2f      	ldr	r3, [pc, #188]	; (80097f4 <xPortStartScheduler+0x134>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3b01      	subs	r3, #1
 800973c:	4a2d      	ldr	r2, [pc, #180]	; (80097f4 <xPortStartScheduler+0x134>)
 800973e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	b2db      	uxtb	r3, r3
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	b2db      	uxtb	r3, r3
 8009748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800974a:	78fb      	ldrb	r3, [r7, #3]
 800974c:	b2db      	uxtb	r3, r3
 800974e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009752:	2b80      	cmp	r3, #128	; 0x80
 8009754:	d0ef      	beq.n	8009736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009756:	4b27      	ldr	r3, [pc, #156]	; (80097f4 <xPortStartScheduler+0x134>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f1c3 0307 	rsb	r3, r3, #7
 800975e:	2b04      	cmp	r3, #4
 8009760:	d00a      	beq.n	8009778 <xPortStartScheduler+0xb8>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	60bb      	str	r3, [r7, #8]
}
 8009774:	bf00      	nop
 8009776:	e7fe      	b.n	8009776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009778:	4b1e      	ldr	r3, [pc, #120]	; (80097f4 <xPortStartScheduler+0x134>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	021b      	lsls	r3, r3, #8
 800977e:	4a1d      	ldr	r2, [pc, #116]	; (80097f4 <xPortStartScheduler+0x134>)
 8009780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009782:	4b1c      	ldr	r3, [pc, #112]	; (80097f4 <xPortStartScheduler+0x134>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800978a:	4a1a      	ldr	r2, [pc, #104]	; (80097f4 <xPortStartScheduler+0x134>)
 800978c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	b2da      	uxtb	r2, r3
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009796:	4b18      	ldr	r3, [pc, #96]	; (80097f8 <xPortStartScheduler+0x138>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a17      	ldr	r2, [pc, #92]	; (80097f8 <xPortStartScheduler+0x138>)
 800979c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097a2:	4b15      	ldr	r3, [pc, #84]	; (80097f8 <xPortStartScheduler+0x138>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a14      	ldr	r2, [pc, #80]	; (80097f8 <xPortStartScheduler+0x138>)
 80097a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097ae:	f000 f8dd 	bl	800996c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097b2:	4b12      	ldr	r3, [pc, #72]	; (80097fc <xPortStartScheduler+0x13c>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097b8:	f000 f8fc 	bl	80099b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097bc:	4b10      	ldr	r3, [pc, #64]	; (8009800 <xPortStartScheduler+0x140>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a0f      	ldr	r2, [pc, #60]	; (8009800 <xPortStartScheduler+0x140>)
 80097c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80097c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097c8:	f7ff ff66 	bl	8009698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097cc:	f7ff f856 	bl	800887c <vTaskSwitchContext>
	prvTaskExitError();
 80097d0:	f7ff ff22 	bl	8009618 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	e000ed00 	.word	0xe000ed00
 80097e4:	410fc271 	.word	0x410fc271
 80097e8:	410fc270 	.word	0x410fc270
 80097ec:	e000e400 	.word	0xe000e400
 80097f0:	20000f9c 	.word	0x20000f9c
 80097f4:	20000fa0 	.word	0x20000fa0
 80097f8:	e000ed20 	.word	0xe000ed20
 80097fc:	2000001c 	.word	0x2000001c
 8009800:	e000ef34 	.word	0xe000ef34

08009804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	607b      	str	r3, [r7, #4]
}
 800981c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800981e:	4b0f      	ldr	r3, [pc, #60]	; (800985c <vPortEnterCritical+0x58>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	3301      	adds	r3, #1
 8009824:	4a0d      	ldr	r2, [pc, #52]	; (800985c <vPortEnterCritical+0x58>)
 8009826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009828:	4b0c      	ldr	r3, [pc, #48]	; (800985c <vPortEnterCritical+0x58>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d10f      	bne.n	8009850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009830:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <vPortEnterCritical+0x5c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00a      	beq.n	8009850 <vPortEnterCritical+0x4c>
	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	603b      	str	r3, [r7, #0]
}
 800984c:	bf00      	nop
 800984e:	e7fe      	b.n	800984e <vPortEnterCritical+0x4a>
	}
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	2000001c 	.word	0x2000001c
 8009860:	e000ed04 	.word	0xe000ed04

08009864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800986a:	4b12      	ldr	r3, [pc, #72]	; (80098b4 <vPortExitCritical+0x50>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10a      	bne.n	8009888 <vPortExitCritical+0x24>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	607b      	str	r3, [r7, #4]
}
 8009884:	bf00      	nop
 8009886:	e7fe      	b.n	8009886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009888:	4b0a      	ldr	r3, [pc, #40]	; (80098b4 <vPortExitCritical+0x50>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3b01      	subs	r3, #1
 800988e:	4a09      	ldr	r2, [pc, #36]	; (80098b4 <vPortExitCritical+0x50>)
 8009890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009892:	4b08      	ldr	r3, [pc, #32]	; (80098b4 <vPortExitCritical+0x50>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d105      	bne.n	80098a6 <vPortExitCritical+0x42>
 800989a:	2300      	movs	r3, #0
 800989c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	f383 8811 	msr	BASEPRI, r3
}
 80098a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098a6:	bf00      	nop
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	2000001c 	.word	0x2000001c
	...

080098c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098c0:	f3ef 8009 	mrs	r0, PSP
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	4b15      	ldr	r3, [pc, #84]	; (8009920 <pxCurrentTCBConst>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	f01e 0f10 	tst.w	lr, #16
 80098d0:	bf08      	it	eq
 80098d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098da:	6010      	str	r0, [r2, #0]
 80098dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098e4:	f380 8811 	msr	BASEPRI, r0
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f7fe ffc4 	bl	800887c <vTaskSwitchContext>
 80098f4:	f04f 0000 	mov.w	r0, #0
 80098f8:	f380 8811 	msr	BASEPRI, r0
 80098fc:	bc09      	pop	{r0, r3}
 80098fe:	6819      	ldr	r1, [r3, #0]
 8009900:	6808      	ldr	r0, [r1, #0]
 8009902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009906:	f01e 0f10 	tst.w	lr, #16
 800990a:	bf08      	it	eq
 800990c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009910:	f380 8809 	msr	PSP, r0
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	f3af 8000 	nop.w

08009920 <pxCurrentTCBConst>:
 8009920:	20000970 	.word	0x20000970
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop

08009928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	607b      	str	r3, [r7, #4]
}
 8009940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009942:	f7fe fee1 	bl	8008708 <xTaskIncrementTick>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800994c:	4b06      	ldr	r3, [pc, #24]	; (8009968 <xPortSysTickHandler+0x40>)
 800994e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	2300      	movs	r3, #0
 8009956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	f383 8811 	msr	BASEPRI, r3
}
 800995e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	e000ed04 	.word	0xe000ed04

0800996c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800996c:	b480      	push	{r7}
 800996e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009970:	4b0b      	ldr	r3, [pc, #44]	; (80099a0 <vPortSetupTimerInterrupt+0x34>)
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009976:	4b0b      	ldr	r3, [pc, #44]	; (80099a4 <vPortSetupTimerInterrupt+0x38>)
 8009978:	2200      	movs	r2, #0
 800997a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800997c:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <vPortSetupTimerInterrupt+0x3c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a0a      	ldr	r2, [pc, #40]	; (80099ac <vPortSetupTimerInterrupt+0x40>)
 8009982:	fba2 2303 	umull	r2, r3, r2, r3
 8009986:	099b      	lsrs	r3, r3, #6
 8009988:	4a09      	ldr	r2, [pc, #36]	; (80099b0 <vPortSetupTimerInterrupt+0x44>)
 800998a:	3b01      	subs	r3, #1
 800998c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800998e:	4b04      	ldr	r3, [pc, #16]	; (80099a0 <vPortSetupTimerInterrupt+0x34>)
 8009990:	2207      	movs	r2, #7
 8009992:	601a      	str	r2, [r3, #0]
}
 8009994:	bf00      	nop
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	e000e010 	.word	0xe000e010
 80099a4:	e000e018 	.word	0xe000e018
 80099a8:	20000010 	.word	0x20000010
 80099ac:	10624dd3 	.word	0x10624dd3
 80099b0:	e000e014 	.word	0xe000e014

080099b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80099c4 <vPortEnableVFP+0x10>
 80099b8:	6801      	ldr	r1, [r0, #0]
 80099ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099be:	6001      	str	r1, [r0, #0]
 80099c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099c2:	bf00      	nop
 80099c4:	e000ed88 	.word	0xe000ed88

080099c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099ce:	f3ef 8305 	mrs	r3, IPSR
 80099d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2b0f      	cmp	r3, #15
 80099d8:	d914      	bls.n	8009a04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099da:	4a17      	ldr	r2, [pc, #92]	; (8009a38 <vPortValidateInterruptPriority+0x70>)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	4413      	add	r3, r2
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099e4:	4b15      	ldr	r3, [pc, #84]	; (8009a3c <vPortValidateInterruptPriority+0x74>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	7afa      	ldrb	r2, [r7, #11]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d20a      	bcs.n	8009a04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	607b      	str	r3, [r7, #4]
}
 8009a00:	bf00      	nop
 8009a02:	e7fe      	b.n	8009a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a04:	4b0e      	ldr	r3, [pc, #56]	; (8009a40 <vPortValidateInterruptPriority+0x78>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a0c:	4b0d      	ldr	r3, [pc, #52]	; (8009a44 <vPortValidateInterruptPriority+0x7c>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d90a      	bls.n	8009a2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	603b      	str	r3, [r7, #0]
}
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <vPortValidateInterruptPriority+0x60>
	}
 8009a2a:	bf00      	nop
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	e000e3f0 	.word	0xe000e3f0
 8009a3c:	20000f9c 	.word	0x20000f9c
 8009a40:	e000ed0c 	.word	0xe000ed0c
 8009a44:	20000fa0 	.word	0x20000fa0

08009a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08a      	sub	sp, #40	; 0x28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a50:	2300      	movs	r3, #0
 8009a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a54:	f7fe fd9c 	bl	8008590 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a58:	4b5b      	ldr	r3, [pc, #364]	; (8009bc8 <pvPortMalloc+0x180>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d101      	bne.n	8009a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a60:	f000 f920 	bl	8009ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a64:	4b59      	ldr	r3, [pc, #356]	; (8009bcc <pvPortMalloc+0x184>)
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f040 8093 	bne.w	8009b98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01d      	beq.n	8009ab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a78:	2208      	movs	r2, #8
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d014      	beq.n	8009ab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f023 0307 	bic.w	r3, r3, #7
 8009a90:	3308      	adds	r3, #8
 8009a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00a      	beq.n	8009ab4 <pvPortMalloc+0x6c>
	__asm volatile
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	617b      	str	r3, [r7, #20]
}
 8009ab0:	bf00      	nop
 8009ab2:	e7fe      	b.n	8009ab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d06e      	beq.n	8009b98 <pvPortMalloc+0x150>
 8009aba:	4b45      	ldr	r3, [pc, #276]	; (8009bd0 <pvPortMalloc+0x188>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d869      	bhi.n	8009b98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ac4:	4b43      	ldr	r3, [pc, #268]	; (8009bd4 <pvPortMalloc+0x18c>)
 8009ac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ac8:	4b42      	ldr	r3, [pc, #264]	; (8009bd4 <pvPortMalloc+0x18c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ace:	e004      	b.n	8009ada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d903      	bls.n	8009aec <pvPortMalloc+0xa4>
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1f1      	bne.n	8009ad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009aec:	4b36      	ldr	r3, [pc, #216]	; (8009bc8 <pvPortMalloc+0x180>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d050      	beq.n	8009b98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2208      	movs	r2, #8
 8009afc:	4413      	add	r3, r2
 8009afe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0a:	685a      	ldr	r2, [r3, #4]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	1ad2      	subs	r2, r2, r3
 8009b10:	2308      	movs	r3, #8
 8009b12:	005b      	lsls	r3, r3, #1
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d91f      	bls.n	8009b58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	f003 0307 	and.w	r3, r3, #7
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <pvPortMalloc+0xf8>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	613b      	str	r3, [r7, #16]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	685a      	ldr	r2, [r3, #4]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	1ad2      	subs	r2, r2, r3
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b52:	69b8      	ldr	r0, [r7, #24]
 8009b54:	f000 f908 	bl	8009d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b58:	4b1d      	ldr	r3, [pc, #116]	; (8009bd0 <pvPortMalloc+0x188>)
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	4a1b      	ldr	r2, [pc, #108]	; (8009bd0 <pvPortMalloc+0x188>)
 8009b64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b66:	4b1a      	ldr	r3, [pc, #104]	; (8009bd0 <pvPortMalloc+0x188>)
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	4b1b      	ldr	r3, [pc, #108]	; (8009bd8 <pvPortMalloc+0x190>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d203      	bcs.n	8009b7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b72:	4b17      	ldr	r3, [pc, #92]	; (8009bd0 <pvPortMalloc+0x188>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a18      	ldr	r2, [pc, #96]	; (8009bd8 <pvPortMalloc+0x190>)
 8009b78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	4b13      	ldr	r3, [pc, #76]	; (8009bcc <pvPortMalloc+0x184>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	431a      	orrs	r2, r3
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b8e:	4b13      	ldr	r3, [pc, #76]	; (8009bdc <pvPortMalloc+0x194>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3301      	adds	r3, #1
 8009b94:	4a11      	ldr	r2, [pc, #68]	; (8009bdc <pvPortMalloc+0x194>)
 8009b96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b98:	f7fe fd08 	bl	80085ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	f003 0307 	and.w	r3, r3, #7
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00a      	beq.n	8009bbc <pvPortMalloc+0x174>
	__asm volatile
 8009ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	60fb      	str	r3, [r7, #12]
}
 8009bb8:	bf00      	nop
 8009bba:	e7fe      	b.n	8009bba <pvPortMalloc+0x172>
	return pvReturn;
 8009bbc:	69fb      	ldr	r3, [r7, #28]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3728      	adds	r7, #40	; 0x28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20004bac 	.word	0x20004bac
 8009bcc:	20004bc0 	.word	0x20004bc0
 8009bd0:	20004bb0 	.word	0x20004bb0
 8009bd4:	20004ba4 	.word	0x20004ba4
 8009bd8:	20004bb4 	.word	0x20004bb4
 8009bdc:	20004bb8 	.word	0x20004bb8

08009be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d04d      	beq.n	8009c8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bf2:	2308      	movs	r3, #8
 8009bf4:	425b      	negs	r3, r3
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	4b24      	ldr	r3, [pc, #144]	; (8009c98 <vPortFree+0xb8>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4013      	ands	r3, r2
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10a      	bne.n	8009c24 <vPortFree+0x44>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	60fb      	str	r3, [r7, #12]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00a      	beq.n	8009c42 <vPortFree+0x62>
	__asm volatile
 8009c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c30:	f383 8811 	msr	BASEPRI, r3
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	60bb      	str	r3, [r7, #8]
}
 8009c3e:	bf00      	nop
 8009c40:	e7fe      	b.n	8009c40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	4b14      	ldr	r3, [pc, #80]	; (8009c98 <vPortFree+0xb8>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d01e      	beq.n	8009c8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11a      	bne.n	8009c8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	685a      	ldr	r2, [r3, #4]
 8009c5c:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <vPortFree+0xb8>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	43db      	mvns	r3, r3
 8009c62:	401a      	ands	r2, r3
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c68:	f7fe fc92 	bl	8008590 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	4b0a      	ldr	r3, [pc, #40]	; (8009c9c <vPortFree+0xbc>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4413      	add	r3, r2
 8009c76:	4a09      	ldr	r2, [pc, #36]	; (8009c9c <vPortFree+0xbc>)
 8009c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c7a:	6938      	ldr	r0, [r7, #16]
 8009c7c:	f000 f874 	bl	8009d68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c80:	4b07      	ldr	r3, [pc, #28]	; (8009ca0 <vPortFree+0xc0>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	3301      	adds	r3, #1
 8009c86:	4a06      	ldr	r2, [pc, #24]	; (8009ca0 <vPortFree+0xc0>)
 8009c88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c8a:	f7fe fc8f 	bl	80085ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c8e:	bf00      	nop
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	20004bc0 	.word	0x20004bc0
 8009c9c:	20004bb0 	.word	0x20004bb0
 8009ca0:	20004bbc 	.word	0x20004bbc

08009ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009caa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cb0:	4b27      	ldr	r3, [pc, #156]	; (8009d50 <prvHeapInit+0xac>)
 8009cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f003 0307 	and.w	r3, r3, #7
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00c      	beq.n	8009cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3307      	adds	r3, #7
 8009cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f023 0307 	bic.w	r3, r3, #7
 8009cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	4a1f      	ldr	r2, [pc, #124]	; (8009d50 <prvHeapInit+0xac>)
 8009cd4:	4413      	add	r3, r2
 8009cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cdc:	4a1d      	ldr	r2, [pc, #116]	; (8009d54 <prvHeapInit+0xb0>)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ce2:	4b1c      	ldr	r3, [pc, #112]	; (8009d54 <prvHeapInit+0xb0>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	4413      	add	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cf0:	2208      	movs	r2, #8
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	1a9b      	subs	r3, r3, r2
 8009cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 0307 	bic.w	r3, r3, #7
 8009cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	4a15      	ldr	r2, [pc, #84]	; (8009d58 <prvHeapInit+0xb4>)
 8009d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d06:	4b14      	ldr	r3, [pc, #80]	; (8009d58 <prvHeapInit+0xb4>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d0e:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <prvHeapInit+0xb4>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	1ad2      	subs	r2, r2, r3
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d24:	4b0c      	ldr	r3, [pc, #48]	; (8009d58 <prvHeapInit+0xb4>)
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	4a0a      	ldr	r2, [pc, #40]	; (8009d5c <prvHeapInit+0xb8>)
 8009d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	4a09      	ldr	r2, [pc, #36]	; (8009d60 <prvHeapInit+0xbc>)
 8009d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d3c:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <prvHeapInit+0xc0>)
 8009d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d42:	601a      	str	r2, [r3, #0]
}
 8009d44:	bf00      	nop
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	20000fa4 	.word	0x20000fa4
 8009d54:	20004ba4 	.word	0x20004ba4
 8009d58:	20004bac 	.word	0x20004bac
 8009d5c:	20004bb4 	.word	0x20004bb4
 8009d60:	20004bb0 	.word	0x20004bb0
 8009d64:	20004bc0 	.word	0x20004bc0

08009d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d70:	4b28      	ldr	r3, [pc, #160]	; (8009e14 <prvInsertBlockIntoFreeList+0xac>)
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	e002      	b.n	8009d7c <prvInsertBlockIntoFreeList+0x14>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	60fb      	str	r3, [r7, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d8f7      	bhi.n	8009d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	68ba      	ldr	r2, [r7, #8]
 8009d90:	4413      	add	r3, r2
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d108      	bne.n	8009daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	685a      	ldr	r2, [r3, #4]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	441a      	add	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	441a      	add	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d118      	bne.n	8009df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	4b15      	ldr	r3, [pc, #84]	; (8009e18 <prvInsertBlockIntoFreeList+0xb0>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d00d      	beq.n	8009de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	441a      	add	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	e008      	b.n	8009df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009de6:	4b0c      	ldr	r3, [pc, #48]	; (8009e18 <prvInsertBlockIntoFreeList+0xb0>)
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	601a      	str	r2, [r3, #0]
 8009dee:	e003      	b.n	8009df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d002      	beq.n	8009e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e06:	bf00      	nop
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	20004ba4 	.word	0x20004ba4
 8009e18:	20004bac 	.word	0x20004bac

08009e1c <atoi>:
 8009e1c:	220a      	movs	r2, #10
 8009e1e:	2100      	movs	r1, #0
 8009e20:	f000 bdc6 	b.w	800a9b0 <strtol>

08009e24 <gcvt>:
 8009e24:	b530      	push	{r4, r5, lr}
 8009e26:	2200      	movs	r2, #0
 8009e28:	b085      	sub	sp, #20
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	2300      	movs	r3, #0
 8009e30:	ec51 0b10 	vmov	r0, r1, d0
 8009e34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e38:	f7f6 fe60 	bl	8000afc <__aeabi_dcmplt>
 8009e3c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009e40:	4622      	mov	r2, r4
 8009e42:	b118      	cbz	r0, 8009e4c <gcvt+0x28>
 8009e44:	232d      	movs	r3, #45	; 0x2d
 8009e46:	f802 3b01 	strb.w	r3, [r2], #1
 8009e4a:	3d01      	subs	r5, #1
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4806      	ldr	r0, [pc, #24]	; (8009e68 <gcvt+0x44>)
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	4629      	mov	r1, r5
 8009e54:	2367      	movs	r3, #103	; 0x67
 8009e56:	6800      	ldr	r0, [r0, #0]
 8009e58:	f001 fca6 	bl	800b7a8 <_gcvt>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	bf14      	ite	ne
 8009e60:	4620      	movne	r0, r4
 8009e62:	2000      	moveq	r0, #0
 8009e64:	b005      	add	sp, #20
 8009e66:	bd30      	pop	{r4, r5, pc}
 8009e68:	20000020 	.word	0x20000020

08009e6c <__errno>:
 8009e6c:	4b01      	ldr	r3, [pc, #4]	; (8009e74 <__errno+0x8>)
 8009e6e:	6818      	ldr	r0, [r3, #0]
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	20000020 	.word	0x20000020

08009e78 <__libc_init_array>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	4d0d      	ldr	r5, [pc, #52]	; (8009eb0 <__libc_init_array+0x38>)
 8009e7c:	4c0d      	ldr	r4, [pc, #52]	; (8009eb4 <__libc_init_array+0x3c>)
 8009e7e:	1b64      	subs	r4, r4, r5
 8009e80:	10a4      	asrs	r4, r4, #2
 8009e82:	2600      	movs	r6, #0
 8009e84:	42a6      	cmp	r6, r4
 8009e86:	d109      	bne.n	8009e9c <__libc_init_array+0x24>
 8009e88:	4d0b      	ldr	r5, [pc, #44]	; (8009eb8 <__libc_init_array+0x40>)
 8009e8a:	4c0c      	ldr	r4, [pc, #48]	; (8009ebc <__libc_init_array+0x44>)
 8009e8c:	f004 f92e 	bl	800e0ec <_init>
 8009e90:	1b64      	subs	r4, r4, r5
 8009e92:	10a4      	asrs	r4, r4, #2
 8009e94:	2600      	movs	r6, #0
 8009e96:	42a6      	cmp	r6, r4
 8009e98:	d105      	bne.n	8009ea6 <__libc_init_array+0x2e>
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}
 8009e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ea0:	4798      	blx	r3
 8009ea2:	3601      	adds	r6, #1
 8009ea4:	e7ee      	b.n	8009e84 <__libc_init_array+0xc>
 8009ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eaa:	4798      	blx	r3
 8009eac:	3601      	adds	r6, #1
 8009eae:	e7f2      	b.n	8009e96 <__libc_init_array+0x1e>
 8009eb0:	0800e818 	.word	0x0800e818
 8009eb4:	0800e818 	.word	0x0800e818
 8009eb8:	0800e818 	.word	0x0800e818
 8009ebc:	0800e81c 	.word	0x0800e81c

08009ec0 <memcpy>:
 8009ec0:	440a      	add	r2, r1
 8009ec2:	4291      	cmp	r1, r2
 8009ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ec8:	d100      	bne.n	8009ecc <memcpy+0xc>
 8009eca:	4770      	bx	lr
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ed6:	4291      	cmp	r1, r2
 8009ed8:	d1f9      	bne.n	8009ece <memcpy+0xe>
 8009eda:	bd10      	pop	{r4, pc}

08009edc <memset>:
 8009edc:	4402      	add	r2, r0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d100      	bne.n	8009ee6 <memset+0xa>
 8009ee4:	4770      	bx	lr
 8009ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8009eea:	e7f9      	b.n	8009ee0 <memset+0x4>

08009eec <__cvt>:
 8009eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef0:	ec55 4b10 	vmov	r4, r5, d0
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	460e      	mov	r6, r1
 8009ef8:	4619      	mov	r1, r3
 8009efa:	462b      	mov	r3, r5
 8009efc:	bfbb      	ittet	lt
 8009efe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f02:	461d      	movlt	r5, r3
 8009f04:	2300      	movge	r3, #0
 8009f06:	232d      	movlt	r3, #45	; 0x2d
 8009f08:	700b      	strb	r3, [r1, #0]
 8009f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f10:	4691      	mov	r9, r2
 8009f12:	f023 0820 	bic.w	r8, r3, #32
 8009f16:	bfbc      	itt	lt
 8009f18:	4622      	movlt	r2, r4
 8009f1a:	4614      	movlt	r4, r2
 8009f1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f20:	d005      	beq.n	8009f2e <__cvt+0x42>
 8009f22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f26:	d100      	bne.n	8009f2a <__cvt+0x3e>
 8009f28:	3601      	adds	r6, #1
 8009f2a:	2102      	movs	r1, #2
 8009f2c:	e000      	b.n	8009f30 <__cvt+0x44>
 8009f2e:	2103      	movs	r1, #3
 8009f30:	ab03      	add	r3, sp, #12
 8009f32:	9301      	str	r3, [sp, #4]
 8009f34:	ab02      	add	r3, sp, #8
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	ec45 4b10 	vmov	d0, r4, r5
 8009f3c:	4653      	mov	r3, sl
 8009f3e:	4632      	mov	r2, r6
 8009f40:	f000 fdce 	bl	800aae0 <_dtoa_r>
 8009f44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f48:	4607      	mov	r7, r0
 8009f4a:	d102      	bne.n	8009f52 <__cvt+0x66>
 8009f4c:	f019 0f01 	tst.w	r9, #1
 8009f50:	d022      	beq.n	8009f98 <__cvt+0xac>
 8009f52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f56:	eb07 0906 	add.w	r9, r7, r6
 8009f5a:	d110      	bne.n	8009f7e <__cvt+0x92>
 8009f5c:	783b      	ldrb	r3, [r7, #0]
 8009f5e:	2b30      	cmp	r3, #48	; 0x30
 8009f60:	d10a      	bne.n	8009f78 <__cvt+0x8c>
 8009f62:	2200      	movs	r2, #0
 8009f64:	2300      	movs	r3, #0
 8009f66:	4620      	mov	r0, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7f6 fdbd 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f6e:	b918      	cbnz	r0, 8009f78 <__cvt+0x8c>
 8009f70:	f1c6 0601 	rsb	r6, r6, #1
 8009f74:	f8ca 6000 	str.w	r6, [sl]
 8009f78:	f8da 3000 	ldr.w	r3, [sl]
 8009f7c:	4499      	add	r9, r3
 8009f7e:	2200      	movs	r2, #0
 8009f80:	2300      	movs	r3, #0
 8009f82:	4620      	mov	r0, r4
 8009f84:	4629      	mov	r1, r5
 8009f86:	f7f6 fdaf 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f8a:	b108      	cbz	r0, 8009f90 <__cvt+0xa4>
 8009f8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f90:	2230      	movs	r2, #48	; 0x30
 8009f92:	9b03      	ldr	r3, [sp, #12]
 8009f94:	454b      	cmp	r3, r9
 8009f96:	d307      	bcc.n	8009fa8 <__cvt+0xbc>
 8009f98:	9b03      	ldr	r3, [sp, #12]
 8009f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f9c:	1bdb      	subs	r3, r3, r7
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	b004      	add	sp, #16
 8009fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa8:	1c59      	adds	r1, r3, #1
 8009faa:	9103      	str	r1, [sp, #12]
 8009fac:	701a      	strb	r2, [r3, #0]
 8009fae:	e7f0      	b.n	8009f92 <__cvt+0xa6>

08009fb0 <__exponent>:
 8009fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2900      	cmp	r1, #0
 8009fb6:	bfb8      	it	lt
 8009fb8:	4249      	neglt	r1, r1
 8009fba:	f803 2b02 	strb.w	r2, [r3], #2
 8009fbe:	bfb4      	ite	lt
 8009fc0:	222d      	movlt	r2, #45	; 0x2d
 8009fc2:	222b      	movge	r2, #43	; 0x2b
 8009fc4:	2909      	cmp	r1, #9
 8009fc6:	7042      	strb	r2, [r0, #1]
 8009fc8:	dd2a      	ble.n	800a020 <__exponent+0x70>
 8009fca:	f10d 0407 	add.w	r4, sp, #7
 8009fce:	46a4      	mov	ip, r4
 8009fd0:	270a      	movs	r7, #10
 8009fd2:	46a6      	mov	lr, r4
 8009fd4:	460a      	mov	r2, r1
 8009fd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8009fda:	fb07 1516 	mls	r5, r7, r6, r1
 8009fde:	3530      	adds	r5, #48	; 0x30
 8009fe0:	2a63      	cmp	r2, #99	; 0x63
 8009fe2:	f104 34ff 	add.w	r4, r4, #4294967295
 8009fe6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009fea:	4631      	mov	r1, r6
 8009fec:	dcf1      	bgt.n	8009fd2 <__exponent+0x22>
 8009fee:	3130      	adds	r1, #48	; 0x30
 8009ff0:	f1ae 0502 	sub.w	r5, lr, #2
 8009ff4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009ff8:	1c44      	adds	r4, r0, #1
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	4561      	cmp	r1, ip
 8009ffe:	d30a      	bcc.n	800a016 <__exponent+0x66>
 800a000:	f10d 0209 	add.w	r2, sp, #9
 800a004:	eba2 020e 	sub.w	r2, r2, lr
 800a008:	4565      	cmp	r5, ip
 800a00a:	bf88      	it	hi
 800a00c:	2200      	movhi	r2, #0
 800a00e:	4413      	add	r3, r2
 800a010:	1a18      	subs	r0, r3, r0
 800a012:	b003      	add	sp, #12
 800a014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a016:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a01a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a01e:	e7ed      	b.n	8009ffc <__exponent+0x4c>
 800a020:	2330      	movs	r3, #48	; 0x30
 800a022:	3130      	adds	r1, #48	; 0x30
 800a024:	7083      	strb	r3, [r0, #2]
 800a026:	70c1      	strb	r1, [r0, #3]
 800a028:	1d03      	adds	r3, r0, #4
 800a02a:	e7f1      	b.n	800a010 <__exponent+0x60>

0800a02c <_printf_float>:
 800a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	ed2d 8b02 	vpush	{d8}
 800a034:	b08d      	sub	sp, #52	; 0x34
 800a036:	460c      	mov	r4, r1
 800a038:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a03c:	4616      	mov	r6, r2
 800a03e:	461f      	mov	r7, r3
 800a040:	4605      	mov	r5, r0
 800a042:	f001 fd67 	bl	800bb14 <_localeconv_r>
 800a046:	f8d0 a000 	ldr.w	sl, [r0]
 800a04a:	4650      	mov	r0, sl
 800a04c:	f7f6 f8ca 	bl	80001e4 <strlen>
 800a050:	2300      	movs	r3, #0
 800a052:	930a      	str	r3, [sp, #40]	; 0x28
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	9305      	str	r3, [sp, #20]
 800a058:	f8d8 3000 	ldr.w	r3, [r8]
 800a05c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a060:	3307      	adds	r3, #7
 800a062:	f023 0307 	bic.w	r3, r3, #7
 800a066:	f103 0208 	add.w	r2, r3, #8
 800a06a:	f8c8 2000 	str.w	r2, [r8]
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a076:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a07a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a07e:	9307      	str	r3, [sp, #28]
 800a080:	f8cd 8018 	str.w	r8, [sp, #24]
 800a084:	ee08 0a10 	vmov	s16, r0
 800a088:	4b9f      	ldr	r3, [pc, #636]	; (800a308 <_printf_float+0x2dc>)
 800a08a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a08e:	f04f 32ff 	mov.w	r2, #4294967295
 800a092:	f7f6 fd5b 	bl	8000b4c <__aeabi_dcmpun>
 800a096:	bb88      	cbnz	r0, 800a0fc <_printf_float+0xd0>
 800a098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a09c:	4b9a      	ldr	r3, [pc, #616]	; (800a308 <_printf_float+0x2dc>)
 800a09e:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a2:	f7f6 fd35 	bl	8000b10 <__aeabi_dcmple>
 800a0a6:	bb48      	cbnz	r0, 800a0fc <_printf_float+0xd0>
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	4640      	mov	r0, r8
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	f7f6 fd24 	bl	8000afc <__aeabi_dcmplt>
 800a0b4:	b110      	cbz	r0, 800a0bc <_printf_float+0x90>
 800a0b6:	232d      	movs	r3, #45	; 0x2d
 800a0b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0bc:	4b93      	ldr	r3, [pc, #588]	; (800a30c <_printf_float+0x2e0>)
 800a0be:	4894      	ldr	r0, [pc, #592]	; (800a310 <_printf_float+0x2e4>)
 800a0c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a0c4:	bf94      	ite	ls
 800a0c6:	4698      	movls	r8, r3
 800a0c8:	4680      	movhi	r8, r0
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	6123      	str	r3, [r4, #16]
 800a0ce:	9b05      	ldr	r3, [sp, #20]
 800a0d0:	f023 0204 	bic.w	r2, r3, #4
 800a0d4:	6022      	str	r2, [r4, #0]
 800a0d6:	f04f 0900 	mov.w	r9, #0
 800a0da:	9700      	str	r7, [sp, #0]
 800a0dc:	4633      	mov	r3, r6
 800a0de:	aa0b      	add	r2, sp, #44	; 0x2c
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f000 f9d8 	bl	800a498 <_printf_common>
 800a0e8:	3001      	adds	r0, #1
 800a0ea:	f040 8090 	bne.w	800a20e <_printf_float+0x1e2>
 800a0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f2:	b00d      	add	sp, #52	; 0x34
 800a0f4:	ecbd 8b02 	vpop	{d8}
 800a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	464b      	mov	r3, r9
 800a100:	4640      	mov	r0, r8
 800a102:	4649      	mov	r1, r9
 800a104:	f7f6 fd22 	bl	8000b4c <__aeabi_dcmpun>
 800a108:	b140      	cbz	r0, 800a11c <_printf_float+0xf0>
 800a10a:	464b      	mov	r3, r9
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	bfbc      	itt	lt
 800a110:	232d      	movlt	r3, #45	; 0x2d
 800a112:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a116:	487f      	ldr	r0, [pc, #508]	; (800a314 <_printf_float+0x2e8>)
 800a118:	4b7f      	ldr	r3, [pc, #508]	; (800a318 <_printf_float+0x2ec>)
 800a11a:	e7d1      	b.n	800a0c0 <_printf_float+0x94>
 800a11c:	6863      	ldr	r3, [r4, #4]
 800a11e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a122:	9206      	str	r2, [sp, #24]
 800a124:	1c5a      	adds	r2, r3, #1
 800a126:	d13f      	bne.n	800a1a8 <_printf_float+0x17c>
 800a128:	2306      	movs	r3, #6
 800a12a:	6063      	str	r3, [r4, #4]
 800a12c:	9b05      	ldr	r3, [sp, #20]
 800a12e:	6861      	ldr	r1, [r4, #4]
 800a130:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a134:	2300      	movs	r3, #0
 800a136:	9303      	str	r3, [sp, #12]
 800a138:	ab0a      	add	r3, sp, #40	; 0x28
 800a13a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a13e:	ab09      	add	r3, sp, #36	; 0x24
 800a140:	ec49 8b10 	vmov	d0, r8, r9
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	6022      	str	r2, [r4, #0]
 800a148:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a14c:	4628      	mov	r0, r5
 800a14e:	f7ff fecd 	bl	8009eec <__cvt>
 800a152:	9b06      	ldr	r3, [sp, #24]
 800a154:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a156:	2b47      	cmp	r3, #71	; 0x47
 800a158:	4680      	mov	r8, r0
 800a15a:	d108      	bne.n	800a16e <_printf_float+0x142>
 800a15c:	1cc8      	adds	r0, r1, #3
 800a15e:	db02      	blt.n	800a166 <_printf_float+0x13a>
 800a160:	6863      	ldr	r3, [r4, #4]
 800a162:	4299      	cmp	r1, r3
 800a164:	dd41      	ble.n	800a1ea <_printf_float+0x1be>
 800a166:	f1ab 0b02 	sub.w	fp, fp, #2
 800a16a:	fa5f fb8b 	uxtb.w	fp, fp
 800a16e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a172:	d820      	bhi.n	800a1b6 <_printf_float+0x18a>
 800a174:	3901      	subs	r1, #1
 800a176:	465a      	mov	r2, fp
 800a178:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a17c:	9109      	str	r1, [sp, #36]	; 0x24
 800a17e:	f7ff ff17 	bl	8009fb0 <__exponent>
 800a182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a184:	1813      	adds	r3, r2, r0
 800a186:	2a01      	cmp	r2, #1
 800a188:	4681      	mov	r9, r0
 800a18a:	6123      	str	r3, [r4, #16]
 800a18c:	dc02      	bgt.n	800a194 <_printf_float+0x168>
 800a18e:	6822      	ldr	r2, [r4, #0]
 800a190:	07d2      	lsls	r2, r2, #31
 800a192:	d501      	bpl.n	800a198 <_printf_float+0x16c>
 800a194:	3301      	adds	r3, #1
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d09c      	beq.n	800a0da <_printf_float+0xae>
 800a1a0:	232d      	movs	r3, #45	; 0x2d
 800a1a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a6:	e798      	b.n	800a0da <_printf_float+0xae>
 800a1a8:	9a06      	ldr	r2, [sp, #24]
 800a1aa:	2a47      	cmp	r2, #71	; 0x47
 800a1ac:	d1be      	bne.n	800a12c <_printf_float+0x100>
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1bc      	bne.n	800a12c <_printf_float+0x100>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e7b9      	b.n	800a12a <_printf_float+0xfe>
 800a1b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a1ba:	d118      	bne.n	800a1ee <_printf_float+0x1c2>
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	6863      	ldr	r3, [r4, #4]
 800a1c0:	dd0b      	ble.n	800a1da <_printf_float+0x1ae>
 800a1c2:	6121      	str	r1, [r4, #16]
 800a1c4:	b913      	cbnz	r3, 800a1cc <_printf_float+0x1a0>
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	07d0      	lsls	r0, r2, #31
 800a1ca:	d502      	bpl.n	800a1d2 <_printf_float+0x1a6>
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	440b      	add	r3, r1
 800a1d0:	6123      	str	r3, [r4, #16]
 800a1d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a1d4:	f04f 0900 	mov.w	r9, #0
 800a1d8:	e7de      	b.n	800a198 <_printf_float+0x16c>
 800a1da:	b913      	cbnz	r3, 800a1e2 <_printf_float+0x1b6>
 800a1dc:	6822      	ldr	r2, [r4, #0]
 800a1de:	07d2      	lsls	r2, r2, #31
 800a1e0:	d501      	bpl.n	800a1e6 <_printf_float+0x1ba>
 800a1e2:	3302      	adds	r3, #2
 800a1e4:	e7f4      	b.n	800a1d0 <_printf_float+0x1a4>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e7f2      	b.n	800a1d0 <_printf_float+0x1a4>
 800a1ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1f0:	4299      	cmp	r1, r3
 800a1f2:	db05      	blt.n	800a200 <_printf_float+0x1d4>
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	6121      	str	r1, [r4, #16]
 800a1f8:	07d8      	lsls	r0, r3, #31
 800a1fa:	d5ea      	bpl.n	800a1d2 <_printf_float+0x1a6>
 800a1fc:	1c4b      	adds	r3, r1, #1
 800a1fe:	e7e7      	b.n	800a1d0 <_printf_float+0x1a4>
 800a200:	2900      	cmp	r1, #0
 800a202:	bfd4      	ite	le
 800a204:	f1c1 0202 	rsble	r2, r1, #2
 800a208:	2201      	movgt	r2, #1
 800a20a:	4413      	add	r3, r2
 800a20c:	e7e0      	b.n	800a1d0 <_printf_float+0x1a4>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	055a      	lsls	r2, r3, #21
 800a212:	d407      	bmi.n	800a224 <_printf_float+0x1f8>
 800a214:	6923      	ldr	r3, [r4, #16]
 800a216:	4642      	mov	r2, r8
 800a218:	4631      	mov	r1, r6
 800a21a:	4628      	mov	r0, r5
 800a21c:	47b8      	blx	r7
 800a21e:	3001      	adds	r0, #1
 800a220:	d12c      	bne.n	800a27c <_printf_float+0x250>
 800a222:	e764      	b.n	800a0ee <_printf_float+0xc2>
 800a224:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a228:	f240 80e0 	bls.w	800a3ec <_printf_float+0x3c0>
 800a22c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a230:	2200      	movs	r2, #0
 800a232:	2300      	movs	r3, #0
 800a234:	f7f6 fc58 	bl	8000ae8 <__aeabi_dcmpeq>
 800a238:	2800      	cmp	r0, #0
 800a23a:	d034      	beq.n	800a2a6 <_printf_float+0x27a>
 800a23c:	4a37      	ldr	r2, [pc, #220]	; (800a31c <_printf_float+0x2f0>)
 800a23e:	2301      	movs	r3, #1
 800a240:	4631      	mov	r1, r6
 800a242:	4628      	mov	r0, r5
 800a244:	47b8      	blx	r7
 800a246:	3001      	adds	r0, #1
 800a248:	f43f af51 	beq.w	800a0ee <_printf_float+0xc2>
 800a24c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a250:	429a      	cmp	r2, r3
 800a252:	db02      	blt.n	800a25a <_printf_float+0x22e>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	07d8      	lsls	r0, r3, #31
 800a258:	d510      	bpl.n	800a27c <_printf_float+0x250>
 800a25a:	ee18 3a10 	vmov	r3, s16
 800a25e:	4652      	mov	r2, sl
 800a260:	4631      	mov	r1, r6
 800a262:	4628      	mov	r0, r5
 800a264:	47b8      	blx	r7
 800a266:	3001      	adds	r0, #1
 800a268:	f43f af41 	beq.w	800a0ee <_printf_float+0xc2>
 800a26c:	f04f 0800 	mov.w	r8, #0
 800a270:	f104 091a 	add.w	r9, r4, #26
 800a274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a276:	3b01      	subs	r3, #1
 800a278:	4543      	cmp	r3, r8
 800a27a:	dc09      	bgt.n	800a290 <_printf_float+0x264>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	079b      	lsls	r3, r3, #30
 800a280:	f100 8105 	bmi.w	800a48e <_printf_float+0x462>
 800a284:	68e0      	ldr	r0, [r4, #12]
 800a286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a288:	4298      	cmp	r0, r3
 800a28a:	bfb8      	it	lt
 800a28c:	4618      	movlt	r0, r3
 800a28e:	e730      	b.n	800a0f2 <_printf_float+0xc6>
 800a290:	2301      	movs	r3, #1
 800a292:	464a      	mov	r2, r9
 800a294:	4631      	mov	r1, r6
 800a296:	4628      	mov	r0, r5
 800a298:	47b8      	blx	r7
 800a29a:	3001      	adds	r0, #1
 800a29c:	f43f af27 	beq.w	800a0ee <_printf_float+0xc2>
 800a2a0:	f108 0801 	add.w	r8, r8, #1
 800a2a4:	e7e6      	b.n	800a274 <_printf_float+0x248>
 800a2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	dc39      	bgt.n	800a320 <_printf_float+0x2f4>
 800a2ac:	4a1b      	ldr	r2, [pc, #108]	; (800a31c <_printf_float+0x2f0>)
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	47b8      	blx	r7
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	f43f af19 	beq.w	800a0ee <_printf_float+0xc2>
 800a2bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	d102      	bne.n	800a2ca <_printf_float+0x29e>
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	07d9      	lsls	r1, r3, #31
 800a2c8:	d5d8      	bpl.n	800a27c <_printf_float+0x250>
 800a2ca:	ee18 3a10 	vmov	r3, s16
 800a2ce:	4652      	mov	r2, sl
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	47b8      	blx	r7
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	f43f af09 	beq.w	800a0ee <_printf_float+0xc2>
 800a2dc:	f04f 0900 	mov.w	r9, #0
 800a2e0:	f104 0a1a 	add.w	sl, r4, #26
 800a2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e6:	425b      	negs	r3, r3
 800a2e8:	454b      	cmp	r3, r9
 800a2ea:	dc01      	bgt.n	800a2f0 <_printf_float+0x2c4>
 800a2ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ee:	e792      	b.n	800a216 <_printf_float+0x1ea>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	4652      	mov	r2, sl
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	47b8      	blx	r7
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	f43f aef7 	beq.w	800a0ee <_printf_float+0xc2>
 800a300:	f109 0901 	add.w	r9, r9, #1
 800a304:	e7ee      	b.n	800a2e4 <_printf_float+0x2b8>
 800a306:	bf00      	nop
 800a308:	7fefffff 	.word	0x7fefffff
 800a30c:	0800e3ec 	.word	0x0800e3ec
 800a310:	0800e3f0 	.word	0x0800e3f0
 800a314:	0800e3f8 	.word	0x0800e3f8
 800a318:	0800e3f4 	.word	0x0800e3f4
 800a31c:	0800e3fc 	.word	0x0800e3fc
 800a320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a322:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a324:	429a      	cmp	r2, r3
 800a326:	bfa8      	it	ge
 800a328:	461a      	movge	r2, r3
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	4691      	mov	r9, r2
 800a32e:	dc37      	bgt.n	800a3a0 <_printf_float+0x374>
 800a330:	f04f 0b00 	mov.w	fp, #0
 800a334:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a338:	f104 021a 	add.w	r2, r4, #26
 800a33c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a33e:	9305      	str	r3, [sp, #20]
 800a340:	eba3 0309 	sub.w	r3, r3, r9
 800a344:	455b      	cmp	r3, fp
 800a346:	dc33      	bgt.n	800a3b0 <_printf_float+0x384>
 800a348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a34c:	429a      	cmp	r2, r3
 800a34e:	db3b      	blt.n	800a3c8 <_printf_float+0x39c>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	07da      	lsls	r2, r3, #31
 800a354:	d438      	bmi.n	800a3c8 <_printf_float+0x39c>
 800a356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a358:	9b05      	ldr	r3, [sp, #20]
 800a35a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	eba2 0901 	sub.w	r9, r2, r1
 800a362:	4599      	cmp	r9, r3
 800a364:	bfa8      	it	ge
 800a366:	4699      	movge	r9, r3
 800a368:	f1b9 0f00 	cmp.w	r9, #0
 800a36c:	dc35      	bgt.n	800a3da <_printf_float+0x3ae>
 800a36e:	f04f 0800 	mov.w	r8, #0
 800a372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a376:	f104 0a1a 	add.w	sl, r4, #26
 800a37a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a37e:	1a9b      	subs	r3, r3, r2
 800a380:	eba3 0309 	sub.w	r3, r3, r9
 800a384:	4543      	cmp	r3, r8
 800a386:	f77f af79 	ble.w	800a27c <_printf_float+0x250>
 800a38a:	2301      	movs	r3, #1
 800a38c:	4652      	mov	r2, sl
 800a38e:	4631      	mov	r1, r6
 800a390:	4628      	mov	r0, r5
 800a392:	47b8      	blx	r7
 800a394:	3001      	adds	r0, #1
 800a396:	f43f aeaa 	beq.w	800a0ee <_printf_float+0xc2>
 800a39a:	f108 0801 	add.w	r8, r8, #1
 800a39e:	e7ec      	b.n	800a37a <_printf_float+0x34e>
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4642      	mov	r2, r8
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	47b8      	blx	r7
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	d1c0      	bne.n	800a330 <_printf_float+0x304>
 800a3ae:	e69e      	b.n	800a0ee <_printf_float+0xc2>
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	9205      	str	r2, [sp, #20]
 800a3b8:	47b8      	blx	r7
 800a3ba:	3001      	adds	r0, #1
 800a3bc:	f43f ae97 	beq.w	800a0ee <_printf_float+0xc2>
 800a3c0:	9a05      	ldr	r2, [sp, #20]
 800a3c2:	f10b 0b01 	add.w	fp, fp, #1
 800a3c6:	e7b9      	b.n	800a33c <_printf_float+0x310>
 800a3c8:	ee18 3a10 	vmov	r3, s16
 800a3cc:	4652      	mov	r2, sl
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	47b8      	blx	r7
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	d1be      	bne.n	800a356 <_printf_float+0x32a>
 800a3d8:	e689      	b.n	800a0ee <_printf_float+0xc2>
 800a3da:	9a05      	ldr	r2, [sp, #20]
 800a3dc:	464b      	mov	r3, r9
 800a3de:	4442      	add	r2, r8
 800a3e0:	4631      	mov	r1, r6
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	47b8      	blx	r7
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	d1c1      	bne.n	800a36e <_printf_float+0x342>
 800a3ea:	e680      	b.n	800a0ee <_printf_float+0xc2>
 800a3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3ee:	2a01      	cmp	r2, #1
 800a3f0:	dc01      	bgt.n	800a3f6 <_printf_float+0x3ca>
 800a3f2:	07db      	lsls	r3, r3, #31
 800a3f4:	d538      	bpl.n	800a468 <_printf_float+0x43c>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	47b8      	blx	r7
 800a400:	3001      	adds	r0, #1
 800a402:	f43f ae74 	beq.w	800a0ee <_printf_float+0xc2>
 800a406:	ee18 3a10 	vmov	r3, s16
 800a40a:	4652      	mov	r2, sl
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	f43f ae6b 	beq.w	800a0ee <_printf_float+0xc2>
 800a418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a41c:	2200      	movs	r2, #0
 800a41e:	2300      	movs	r3, #0
 800a420:	f7f6 fb62 	bl	8000ae8 <__aeabi_dcmpeq>
 800a424:	b9d8      	cbnz	r0, 800a45e <_printf_float+0x432>
 800a426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a428:	f108 0201 	add.w	r2, r8, #1
 800a42c:	3b01      	subs	r3, #1
 800a42e:	4631      	mov	r1, r6
 800a430:	4628      	mov	r0, r5
 800a432:	47b8      	blx	r7
 800a434:	3001      	adds	r0, #1
 800a436:	d10e      	bne.n	800a456 <_printf_float+0x42a>
 800a438:	e659      	b.n	800a0ee <_printf_float+0xc2>
 800a43a:	2301      	movs	r3, #1
 800a43c:	4652      	mov	r2, sl
 800a43e:	4631      	mov	r1, r6
 800a440:	4628      	mov	r0, r5
 800a442:	47b8      	blx	r7
 800a444:	3001      	adds	r0, #1
 800a446:	f43f ae52 	beq.w	800a0ee <_printf_float+0xc2>
 800a44a:	f108 0801 	add.w	r8, r8, #1
 800a44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a450:	3b01      	subs	r3, #1
 800a452:	4543      	cmp	r3, r8
 800a454:	dcf1      	bgt.n	800a43a <_printf_float+0x40e>
 800a456:	464b      	mov	r3, r9
 800a458:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a45c:	e6dc      	b.n	800a218 <_printf_float+0x1ec>
 800a45e:	f04f 0800 	mov.w	r8, #0
 800a462:	f104 0a1a 	add.w	sl, r4, #26
 800a466:	e7f2      	b.n	800a44e <_printf_float+0x422>
 800a468:	2301      	movs	r3, #1
 800a46a:	4642      	mov	r2, r8
 800a46c:	e7df      	b.n	800a42e <_printf_float+0x402>
 800a46e:	2301      	movs	r3, #1
 800a470:	464a      	mov	r2, r9
 800a472:	4631      	mov	r1, r6
 800a474:	4628      	mov	r0, r5
 800a476:	47b8      	blx	r7
 800a478:	3001      	adds	r0, #1
 800a47a:	f43f ae38 	beq.w	800a0ee <_printf_float+0xc2>
 800a47e:	f108 0801 	add.w	r8, r8, #1
 800a482:	68e3      	ldr	r3, [r4, #12]
 800a484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a486:	1a5b      	subs	r3, r3, r1
 800a488:	4543      	cmp	r3, r8
 800a48a:	dcf0      	bgt.n	800a46e <_printf_float+0x442>
 800a48c:	e6fa      	b.n	800a284 <_printf_float+0x258>
 800a48e:	f04f 0800 	mov.w	r8, #0
 800a492:	f104 0919 	add.w	r9, r4, #25
 800a496:	e7f4      	b.n	800a482 <_printf_float+0x456>

0800a498 <_printf_common>:
 800a498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a49c:	4616      	mov	r6, r2
 800a49e:	4699      	mov	r9, r3
 800a4a0:	688a      	ldr	r2, [r1, #8]
 800a4a2:	690b      	ldr	r3, [r1, #16]
 800a4a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	bfb8      	it	lt
 800a4ac:	4613      	movlt	r3, r2
 800a4ae:	6033      	str	r3, [r6, #0]
 800a4b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	b10a      	cbz	r2, 800a4be <_printf_common+0x26>
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	6033      	str	r3, [r6, #0]
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	0699      	lsls	r1, r3, #26
 800a4c2:	bf42      	ittt	mi
 800a4c4:	6833      	ldrmi	r3, [r6, #0]
 800a4c6:	3302      	addmi	r3, #2
 800a4c8:	6033      	strmi	r3, [r6, #0]
 800a4ca:	6825      	ldr	r5, [r4, #0]
 800a4cc:	f015 0506 	ands.w	r5, r5, #6
 800a4d0:	d106      	bne.n	800a4e0 <_printf_common+0x48>
 800a4d2:	f104 0a19 	add.w	sl, r4, #25
 800a4d6:	68e3      	ldr	r3, [r4, #12]
 800a4d8:	6832      	ldr	r2, [r6, #0]
 800a4da:	1a9b      	subs	r3, r3, r2
 800a4dc:	42ab      	cmp	r3, r5
 800a4de:	dc26      	bgt.n	800a52e <_printf_common+0x96>
 800a4e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4e4:	1e13      	subs	r3, r2, #0
 800a4e6:	6822      	ldr	r2, [r4, #0]
 800a4e8:	bf18      	it	ne
 800a4ea:	2301      	movne	r3, #1
 800a4ec:	0692      	lsls	r2, r2, #26
 800a4ee:	d42b      	bmi.n	800a548 <_printf_common+0xb0>
 800a4f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4f4:	4649      	mov	r1, r9
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	47c0      	blx	r8
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	d01e      	beq.n	800a53c <_printf_common+0xa4>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	68e5      	ldr	r5, [r4, #12]
 800a502:	6832      	ldr	r2, [r6, #0]
 800a504:	f003 0306 	and.w	r3, r3, #6
 800a508:	2b04      	cmp	r3, #4
 800a50a:	bf08      	it	eq
 800a50c:	1aad      	subeq	r5, r5, r2
 800a50e:	68a3      	ldr	r3, [r4, #8]
 800a510:	6922      	ldr	r2, [r4, #16]
 800a512:	bf0c      	ite	eq
 800a514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a518:	2500      	movne	r5, #0
 800a51a:	4293      	cmp	r3, r2
 800a51c:	bfc4      	itt	gt
 800a51e:	1a9b      	subgt	r3, r3, r2
 800a520:	18ed      	addgt	r5, r5, r3
 800a522:	2600      	movs	r6, #0
 800a524:	341a      	adds	r4, #26
 800a526:	42b5      	cmp	r5, r6
 800a528:	d11a      	bne.n	800a560 <_printf_common+0xc8>
 800a52a:	2000      	movs	r0, #0
 800a52c:	e008      	b.n	800a540 <_printf_common+0xa8>
 800a52e:	2301      	movs	r3, #1
 800a530:	4652      	mov	r2, sl
 800a532:	4649      	mov	r1, r9
 800a534:	4638      	mov	r0, r7
 800a536:	47c0      	blx	r8
 800a538:	3001      	adds	r0, #1
 800a53a:	d103      	bne.n	800a544 <_printf_common+0xac>
 800a53c:	f04f 30ff 	mov.w	r0, #4294967295
 800a540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a544:	3501      	adds	r5, #1
 800a546:	e7c6      	b.n	800a4d6 <_printf_common+0x3e>
 800a548:	18e1      	adds	r1, r4, r3
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	2030      	movs	r0, #48	; 0x30
 800a54e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a552:	4422      	add	r2, r4
 800a554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a55c:	3302      	adds	r3, #2
 800a55e:	e7c7      	b.n	800a4f0 <_printf_common+0x58>
 800a560:	2301      	movs	r3, #1
 800a562:	4622      	mov	r2, r4
 800a564:	4649      	mov	r1, r9
 800a566:	4638      	mov	r0, r7
 800a568:	47c0      	blx	r8
 800a56a:	3001      	adds	r0, #1
 800a56c:	d0e6      	beq.n	800a53c <_printf_common+0xa4>
 800a56e:	3601      	adds	r6, #1
 800a570:	e7d9      	b.n	800a526 <_printf_common+0x8e>
	...

0800a574 <_printf_i>:
 800a574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a578:	460c      	mov	r4, r1
 800a57a:	4691      	mov	r9, r2
 800a57c:	7e27      	ldrb	r7, [r4, #24]
 800a57e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a580:	2f78      	cmp	r7, #120	; 0x78
 800a582:	4680      	mov	r8, r0
 800a584:	469a      	mov	sl, r3
 800a586:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a58a:	d807      	bhi.n	800a59c <_printf_i+0x28>
 800a58c:	2f62      	cmp	r7, #98	; 0x62
 800a58e:	d80a      	bhi.n	800a5a6 <_printf_i+0x32>
 800a590:	2f00      	cmp	r7, #0
 800a592:	f000 80d8 	beq.w	800a746 <_printf_i+0x1d2>
 800a596:	2f58      	cmp	r7, #88	; 0x58
 800a598:	f000 80a3 	beq.w	800a6e2 <_printf_i+0x16e>
 800a59c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a5a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5a4:	e03a      	b.n	800a61c <_printf_i+0xa8>
 800a5a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5aa:	2b15      	cmp	r3, #21
 800a5ac:	d8f6      	bhi.n	800a59c <_printf_i+0x28>
 800a5ae:	a001      	add	r0, pc, #4	; (adr r0, 800a5b4 <_printf_i+0x40>)
 800a5b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a5b4:	0800a60d 	.word	0x0800a60d
 800a5b8:	0800a621 	.word	0x0800a621
 800a5bc:	0800a59d 	.word	0x0800a59d
 800a5c0:	0800a59d 	.word	0x0800a59d
 800a5c4:	0800a59d 	.word	0x0800a59d
 800a5c8:	0800a59d 	.word	0x0800a59d
 800a5cc:	0800a621 	.word	0x0800a621
 800a5d0:	0800a59d 	.word	0x0800a59d
 800a5d4:	0800a59d 	.word	0x0800a59d
 800a5d8:	0800a59d 	.word	0x0800a59d
 800a5dc:	0800a59d 	.word	0x0800a59d
 800a5e0:	0800a72d 	.word	0x0800a72d
 800a5e4:	0800a651 	.word	0x0800a651
 800a5e8:	0800a70f 	.word	0x0800a70f
 800a5ec:	0800a59d 	.word	0x0800a59d
 800a5f0:	0800a59d 	.word	0x0800a59d
 800a5f4:	0800a74f 	.word	0x0800a74f
 800a5f8:	0800a59d 	.word	0x0800a59d
 800a5fc:	0800a651 	.word	0x0800a651
 800a600:	0800a59d 	.word	0x0800a59d
 800a604:	0800a59d 	.word	0x0800a59d
 800a608:	0800a717 	.word	0x0800a717
 800a60c:	680b      	ldr	r3, [r1, #0]
 800a60e:	1d1a      	adds	r2, r3, #4
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	600a      	str	r2, [r1, #0]
 800a614:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a61c:	2301      	movs	r3, #1
 800a61e:	e0a3      	b.n	800a768 <_printf_i+0x1f4>
 800a620:	6825      	ldr	r5, [r4, #0]
 800a622:	6808      	ldr	r0, [r1, #0]
 800a624:	062e      	lsls	r6, r5, #24
 800a626:	f100 0304 	add.w	r3, r0, #4
 800a62a:	d50a      	bpl.n	800a642 <_printf_i+0xce>
 800a62c:	6805      	ldr	r5, [r0, #0]
 800a62e:	600b      	str	r3, [r1, #0]
 800a630:	2d00      	cmp	r5, #0
 800a632:	da03      	bge.n	800a63c <_printf_i+0xc8>
 800a634:	232d      	movs	r3, #45	; 0x2d
 800a636:	426d      	negs	r5, r5
 800a638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a63c:	485e      	ldr	r0, [pc, #376]	; (800a7b8 <_printf_i+0x244>)
 800a63e:	230a      	movs	r3, #10
 800a640:	e019      	b.n	800a676 <_printf_i+0x102>
 800a642:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a646:	6805      	ldr	r5, [r0, #0]
 800a648:	600b      	str	r3, [r1, #0]
 800a64a:	bf18      	it	ne
 800a64c:	b22d      	sxthne	r5, r5
 800a64e:	e7ef      	b.n	800a630 <_printf_i+0xbc>
 800a650:	680b      	ldr	r3, [r1, #0]
 800a652:	6825      	ldr	r5, [r4, #0]
 800a654:	1d18      	adds	r0, r3, #4
 800a656:	6008      	str	r0, [r1, #0]
 800a658:	0628      	lsls	r0, r5, #24
 800a65a:	d501      	bpl.n	800a660 <_printf_i+0xec>
 800a65c:	681d      	ldr	r5, [r3, #0]
 800a65e:	e002      	b.n	800a666 <_printf_i+0xf2>
 800a660:	0669      	lsls	r1, r5, #25
 800a662:	d5fb      	bpl.n	800a65c <_printf_i+0xe8>
 800a664:	881d      	ldrh	r5, [r3, #0]
 800a666:	4854      	ldr	r0, [pc, #336]	; (800a7b8 <_printf_i+0x244>)
 800a668:	2f6f      	cmp	r7, #111	; 0x6f
 800a66a:	bf0c      	ite	eq
 800a66c:	2308      	moveq	r3, #8
 800a66e:	230a      	movne	r3, #10
 800a670:	2100      	movs	r1, #0
 800a672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a676:	6866      	ldr	r6, [r4, #4]
 800a678:	60a6      	str	r6, [r4, #8]
 800a67a:	2e00      	cmp	r6, #0
 800a67c:	bfa2      	ittt	ge
 800a67e:	6821      	ldrge	r1, [r4, #0]
 800a680:	f021 0104 	bicge.w	r1, r1, #4
 800a684:	6021      	strge	r1, [r4, #0]
 800a686:	b90d      	cbnz	r5, 800a68c <_printf_i+0x118>
 800a688:	2e00      	cmp	r6, #0
 800a68a:	d04d      	beq.n	800a728 <_printf_i+0x1b4>
 800a68c:	4616      	mov	r6, r2
 800a68e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a692:	fb03 5711 	mls	r7, r3, r1, r5
 800a696:	5dc7      	ldrb	r7, [r0, r7]
 800a698:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a69c:	462f      	mov	r7, r5
 800a69e:	42bb      	cmp	r3, r7
 800a6a0:	460d      	mov	r5, r1
 800a6a2:	d9f4      	bls.n	800a68e <_printf_i+0x11a>
 800a6a4:	2b08      	cmp	r3, #8
 800a6a6:	d10b      	bne.n	800a6c0 <_printf_i+0x14c>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	07df      	lsls	r7, r3, #31
 800a6ac:	d508      	bpl.n	800a6c0 <_printf_i+0x14c>
 800a6ae:	6923      	ldr	r3, [r4, #16]
 800a6b0:	6861      	ldr	r1, [r4, #4]
 800a6b2:	4299      	cmp	r1, r3
 800a6b4:	bfde      	ittt	le
 800a6b6:	2330      	movle	r3, #48	; 0x30
 800a6b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6c0:	1b92      	subs	r2, r2, r6
 800a6c2:	6122      	str	r2, [r4, #16]
 800a6c4:	f8cd a000 	str.w	sl, [sp]
 800a6c8:	464b      	mov	r3, r9
 800a6ca:	aa03      	add	r2, sp, #12
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	f7ff fee2 	bl	800a498 <_printf_common>
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	d14c      	bne.n	800a772 <_printf_i+0x1fe>
 800a6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6dc:	b004      	add	sp, #16
 800a6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e2:	4835      	ldr	r0, [pc, #212]	; (800a7b8 <_printf_i+0x244>)
 800a6e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	680e      	ldr	r6, [r1, #0]
 800a6ec:	061f      	lsls	r7, r3, #24
 800a6ee:	f856 5b04 	ldr.w	r5, [r6], #4
 800a6f2:	600e      	str	r6, [r1, #0]
 800a6f4:	d514      	bpl.n	800a720 <_printf_i+0x1ac>
 800a6f6:	07d9      	lsls	r1, r3, #31
 800a6f8:	bf44      	itt	mi
 800a6fa:	f043 0320 	orrmi.w	r3, r3, #32
 800a6fe:	6023      	strmi	r3, [r4, #0]
 800a700:	b91d      	cbnz	r5, 800a70a <_printf_i+0x196>
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	f023 0320 	bic.w	r3, r3, #32
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	2310      	movs	r3, #16
 800a70c:	e7b0      	b.n	800a670 <_printf_i+0xfc>
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	f043 0320 	orr.w	r3, r3, #32
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	2378      	movs	r3, #120	; 0x78
 800a718:	4828      	ldr	r0, [pc, #160]	; (800a7bc <_printf_i+0x248>)
 800a71a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a71e:	e7e3      	b.n	800a6e8 <_printf_i+0x174>
 800a720:	065e      	lsls	r6, r3, #25
 800a722:	bf48      	it	mi
 800a724:	b2ad      	uxthmi	r5, r5
 800a726:	e7e6      	b.n	800a6f6 <_printf_i+0x182>
 800a728:	4616      	mov	r6, r2
 800a72a:	e7bb      	b.n	800a6a4 <_printf_i+0x130>
 800a72c:	680b      	ldr	r3, [r1, #0]
 800a72e:	6826      	ldr	r6, [r4, #0]
 800a730:	6960      	ldr	r0, [r4, #20]
 800a732:	1d1d      	adds	r5, r3, #4
 800a734:	600d      	str	r5, [r1, #0]
 800a736:	0635      	lsls	r5, r6, #24
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	d501      	bpl.n	800a740 <_printf_i+0x1cc>
 800a73c:	6018      	str	r0, [r3, #0]
 800a73e:	e002      	b.n	800a746 <_printf_i+0x1d2>
 800a740:	0671      	lsls	r1, r6, #25
 800a742:	d5fb      	bpl.n	800a73c <_printf_i+0x1c8>
 800a744:	8018      	strh	r0, [r3, #0]
 800a746:	2300      	movs	r3, #0
 800a748:	6123      	str	r3, [r4, #16]
 800a74a:	4616      	mov	r6, r2
 800a74c:	e7ba      	b.n	800a6c4 <_printf_i+0x150>
 800a74e:	680b      	ldr	r3, [r1, #0]
 800a750:	1d1a      	adds	r2, r3, #4
 800a752:	600a      	str	r2, [r1, #0]
 800a754:	681e      	ldr	r6, [r3, #0]
 800a756:	6862      	ldr	r2, [r4, #4]
 800a758:	2100      	movs	r1, #0
 800a75a:	4630      	mov	r0, r6
 800a75c:	f7f5 fd50 	bl	8000200 <memchr>
 800a760:	b108      	cbz	r0, 800a766 <_printf_i+0x1f2>
 800a762:	1b80      	subs	r0, r0, r6
 800a764:	6060      	str	r0, [r4, #4]
 800a766:	6863      	ldr	r3, [r4, #4]
 800a768:	6123      	str	r3, [r4, #16]
 800a76a:	2300      	movs	r3, #0
 800a76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a770:	e7a8      	b.n	800a6c4 <_printf_i+0x150>
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	4632      	mov	r2, r6
 800a776:	4649      	mov	r1, r9
 800a778:	4640      	mov	r0, r8
 800a77a:	47d0      	blx	sl
 800a77c:	3001      	adds	r0, #1
 800a77e:	d0ab      	beq.n	800a6d8 <_printf_i+0x164>
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	079b      	lsls	r3, r3, #30
 800a784:	d413      	bmi.n	800a7ae <_printf_i+0x23a>
 800a786:	68e0      	ldr	r0, [r4, #12]
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	4298      	cmp	r0, r3
 800a78c:	bfb8      	it	lt
 800a78e:	4618      	movlt	r0, r3
 800a790:	e7a4      	b.n	800a6dc <_printf_i+0x168>
 800a792:	2301      	movs	r3, #1
 800a794:	4632      	mov	r2, r6
 800a796:	4649      	mov	r1, r9
 800a798:	4640      	mov	r0, r8
 800a79a:	47d0      	blx	sl
 800a79c:	3001      	adds	r0, #1
 800a79e:	d09b      	beq.n	800a6d8 <_printf_i+0x164>
 800a7a0:	3501      	adds	r5, #1
 800a7a2:	68e3      	ldr	r3, [r4, #12]
 800a7a4:	9903      	ldr	r1, [sp, #12]
 800a7a6:	1a5b      	subs	r3, r3, r1
 800a7a8:	42ab      	cmp	r3, r5
 800a7aa:	dcf2      	bgt.n	800a792 <_printf_i+0x21e>
 800a7ac:	e7eb      	b.n	800a786 <_printf_i+0x212>
 800a7ae:	2500      	movs	r5, #0
 800a7b0:	f104 0619 	add.w	r6, r4, #25
 800a7b4:	e7f5      	b.n	800a7a2 <_printf_i+0x22e>
 800a7b6:	bf00      	nop
 800a7b8:	0800e3fe 	.word	0x0800e3fe
 800a7bc:	0800e40f 	.word	0x0800e40f

0800a7c0 <iprintf>:
 800a7c0:	b40f      	push	{r0, r1, r2, r3}
 800a7c2:	4b0a      	ldr	r3, [pc, #40]	; (800a7ec <iprintf+0x2c>)
 800a7c4:	b513      	push	{r0, r1, r4, lr}
 800a7c6:	681c      	ldr	r4, [r3, #0]
 800a7c8:	b124      	cbz	r4, 800a7d4 <iprintf+0x14>
 800a7ca:	69a3      	ldr	r3, [r4, #24]
 800a7cc:	b913      	cbnz	r3, 800a7d4 <iprintf+0x14>
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f001 f902 	bl	800b9d8 <__sinit>
 800a7d4:	ab05      	add	r3, sp, #20
 800a7d6:	9a04      	ldr	r2, [sp, #16]
 800a7d8:	68a1      	ldr	r1, [r4, #8]
 800a7da:	9301      	str	r3, [sp, #4]
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f001 ffab 	bl	800c738 <_vfiprintf_r>
 800a7e2:	b002      	add	sp, #8
 800a7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7e8:	b004      	add	sp, #16
 800a7ea:	4770      	bx	lr
 800a7ec:	20000020 	.word	0x20000020

0800a7f0 <sniprintf>:
 800a7f0:	b40c      	push	{r2, r3}
 800a7f2:	b530      	push	{r4, r5, lr}
 800a7f4:	4b17      	ldr	r3, [pc, #92]	; (800a854 <sniprintf+0x64>)
 800a7f6:	1e0c      	subs	r4, r1, #0
 800a7f8:	681d      	ldr	r5, [r3, #0]
 800a7fa:	b09d      	sub	sp, #116	; 0x74
 800a7fc:	da08      	bge.n	800a810 <sniprintf+0x20>
 800a7fe:	238b      	movs	r3, #139	; 0x8b
 800a800:	602b      	str	r3, [r5, #0]
 800a802:	f04f 30ff 	mov.w	r0, #4294967295
 800a806:	b01d      	add	sp, #116	; 0x74
 800a808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a80c:	b002      	add	sp, #8
 800a80e:	4770      	bx	lr
 800a810:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a814:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a818:	bf14      	ite	ne
 800a81a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a81e:	4623      	moveq	r3, r4
 800a820:	9304      	str	r3, [sp, #16]
 800a822:	9307      	str	r3, [sp, #28]
 800a824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a828:	9002      	str	r0, [sp, #8]
 800a82a:	9006      	str	r0, [sp, #24]
 800a82c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a830:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a832:	ab21      	add	r3, sp, #132	; 0x84
 800a834:	a902      	add	r1, sp, #8
 800a836:	4628      	mov	r0, r5
 800a838:	9301      	str	r3, [sp, #4]
 800a83a:	f001 fe53 	bl	800c4e4 <_svfiprintf_r>
 800a83e:	1c43      	adds	r3, r0, #1
 800a840:	bfbc      	itt	lt
 800a842:	238b      	movlt	r3, #139	; 0x8b
 800a844:	602b      	strlt	r3, [r5, #0]
 800a846:	2c00      	cmp	r4, #0
 800a848:	d0dd      	beq.n	800a806 <sniprintf+0x16>
 800a84a:	9b02      	ldr	r3, [sp, #8]
 800a84c:	2200      	movs	r2, #0
 800a84e:	701a      	strb	r2, [r3, #0]
 800a850:	e7d9      	b.n	800a806 <sniprintf+0x16>
 800a852:	bf00      	nop
 800a854:	20000020 	.word	0x20000020

0800a858 <strcspn>:
 800a858:	b570      	push	{r4, r5, r6, lr}
 800a85a:	4603      	mov	r3, r0
 800a85c:	461e      	mov	r6, r3
 800a85e:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a862:	b144      	cbz	r4, 800a876 <strcspn+0x1e>
 800a864:	1e4a      	subs	r2, r1, #1
 800a866:	e001      	b.n	800a86c <strcspn+0x14>
 800a868:	42a5      	cmp	r5, r4
 800a86a:	d004      	beq.n	800a876 <strcspn+0x1e>
 800a86c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a870:	2d00      	cmp	r5, #0
 800a872:	d1f9      	bne.n	800a868 <strcspn+0x10>
 800a874:	e7f2      	b.n	800a85c <strcspn+0x4>
 800a876:	1a30      	subs	r0, r6, r0
 800a878:	bd70      	pop	{r4, r5, r6, pc}

0800a87a <strstr>:
 800a87a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a87c:	780c      	ldrb	r4, [r1, #0]
 800a87e:	b164      	cbz	r4, 800a89a <strstr+0x20>
 800a880:	4603      	mov	r3, r0
 800a882:	781a      	ldrb	r2, [r3, #0]
 800a884:	4618      	mov	r0, r3
 800a886:	1c5e      	adds	r6, r3, #1
 800a888:	b90a      	cbnz	r2, 800a88e <strstr+0x14>
 800a88a:	4610      	mov	r0, r2
 800a88c:	e005      	b.n	800a89a <strstr+0x20>
 800a88e:	4294      	cmp	r4, r2
 800a890:	d108      	bne.n	800a8a4 <strstr+0x2a>
 800a892:	460d      	mov	r5, r1
 800a894:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a898:	b902      	cbnz	r2, 800a89c <strstr+0x22>
 800a89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a89c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a8a0:	4297      	cmp	r7, r2
 800a8a2:	d0f7      	beq.n	800a894 <strstr+0x1a>
 800a8a4:	4633      	mov	r3, r6
 800a8a6:	e7ec      	b.n	800a882 <strstr+0x8>

0800a8a8 <_strtol_l.isra.0>:
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ae:	d001      	beq.n	800a8b4 <_strtol_l.isra.0+0xc>
 800a8b0:	2b24      	cmp	r3, #36	; 0x24
 800a8b2:	d906      	bls.n	800a8c2 <_strtol_l.isra.0+0x1a>
 800a8b4:	f7ff fada 	bl	8009e6c <__errno>
 800a8b8:	2316      	movs	r3, #22
 800a8ba:	6003      	str	r3, [r0, #0]
 800a8bc:	2000      	movs	r0, #0
 800a8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c2:	4f3a      	ldr	r7, [pc, #232]	; (800a9ac <_strtol_l.isra.0+0x104>)
 800a8c4:	468e      	mov	lr, r1
 800a8c6:	4676      	mov	r6, lr
 800a8c8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a8cc:	5de5      	ldrb	r5, [r4, r7]
 800a8ce:	f015 0508 	ands.w	r5, r5, #8
 800a8d2:	d1f8      	bne.n	800a8c6 <_strtol_l.isra.0+0x1e>
 800a8d4:	2c2d      	cmp	r4, #45	; 0x2d
 800a8d6:	d134      	bne.n	800a942 <_strtol_l.isra.0+0x9a>
 800a8d8:	f89e 4000 	ldrb.w	r4, [lr]
 800a8dc:	f04f 0801 	mov.w	r8, #1
 800a8e0:	f106 0e02 	add.w	lr, r6, #2
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d05c      	beq.n	800a9a2 <_strtol_l.isra.0+0xfa>
 800a8e8:	2b10      	cmp	r3, #16
 800a8ea:	d10c      	bne.n	800a906 <_strtol_l.isra.0+0x5e>
 800a8ec:	2c30      	cmp	r4, #48	; 0x30
 800a8ee:	d10a      	bne.n	800a906 <_strtol_l.isra.0+0x5e>
 800a8f0:	f89e 4000 	ldrb.w	r4, [lr]
 800a8f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a8f8:	2c58      	cmp	r4, #88	; 0x58
 800a8fa:	d14d      	bne.n	800a998 <_strtol_l.isra.0+0xf0>
 800a8fc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a900:	2310      	movs	r3, #16
 800a902:	f10e 0e02 	add.w	lr, lr, #2
 800a906:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a90a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a90e:	2600      	movs	r6, #0
 800a910:	fbbc f9f3 	udiv	r9, ip, r3
 800a914:	4635      	mov	r5, r6
 800a916:	fb03 ca19 	mls	sl, r3, r9, ip
 800a91a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a91e:	2f09      	cmp	r7, #9
 800a920:	d818      	bhi.n	800a954 <_strtol_l.isra.0+0xac>
 800a922:	463c      	mov	r4, r7
 800a924:	42a3      	cmp	r3, r4
 800a926:	dd24      	ble.n	800a972 <_strtol_l.isra.0+0xca>
 800a928:	2e00      	cmp	r6, #0
 800a92a:	db1f      	blt.n	800a96c <_strtol_l.isra.0+0xc4>
 800a92c:	45a9      	cmp	r9, r5
 800a92e:	d31d      	bcc.n	800a96c <_strtol_l.isra.0+0xc4>
 800a930:	d101      	bne.n	800a936 <_strtol_l.isra.0+0x8e>
 800a932:	45a2      	cmp	sl, r4
 800a934:	db1a      	blt.n	800a96c <_strtol_l.isra.0+0xc4>
 800a936:	fb05 4503 	mla	r5, r5, r3, r4
 800a93a:	2601      	movs	r6, #1
 800a93c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a940:	e7eb      	b.n	800a91a <_strtol_l.isra.0+0x72>
 800a942:	2c2b      	cmp	r4, #43	; 0x2b
 800a944:	bf08      	it	eq
 800a946:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a94a:	46a8      	mov	r8, r5
 800a94c:	bf08      	it	eq
 800a94e:	f106 0e02 	addeq.w	lr, r6, #2
 800a952:	e7c7      	b.n	800a8e4 <_strtol_l.isra.0+0x3c>
 800a954:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a958:	2f19      	cmp	r7, #25
 800a95a:	d801      	bhi.n	800a960 <_strtol_l.isra.0+0xb8>
 800a95c:	3c37      	subs	r4, #55	; 0x37
 800a95e:	e7e1      	b.n	800a924 <_strtol_l.isra.0+0x7c>
 800a960:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a964:	2f19      	cmp	r7, #25
 800a966:	d804      	bhi.n	800a972 <_strtol_l.isra.0+0xca>
 800a968:	3c57      	subs	r4, #87	; 0x57
 800a96a:	e7db      	b.n	800a924 <_strtol_l.isra.0+0x7c>
 800a96c:	f04f 36ff 	mov.w	r6, #4294967295
 800a970:	e7e4      	b.n	800a93c <_strtol_l.isra.0+0x94>
 800a972:	2e00      	cmp	r6, #0
 800a974:	da05      	bge.n	800a982 <_strtol_l.isra.0+0xda>
 800a976:	2322      	movs	r3, #34	; 0x22
 800a978:	6003      	str	r3, [r0, #0]
 800a97a:	4665      	mov	r5, ip
 800a97c:	b942      	cbnz	r2, 800a990 <_strtol_l.isra.0+0xe8>
 800a97e:	4628      	mov	r0, r5
 800a980:	e79d      	b.n	800a8be <_strtol_l.isra.0+0x16>
 800a982:	f1b8 0f00 	cmp.w	r8, #0
 800a986:	d000      	beq.n	800a98a <_strtol_l.isra.0+0xe2>
 800a988:	426d      	negs	r5, r5
 800a98a:	2a00      	cmp	r2, #0
 800a98c:	d0f7      	beq.n	800a97e <_strtol_l.isra.0+0xd6>
 800a98e:	b10e      	cbz	r6, 800a994 <_strtol_l.isra.0+0xec>
 800a990:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a994:	6011      	str	r1, [r2, #0]
 800a996:	e7f2      	b.n	800a97e <_strtol_l.isra.0+0xd6>
 800a998:	2430      	movs	r4, #48	; 0x30
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1b3      	bne.n	800a906 <_strtol_l.isra.0+0x5e>
 800a99e:	2308      	movs	r3, #8
 800a9a0:	e7b1      	b.n	800a906 <_strtol_l.isra.0+0x5e>
 800a9a2:	2c30      	cmp	r4, #48	; 0x30
 800a9a4:	d0a4      	beq.n	800a8f0 <_strtol_l.isra.0+0x48>
 800a9a6:	230a      	movs	r3, #10
 800a9a8:	e7ad      	b.n	800a906 <_strtol_l.isra.0+0x5e>
 800a9aa:	bf00      	nop
 800a9ac:	0800e421 	.word	0x0800e421

0800a9b0 <strtol>:
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	460a      	mov	r2, r1
 800a9b4:	4601      	mov	r1, r0
 800a9b6:	4802      	ldr	r0, [pc, #8]	; (800a9c0 <strtol+0x10>)
 800a9b8:	6800      	ldr	r0, [r0, #0]
 800a9ba:	f7ff bf75 	b.w	800a8a8 <_strtol_l.isra.0>
 800a9be:	bf00      	nop
 800a9c0:	20000020 	.word	0x20000020

0800a9c4 <quorem>:
 800a9c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c8:	6903      	ldr	r3, [r0, #16]
 800a9ca:	690c      	ldr	r4, [r1, #16]
 800a9cc:	42a3      	cmp	r3, r4
 800a9ce:	4607      	mov	r7, r0
 800a9d0:	f2c0 8081 	blt.w	800aad6 <quorem+0x112>
 800a9d4:	3c01      	subs	r4, #1
 800a9d6:	f101 0814 	add.w	r8, r1, #20
 800a9da:	f100 0514 	add.w	r5, r0, #20
 800a9de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a9e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a9f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a9f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a9fc:	d331      	bcc.n	800aa62 <quorem+0x9e>
 800a9fe:	f04f 0e00 	mov.w	lr, #0
 800aa02:	4640      	mov	r0, r8
 800aa04:	46ac      	mov	ip, r5
 800aa06:	46f2      	mov	sl, lr
 800aa08:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa0c:	b293      	uxth	r3, r2
 800aa0e:	fb06 e303 	mla	r3, r6, r3, lr
 800aa12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	ebaa 0303 	sub.w	r3, sl, r3
 800aa1c:	0c12      	lsrs	r2, r2, #16
 800aa1e:	f8dc a000 	ldr.w	sl, [ip]
 800aa22:	fb06 e202 	mla	r2, r6, r2, lr
 800aa26:	fa13 f38a 	uxtah	r3, r3, sl
 800aa2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa2e:	fa1f fa82 	uxth.w	sl, r2
 800aa32:	f8dc 2000 	ldr.w	r2, [ip]
 800aa36:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800aa3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa44:	4581      	cmp	r9, r0
 800aa46:	f84c 3b04 	str.w	r3, [ip], #4
 800aa4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aa4e:	d2db      	bcs.n	800aa08 <quorem+0x44>
 800aa50:	f855 300b 	ldr.w	r3, [r5, fp]
 800aa54:	b92b      	cbnz	r3, 800aa62 <quorem+0x9e>
 800aa56:	9b01      	ldr	r3, [sp, #4]
 800aa58:	3b04      	subs	r3, #4
 800aa5a:	429d      	cmp	r5, r3
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	d32e      	bcc.n	800aabe <quorem+0xfa>
 800aa60:	613c      	str	r4, [r7, #16]
 800aa62:	4638      	mov	r0, r7
 800aa64:	f001 fae4 	bl	800c030 <__mcmp>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	db24      	blt.n	800aab6 <quorem+0xf2>
 800aa6c:	3601      	adds	r6, #1
 800aa6e:	4628      	mov	r0, r5
 800aa70:	f04f 0c00 	mov.w	ip, #0
 800aa74:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa78:	f8d0 e000 	ldr.w	lr, [r0]
 800aa7c:	b293      	uxth	r3, r2
 800aa7e:	ebac 0303 	sub.w	r3, ip, r3
 800aa82:	0c12      	lsrs	r2, r2, #16
 800aa84:	fa13 f38e 	uxtah	r3, r3, lr
 800aa88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aa8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa96:	45c1      	cmp	r9, r8
 800aa98:	f840 3b04 	str.w	r3, [r0], #4
 800aa9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aaa0:	d2e8      	bcs.n	800aa74 <quorem+0xb0>
 800aaa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aaaa:	b922      	cbnz	r2, 800aab6 <quorem+0xf2>
 800aaac:	3b04      	subs	r3, #4
 800aaae:	429d      	cmp	r5, r3
 800aab0:	461a      	mov	r2, r3
 800aab2:	d30a      	bcc.n	800aaca <quorem+0x106>
 800aab4:	613c      	str	r4, [r7, #16]
 800aab6:	4630      	mov	r0, r6
 800aab8:	b003      	add	sp, #12
 800aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aabe:	6812      	ldr	r2, [r2, #0]
 800aac0:	3b04      	subs	r3, #4
 800aac2:	2a00      	cmp	r2, #0
 800aac4:	d1cc      	bne.n	800aa60 <quorem+0x9c>
 800aac6:	3c01      	subs	r4, #1
 800aac8:	e7c7      	b.n	800aa5a <quorem+0x96>
 800aaca:	6812      	ldr	r2, [r2, #0]
 800aacc:	3b04      	subs	r3, #4
 800aace:	2a00      	cmp	r2, #0
 800aad0:	d1f0      	bne.n	800aab4 <quorem+0xf0>
 800aad2:	3c01      	subs	r4, #1
 800aad4:	e7eb      	b.n	800aaae <quorem+0xea>
 800aad6:	2000      	movs	r0, #0
 800aad8:	e7ee      	b.n	800aab8 <quorem+0xf4>
 800aada:	0000      	movs	r0, r0
 800aadc:	0000      	movs	r0, r0
	...

0800aae0 <_dtoa_r>:
 800aae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae4:	ed2d 8b02 	vpush	{d8}
 800aae8:	ec57 6b10 	vmov	r6, r7, d0
 800aaec:	b095      	sub	sp, #84	; 0x54
 800aaee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aaf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aaf4:	9105      	str	r1, [sp, #20]
 800aaf6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800aafa:	4604      	mov	r4, r0
 800aafc:	9209      	str	r2, [sp, #36]	; 0x24
 800aafe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab00:	b975      	cbnz	r5, 800ab20 <_dtoa_r+0x40>
 800ab02:	2010      	movs	r0, #16
 800ab04:	f001 f80e 	bl	800bb24 <malloc>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	6260      	str	r0, [r4, #36]	; 0x24
 800ab0c:	b920      	cbnz	r0, 800ab18 <_dtoa_r+0x38>
 800ab0e:	4bb2      	ldr	r3, [pc, #712]	; (800add8 <_dtoa_r+0x2f8>)
 800ab10:	21ea      	movs	r1, #234	; 0xea
 800ab12:	48b2      	ldr	r0, [pc, #712]	; (800addc <_dtoa_r+0x2fc>)
 800ab14:	f002 f86e 	bl	800cbf4 <__assert_func>
 800ab18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab1c:	6005      	str	r5, [r0, #0]
 800ab1e:	60c5      	str	r5, [r0, #12]
 800ab20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab22:	6819      	ldr	r1, [r3, #0]
 800ab24:	b151      	cbz	r1, 800ab3c <_dtoa_r+0x5c>
 800ab26:	685a      	ldr	r2, [r3, #4]
 800ab28:	604a      	str	r2, [r1, #4]
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	4093      	lsls	r3, r2
 800ab2e:	608b      	str	r3, [r1, #8]
 800ab30:	4620      	mov	r0, r4
 800ab32:	f001 f83f 	bl	800bbb4 <_Bfree>
 800ab36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab38:	2200      	movs	r2, #0
 800ab3a:	601a      	str	r2, [r3, #0]
 800ab3c:	1e3b      	subs	r3, r7, #0
 800ab3e:	bfb9      	ittee	lt
 800ab40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ab44:	9303      	strlt	r3, [sp, #12]
 800ab46:	2300      	movge	r3, #0
 800ab48:	f8c8 3000 	strge.w	r3, [r8]
 800ab4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ab50:	4ba3      	ldr	r3, [pc, #652]	; (800ade0 <_dtoa_r+0x300>)
 800ab52:	bfbc      	itt	lt
 800ab54:	2201      	movlt	r2, #1
 800ab56:	f8c8 2000 	strlt.w	r2, [r8]
 800ab5a:	ea33 0309 	bics.w	r3, r3, r9
 800ab5e:	d11b      	bne.n	800ab98 <_dtoa_r+0xb8>
 800ab60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab62:	f242 730f 	movw	r3, #9999	; 0x270f
 800ab66:	6013      	str	r3, [r2, #0]
 800ab68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab6c:	4333      	orrs	r3, r6
 800ab6e:	f000 857a 	beq.w	800b666 <_dtoa_r+0xb86>
 800ab72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab74:	b963      	cbnz	r3, 800ab90 <_dtoa_r+0xb0>
 800ab76:	4b9b      	ldr	r3, [pc, #620]	; (800ade4 <_dtoa_r+0x304>)
 800ab78:	e024      	b.n	800abc4 <_dtoa_r+0xe4>
 800ab7a:	4b9b      	ldr	r3, [pc, #620]	; (800ade8 <_dtoa_r+0x308>)
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	3308      	adds	r3, #8
 800ab80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	9800      	ldr	r0, [sp, #0]
 800ab86:	b015      	add	sp, #84	; 0x54
 800ab88:	ecbd 8b02 	vpop	{d8}
 800ab8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab90:	4b94      	ldr	r3, [pc, #592]	; (800ade4 <_dtoa_r+0x304>)
 800ab92:	9300      	str	r3, [sp, #0]
 800ab94:	3303      	adds	r3, #3
 800ab96:	e7f3      	b.n	800ab80 <_dtoa_r+0xa0>
 800ab98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	ec51 0b17 	vmov	r0, r1, d7
 800aba2:	2300      	movs	r3, #0
 800aba4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800aba8:	f7f5 ff9e 	bl	8000ae8 <__aeabi_dcmpeq>
 800abac:	4680      	mov	r8, r0
 800abae:	b158      	cbz	r0, 800abc8 <_dtoa_r+0xe8>
 800abb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800abb2:	2301      	movs	r3, #1
 800abb4:	6013      	str	r3, [r2, #0]
 800abb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f000 8551 	beq.w	800b660 <_dtoa_r+0xb80>
 800abbe:	488b      	ldr	r0, [pc, #556]	; (800adec <_dtoa_r+0x30c>)
 800abc0:	6018      	str	r0, [r3, #0]
 800abc2:	1e43      	subs	r3, r0, #1
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	e7dd      	b.n	800ab84 <_dtoa_r+0xa4>
 800abc8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800abcc:	aa12      	add	r2, sp, #72	; 0x48
 800abce:	a913      	add	r1, sp, #76	; 0x4c
 800abd0:	4620      	mov	r0, r4
 800abd2:	f001 fad1 	bl	800c178 <__d2b>
 800abd6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abda:	4683      	mov	fp, r0
 800abdc:	2d00      	cmp	r5, #0
 800abde:	d07c      	beq.n	800acda <_dtoa_r+0x1fa>
 800abe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abe2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800abe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800abee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800abf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800abf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800abfa:	4b7d      	ldr	r3, [pc, #500]	; (800adf0 <_dtoa_r+0x310>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	4630      	mov	r0, r6
 800ac00:	4639      	mov	r1, r7
 800ac02:	f7f5 fb51 	bl	80002a8 <__aeabi_dsub>
 800ac06:	a36e      	add	r3, pc, #440	; (adr r3, 800adc0 <_dtoa_r+0x2e0>)
 800ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0c:	f7f5 fd04 	bl	8000618 <__aeabi_dmul>
 800ac10:	a36d      	add	r3, pc, #436	; (adr r3, 800adc8 <_dtoa_r+0x2e8>)
 800ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac16:	f7f5 fb49 	bl	80002ac <__adddf3>
 800ac1a:	4606      	mov	r6, r0
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	460f      	mov	r7, r1
 800ac20:	f7f5 fc90 	bl	8000544 <__aeabi_i2d>
 800ac24:	a36a      	add	r3, pc, #424	; (adr r3, 800add0 <_dtoa_r+0x2f0>)
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	f7f5 fcf5 	bl	8000618 <__aeabi_dmul>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	4630      	mov	r0, r6
 800ac34:	4639      	mov	r1, r7
 800ac36:	f7f5 fb39 	bl	80002ac <__adddf3>
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	460f      	mov	r7, r1
 800ac3e:	f7f5 ff9b 	bl	8000b78 <__aeabi_d2iz>
 800ac42:	2200      	movs	r2, #0
 800ac44:	4682      	mov	sl, r0
 800ac46:	2300      	movs	r3, #0
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	f7f5 ff56 	bl	8000afc <__aeabi_dcmplt>
 800ac50:	b148      	cbz	r0, 800ac66 <_dtoa_r+0x186>
 800ac52:	4650      	mov	r0, sl
 800ac54:	f7f5 fc76 	bl	8000544 <__aeabi_i2d>
 800ac58:	4632      	mov	r2, r6
 800ac5a:	463b      	mov	r3, r7
 800ac5c:	f7f5 ff44 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac60:	b908      	cbnz	r0, 800ac66 <_dtoa_r+0x186>
 800ac62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac66:	f1ba 0f16 	cmp.w	sl, #22
 800ac6a:	d854      	bhi.n	800ad16 <_dtoa_r+0x236>
 800ac6c:	4b61      	ldr	r3, [pc, #388]	; (800adf4 <_dtoa_r+0x314>)
 800ac6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac7a:	f7f5 ff3f 	bl	8000afc <__aeabi_dcmplt>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d04b      	beq.n	800ad1a <_dtoa_r+0x23a>
 800ac82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac86:	2300      	movs	r3, #0
 800ac88:	930e      	str	r3, [sp, #56]	; 0x38
 800ac8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac8c:	1b5d      	subs	r5, r3, r5
 800ac8e:	1e6b      	subs	r3, r5, #1
 800ac90:	9304      	str	r3, [sp, #16]
 800ac92:	bf43      	ittte	mi
 800ac94:	2300      	movmi	r3, #0
 800ac96:	f1c5 0801 	rsbmi	r8, r5, #1
 800ac9a:	9304      	strmi	r3, [sp, #16]
 800ac9c:	f04f 0800 	movpl.w	r8, #0
 800aca0:	f1ba 0f00 	cmp.w	sl, #0
 800aca4:	db3b      	blt.n	800ad1e <_dtoa_r+0x23e>
 800aca6:	9b04      	ldr	r3, [sp, #16]
 800aca8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800acac:	4453      	add	r3, sl
 800acae:	9304      	str	r3, [sp, #16]
 800acb0:	2300      	movs	r3, #0
 800acb2:	9306      	str	r3, [sp, #24]
 800acb4:	9b05      	ldr	r3, [sp, #20]
 800acb6:	2b09      	cmp	r3, #9
 800acb8:	d869      	bhi.n	800ad8e <_dtoa_r+0x2ae>
 800acba:	2b05      	cmp	r3, #5
 800acbc:	bfc4      	itt	gt
 800acbe:	3b04      	subgt	r3, #4
 800acc0:	9305      	strgt	r3, [sp, #20]
 800acc2:	9b05      	ldr	r3, [sp, #20]
 800acc4:	f1a3 0302 	sub.w	r3, r3, #2
 800acc8:	bfcc      	ite	gt
 800acca:	2500      	movgt	r5, #0
 800accc:	2501      	movle	r5, #1
 800acce:	2b03      	cmp	r3, #3
 800acd0:	d869      	bhi.n	800ada6 <_dtoa_r+0x2c6>
 800acd2:	e8df f003 	tbb	[pc, r3]
 800acd6:	4e2c      	.short	0x4e2c
 800acd8:	5a4c      	.short	0x5a4c
 800acda:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800acde:	441d      	add	r5, r3
 800ace0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ace4:	2b20      	cmp	r3, #32
 800ace6:	bfc1      	itttt	gt
 800ace8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800acec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800acf0:	fa09 f303 	lslgt.w	r3, r9, r3
 800acf4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800acf8:	bfda      	itte	le
 800acfa:	f1c3 0320 	rsble	r3, r3, #32
 800acfe:	fa06 f003 	lslle.w	r0, r6, r3
 800ad02:	4318      	orrgt	r0, r3
 800ad04:	f7f5 fc0e 	bl	8000524 <__aeabi_ui2d>
 800ad08:	2301      	movs	r3, #1
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ad10:	3d01      	subs	r5, #1
 800ad12:	9310      	str	r3, [sp, #64]	; 0x40
 800ad14:	e771      	b.n	800abfa <_dtoa_r+0x11a>
 800ad16:	2301      	movs	r3, #1
 800ad18:	e7b6      	b.n	800ac88 <_dtoa_r+0x1a8>
 800ad1a:	900e      	str	r0, [sp, #56]	; 0x38
 800ad1c:	e7b5      	b.n	800ac8a <_dtoa_r+0x1aa>
 800ad1e:	f1ca 0300 	rsb	r3, sl, #0
 800ad22:	9306      	str	r3, [sp, #24]
 800ad24:	2300      	movs	r3, #0
 800ad26:	eba8 080a 	sub.w	r8, r8, sl
 800ad2a:	930d      	str	r3, [sp, #52]	; 0x34
 800ad2c:	e7c2      	b.n	800acb4 <_dtoa_r+0x1d4>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	9308      	str	r3, [sp, #32]
 800ad32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dc39      	bgt.n	800adac <_dtoa_r+0x2cc>
 800ad38:	f04f 0901 	mov.w	r9, #1
 800ad3c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ad40:	464b      	mov	r3, r9
 800ad42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ad46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ad48:	2200      	movs	r2, #0
 800ad4a:	6042      	str	r2, [r0, #4]
 800ad4c:	2204      	movs	r2, #4
 800ad4e:	f102 0614 	add.w	r6, r2, #20
 800ad52:	429e      	cmp	r6, r3
 800ad54:	6841      	ldr	r1, [r0, #4]
 800ad56:	d92f      	bls.n	800adb8 <_dtoa_r+0x2d8>
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f000 feeb 	bl	800bb34 <_Balloc>
 800ad5e:	9000      	str	r0, [sp, #0]
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d14b      	bne.n	800adfc <_dtoa_r+0x31c>
 800ad64:	4b24      	ldr	r3, [pc, #144]	; (800adf8 <_dtoa_r+0x318>)
 800ad66:	4602      	mov	r2, r0
 800ad68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ad6c:	e6d1      	b.n	800ab12 <_dtoa_r+0x32>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e7de      	b.n	800ad30 <_dtoa_r+0x250>
 800ad72:	2300      	movs	r3, #0
 800ad74:	9308      	str	r3, [sp, #32]
 800ad76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad78:	eb0a 0903 	add.w	r9, sl, r3
 800ad7c:	f109 0301 	add.w	r3, r9, #1
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	bfb8      	it	lt
 800ad86:	2301      	movlt	r3, #1
 800ad88:	e7dd      	b.n	800ad46 <_dtoa_r+0x266>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e7f2      	b.n	800ad74 <_dtoa_r+0x294>
 800ad8e:	2501      	movs	r5, #1
 800ad90:	2300      	movs	r3, #0
 800ad92:	9305      	str	r3, [sp, #20]
 800ad94:	9508      	str	r5, [sp, #32]
 800ad96:	f04f 39ff 	mov.w	r9, #4294967295
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ada0:	2312      	movs	r3, #18
 800ada2:	9209      	str	r2, [sp, #36]	; 0x24
 800ada4:	e7cf      	b.n	800ad46 <_dtoa_r+0x266>
 800ada6:	2301      	movs	r3, #1
 800ada8:	9308      	str	r3, [sp, #32]
 800adaa:	e7f4      	b.n	800ad96 <_dtoa_r+0x2b6>
 800adac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800adb0:	f8cd 9004 	str.w	r9, [sp, #4]
 800adb4:	464b      	mov	r3, r9
 800adb6:	e7c6      	b.n	800ad46 <_dtoa_r+0x266>
 800adb8:	3101      	adds	r1, #1
 800adba:	6041      	str	r1, [r0, #4]
 800adbc:	0052      	lsls	r2, r2, #1
 800adbe:	e7c6      	b.n	800ad4e <_dtoa_r+0x26e>
 800adc0:	636f4361 	.word	0x636f4361
 800adc4:	3fd287a7 	.word	0x3fd287a7
 800adc8:	8b60c8b3 	.word	0x8b60c8b3
 800adcc:	3fc68a28 	.word	0x3fc68a28
 800add0:	509f79fb 	.word	0x509f79fb
 800add4:	3fd34413 	.word	0x3fd34413
 800add8:	0800e52e 	.word	0x0800e52e
 800addc:	0800e545 	.word	0x0800e545
 800ade0:	7ff00000 	.word	0x7ff00000
 800ade4:	0800e52a 	.word	0x0800e52a
 800ade8:	0800e521 	.word	0x0800e521
 800adec:	0800e3fd 	.word	0x0800e3fd
 800adf0:	3ff80000 	.word	0x3ff80000
 800adf4:	0800e6a0 	.word	0x0800e6a0
 800adf8:	0800e5a4 	.word	0x0800e5a4
 800adfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adfe:	9a00      	ldr	r2, [sp, #0]
 800ae00:	601a      	str	r2, [r3, #0]
 800ae02:	9b01      	ldr	r3, [sp, #4]
 800ae04:	2b0e      	cmp	r3, #14
 800ae06:	f200 80ad 	bhi.w	800af64 <_dtoa_r+0x484>
 800ae0a:	2d00      	cmp	r5, #0
 800ae0c:	f000 80aa 	beq.w	800af64 <_dtoa_r+0x484>
 800ae10:	f1ba 0f00 	cmp.w	sl, #0
 800ae14:	dd36      	ble.n	800ae84 <_dtoa_r+0x3a4>
 800ae16:	4ac3      	ldr	r2, [pc, #780]	; (800b124 <_dtoa_r+0x644>)
 800ae18:	f00a 030f 	and.w	r3, sl, #15
 800ae1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae20:	ed93 7b00 	vldr	d7, [r3]
 800ae24:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ae28:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ae2c:	eeb0 8a47 	vmov.f32	s16, s14
 800ae30:	eef0 8a67 	vmov.f32	s17, s15
 800ae34:	d016      	beq.n	800ae64 <_dtoa_r+0x384>
 800ae36:	4bbc      	ldr	r3, [pc, #752]	; (800b128 <_dtoa_r+0x648>)
 800ae38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae40:	f7f5 fd14 	bl	800086c <__aeabi_ddiv>
 800ae44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae48:	f007 070f 	and.w	r7, r7, #15
 800ae4c:	2503      	movs	r5, #3
 800ae4e:	4eb6      	ldr	r6, [pc, #728]	; (800b128 <_dtoa_r+0x648>)
 800ae50:	b957      	cbnz	r7, 800ae68 <_dtoa_r+0x388>
 800ae52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae56:	ec53 2b18 	vmov	r2, r3, d8
 800ae5a:	f7f5 fd07 	bl	800086c <__aeabi_ddiv>
 800ae5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae62:	e029      	b.n	800aeb8 <_dtoa_r+0x3d8>
 800ae64:	2502      	movs	r5, #2
 800ae66:	e7f2      	b.n	800ae4e <_dtoa_r+0x36e>
 800ae68:	07f9      	lsls	r1, r7, #31
 800ae6a:	d508      	bpl.n	800ae7e <_dtoa_r+0x39e>
 800ae6c:	ec51 0b18 	vmov	r0, r1, d8
 800ae70:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ae74:	f7f5 fbd0 	bl	8000618 <__aeabi_dmul>
 800ae78:	ec41 0b18 	vmov	d8, r0, r1
 800ae7c:	3501      	adds	r5, #1
 800ae7e:	107f      	asrs	r7, r7, #1
 800ae80:	3608      	adds	r6, #8
 800ae82:	e7e5      	b.n	800ae50 <_dtoa_r+0x370>
 800ae84:	f000 80a6 	beq.w	800afd4 <_dtoa_r+0x4f4>
 800ae88:	f1ca 0600 	rsb	r6, sl, #0
 800ae8c:	4ba5      	ldr	r3, [pc, #660]	; (800b124 <_dtoa_r+0x644>)
 800ae8e:	4fa6      	ldr	r7, [pc, #664]	; (800b128 <_dtoa_r+0x648>)
 800ae90:	f006 020f 	and.w	r2, r6, #15
 800ae94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aea0:	f7f5 fbba 	bl	8000618 <__aeabi_dmul>
 800aea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aea8:	1136      	asrs	r6, r6, #4
 800aeaa:	2300      	movs	r3, #0
 800aeac:	2502      	movs	r5, #2
 800aeae:	2e00      	cmp	r6, #0
 800aeb0:	f040 8085 	bne.w	800afbe <_dtoa_r+0x4de>
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1d2      	bne.n	800ae5e <_dtoa_r+0x37e>
 800aeb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 808c 	beq.w	800afd8 <_dtoa_r+0x4f8>
 800aec0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aec4:	4b99      	ldr	r3, [pc, #612]	; (800b12c <_dtoa_r+0x64c>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	4630      	mov	r0, r6
 800aeca:	4639      	mov	r1, r7
 800aecc:	f7f5 fe16 	bl	8000afc <__aeabi_dcmplt>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	f000 8081 	beq.w	800afd8 <_dtoa_r+0x4f8>
 800aed6:	9b01      	ldr	r3, [sp, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d07d      	beq.n	800afd8 <_dtoa_r+0x4f8>
 800aedc:	f1b9 0f00 	cmp.w	r9, #0
 800aee0:	dd3c      	ble.n	800af5c <_dtoa_r+0x47c>
 800aee2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aee6:	9307      	str	r3, [sp, #28]
 800aee8:	2200      	movs	r2, #0
 800aeea:	4b91      	ldr	r3, [pc, #580]	; (800b130 <_dtoa_r+0x650>)
 800aeec:	4630      	mov	r0, r6
 800aeee:	4639      	mov	r1, r7
 800aef0:	f7f5 fb92 	bl	8000618 <__aeabi_dmul>
 800aef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aef8:	3501      	adds	r5, #1
 800aefa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800aefe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af02:	4628      	mov	r0, r5
 800af04:	f7f5 fb1e 	bl	8000544 <__aeabi_i2d>
 800af08:	4632      	mov	r2, r6
 800af0a:	463b      	mov	r3, r7
 800af0c:	f7f5 fb84 	bl	8000618 <__aeabi_dmul>
 800af10:	4b88      	ldr	r3, [pc, #544]	; (800b134 <_dtoa_r+0x654>)
 800af12:	2200      	movs	r2, #0
 800af14:	f7f5 f9ca 	bl	80002ac <__adddf3>
 800af18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800af1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af20:	9303      	str	r3, [sp, #12]
 800af22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af24:	2b00      	cmp	r3, #0
 800af26:	d15c      	bne.n	800afe2 <_dtoa_r+0x502>
 800af28:	4b83      	ldr	r3, [pc, #524]	; (800b138 <_dtoa_r+0x658>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	4630      	mov	r0, r6
 800af2e:	4639      	mov	r1, r7
 800af30:	f7f5 f9ba 	bl	80002a8 <__aeabi_dsub>
 800af34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af38:	4606      	mov	r6, r0
 800af3a:	460f      	mov	r7, r1
 800af3c:	f7f5 fdfc 	bl	8000b38 <__aeabi_dcmpgt>
 800af40:	2800      	cmp	r0, #0
 800af42:	f040 8296 	bne.w	800b472 <_dtoa_r+0x992>
 800af46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800af4a:	4630      	mov	r0, r6
 800af4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af50:	4639      	mov	r1, r7
 800af52:	f7f5 fdd3 	bl	8000afc <__aeabi_dcmplt>
 800af56:	2800      	cmp	r0, #0
 800af58:	f040 8288 	bne.w	800b46c <_dtoa_r+0x98c>
 800af5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af66:	2b00      	cmp	r3, #0
 800af68:	f2c0 8158 	blt.w	800b21c <_dtoa_r+0x73c>
 800af6c:	f1ba 0f0e 	cmp.w	sl, #14
 800af70:	f300 8154 	bgt.w	800b21c <_dtoa_r+0x73c>
 800af74:	4b6b      	ldr	r3, [pc, #428]	; (800b124 <_dtoa_r+0x644>)
 800af76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800af7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af80:	2b00      	cmp	r3, #0
 800af82:	f280 80e3 	bge.w	800b14c <_dtoa_r+0x66c>
 800af86:	9b01      	ldr	r3, [sp, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f300 80df 	bgt.w	800b14c <_dtoa_r+0x66c>
 800af8e:	f040 826d 	bne.w	800b46c <_dtoa_r+0x98c>
 800af92:	4b69      	ldr	r3, [pc, #420]	; (800b138 <_dtoa_r+0x658>)
 800af94:	2200      	movs	r2, #0
 800af96:	4640      	mov	r0, r8
 800af98:	4649      	mov	r1, r9
 800af9a:	f7f5 fb3d 	bl	8000618 <__aeabi_dmul>
 800af9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afa2:	f7f5 fdbf 	bl	8000b24 <__aeabi_dcmpge>
 800afa6:	9e01      	ldr	r6, [sp, #4]
 800afa8:	4637      	mov	r7, r6
 800afaa:	2800      	cmp	r0, #0
 800afac:	f040 8243 	bne.w	800b436 <_dtoa_r+0x956>
 800afb0:	9d00      	ldr	r5, [sp, #0]
 800afb2:	2331      	movs	r3, #49	; 0x31
 800afb4:	f805 3b01 	strb.w	r3, [r5], #1
 800afb8:	f10a 0a01 	add.w	sl, sl, #1
 800afbc:	e23f      	b.n	800b43e <_dtoa_r+0x95e>
 800afbe:	07f2      	lsls	r2, r6, #31
 800afc0:	d505      	bpl.n	800afce <_dtoa_r+0x4ee>
 800afc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afc6:	f7f5 fb27 	bl	8000618 <__aeabi_dmul>
 800afca:	3501      	adds	r5, #1
 800afcc:	2301      	movs	r3, #1
 800afce:	1076      	asrs	r6, r6, #1
 800afd0:	3708      	adds	r7, #8
 800afd2:	e76c      	b.n	800aeae <_dtoa_r+0x3ce>
 800afd4:	2502      	movs	r5, #2
 800afd6:	e76f      	b.n	800aeb8 <_dtoa_r+0x3d8>
 800afd8:	9b01      	ldr	r3, [sp, #4]
 800afda:	f8cd a01c 	str.w	sl, [sp, #28]
 800afde:	930c      	str	r3, [sp, #48]	; 0x30
 800afe0:	e78d      	b.n	800aefe <_dtoa_r+0x41e>
 800afe2:	9900      	ldr	r1, [sp, #0]
 800afe4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800afe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afe8:	4b4e      	ldr	r3, [pc, #312]	; (800b124 <_dtoa_r+0x644>)
 800afea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afee:	4401      	add	r1, r0
 800aff0:	9102      	str	r1, [sp, #8]
 800aff2:	9908      	ldr	r1, [sp, #32]
 800aff4:	eeb0 8a47 	vmov.f32	s16, s14
 800aff8:	eef0 8a67 	vmov.f32	s17, s15
 800affc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b000:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b004:	2900      	cmp	r1, #0
 800b006:	d045      	beq.n	800b094 <_dtoa_r+0x5b4>
 800b008:	494c      	ldr	r1, [pc, #304]	; (800b13c <_dtoa_r+0x65c>)
 800b00a:	2000      	movs	r0, #0
 800b00c:	f7f5 fc2e 	bl	800086c <__aeabi_ddiv>
 800b010:	ec53 2b18 	vmov	r2, r3, d8
 800b014:	f7f5 f948 	bl	80002a8 <__aeabi_dsub>
 800b018:	9d00      	ldr	r5, [sp, #0]
 800b01a:	ec41 0b18 	vmov	d8, r0, r1
 800b01e:	4639      	mov	r1, r7
 800b020:	4630      	mov	r0, r6
 800b022:	f7f5 fda9 	bl	8000b78 <__aeabi_d2iz>
 800b026:	900c      	str	r0, [sp, #48]	; 0x30
 800b028:	f7f5 fa8c 	bl	8000544 <__aeabi_i2d>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4630      	mov	r0, r6
 800b032:	4639      	mov	r1, r7
 800b034:	f7f5 f938 	bl	80002a8 <__aeabi_dsub>
 800b038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b03a:	3330      	adds	r3, #48	; 0x30
 800b03c:	f805 3b01 	strb.w	r3, [r5], #1
 800b040:	ec53 2b18 	vmov	r2, r3, d8
 800b044:	4606      	mov	r6, r0
 800b046:	460f      	mov	r7, r1
 800b048:	f7f5 fd58 	bl	8000afc <__aeabi_dcmplt>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	d165      	bne.n	800b11c <_dtoa_r+0x63c>
 800b050:	4632      	mov	r2, r6
 800b052:	463b      	mov	r3, r7
 800b054:	4935      	ldr	r1, [pc, #212]	; (800b12c <_dtoa_r+0x64c>)
 800b056:	2000      	movs	r0, #0
 800b058:	f7f5 f926 	bl	80002a8 <__aeabi_dsub>
 800b05c:	ec53 2b18 	vmov	r2, r3, d8
 800b060:	f7f5 fd4c 	bl	8000afc <__aeabi_dcmplt>
 800b064:	2800      	cmp	r0, #0
 800b066:	f040 80b9 	bne.w	800b1dc <_dtoa_r+0x6fc>
 800b06a:	9b02      	ldr	r3, [sp, #8]
 800b06c:	429d      	cmp	r5, r3
 800b06e:	f43f af75 	beq.w	800af5c <_dtoa_r+0x47c>
 800b072:	4b2f      	ldr	r3, [pc, #188]	; (800b130 <_dtoa_r+0x650>)
 800b074:	ec51 0b18 	vmov	r0, r1, d8
 800b078:	2200      	movs	r2, #0
 800b07a:	f7f5 facd 	bl	8000618 <__aeabi_dmul>
 800b07e:	4b2c      	ldr	r3, [pc, #176]	; (800b130 <_dtoa_r+0x650>)
 800b080:	ec41 0b18 	vmov	d8, r0, r1
 800b084:	2200      	movs	r2, #0
 800b086:	4630      	mov	r0, r6
 800b088:	4639      	mov	r1, r7
 800b08a:	f7f5 fac5 	bl	8000618 <__aeabi_dmul>
 800b08e:	4606      	mov	r6, r0
 800b090:	460f      	mov	r7, r1
 800b092:	e7c4      	b.n	800b01e <_dtoa_r+0x53e>
 800b094:	ec51 0b17 	vmov	r0, r1, d7
 800b098:	f7f5 fabe 	bl	8000618 <__aeabi_dmul>
 800b09c:	9b02      	ldr	r3, [sp, #8]
 800b09e:	9d00      	ldr	r5, [sp, #0]
 800b0a0:	930c      	str	r3, [sp, #48]	; 0x30
 800b0a2:	ec41 0b18 	vmov	d8, r0, r1
 800b0a6:	4639      	mov	r1, r7
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7f5 fd65 	bl	8000b78 <__aeabi_d2iz>
 800b0ae:	9011      	str	r0, [sp, #68]	; 0x44
 800b0b0:	f7f5 fa48 	bl	8000544 <__aeabi_i2d>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	f7f5 f8f4 	bl	80002a8 <__aeabi_dsub>
 800b0c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0c2:	3330      	adds	r3, #48	; 0x30
 800b0c4:	f805 3b01 	strb.w	r3, [r5], #1
 800b0c8:	9b02      	ldr	r3, [sp, #8]
 800b0ca:	429d      	cmp	r5, r3
 800b0cc:	4606      	mov	r6, r0
 800b0ce:	460f      	mov	r7, r1
 800b0d0:	f04f 0200 	mov.w	r2, #0
 800b0d4:	d134      	bne.n	800b140 <_dtoa_r+0x660>
 800b0d6:	4b19      	ldr	r3, [pc, #100]	; (800b13c <_dtoa_r+0x65c>)
 800b0d8:	ec51 0b18 	vmov	r0, r1, d8
 800b0dc:	f7f5 f8e6 	bl	80002ac <__adddf3>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	4639      	mov	r1, r7
 800b0e8:	f7f5 fd26 	bl	8000b38 <__aeabi_dcmpgt>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d175      	bne.n	800b1dc <_dtoa_r+0x6fc>
 800b0f0:	ec53 2b18 	vmov	r2, r3, d8
 800b0f4:	4911      	ldr	r1, [pc, #68]	; (800b13c <_dtoa_r+0x65c>)
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	f7f5 f8d6 	bl	80002a8 <__aeabi_dsub>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	4630      	mov	r0, r6
 800b102:	4639      	mov	r1, r7
 800b104:	f7f5 fcfa 	bl	8000afc <__aeabi_dcmplt>
 800b108:	2800      	cmp	r0, #0
 800b10a:	f43f af27 	beq.w	800af5c <_dtoa_r+0x47c>
 800b10e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b110:	1e6b      	subs	r3, r5, #1
 800b112:	930c      	str	r3, [sp, #48]	; 0x30
 800b114:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b118:	2b30      	cmp	r3, #48	; 0x30
 800b11a:	d0f8      	beq.n	800b10e <_dtoa_r+0x62e>
 800b11c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b120:	e04a      	b.n	800b1b8 <_dtoa_r+0x6d8>
 800b122:	bf00      	nop
 800b124:	0800e6a0 	.word	0x0800e6a0
 800b128:	0800e678 	.word	0x0800e678
 800b12c:	3ff00000 	.word	0x3ff00000
 800b130:	40240000 	.word	0x40240000
 800b134:	401c0000 	.word	0x401c0000
 800b138:	40140000 	.word	0x40140000
 800b13c:	3fe00000 	.word	0x3fe00000
 800b140:	4baf      	ldr	r3, [pc, #700]	; (800b400 <_dtoa_r+0x920>)
 800b142:	f7f5 fa69 	bl	8000618 <__aeabi_dmul>
 800b146:	4606      	mov	r6, r0
 800b148:	460f      	mov	r7, r1
 800b14a:	e7ac      	b.n	800b0a6 <_dtoa_r+0x5c6>
 800b14c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b150:	9d00      	ldr	r5, [sp, #0]
 800b152:	4642      	mov	r2, r8
 800b154:	464b      	mov	r3, r9
 800b156:	4630      	mov	r0, r6
 800b158:	4639      	mov	r1, r7
 800b15a:	f7f5 fb87 	bl	800086c <__aeabi_ddiv>
 800b15e:	f7f5 fd0b 	bl	8000b78 <__aeabi_d2iz>
 800b162:	9002      	str	r0, [sp, #8]
 800b164:	f7f5 f9ee 	bl	8000544 <__aeabi_i2d>
 800b168:	4642      	mov	r2, r8
 800b16a:	464b      	mov	r3, r9
 800b16c:	f7f5 fa54 	bl	8000618 <__aeabi_dmul>
 800b170:	4602      	mov	r2, r0
 800b172:	460b      	mov	r3, r1
 800b174:	4630      	mov	r0, r6
 800b176:	4639      	mov	r1, r7
 800b178:	f7f5 f896 	bl	80002a8 <__aeabi_dsub>
 800b17c:	9e02      	ldr	r6, [sp, #8]
 800b17e:	9f01      	ldr	r7, [sp, #4]
 800b180:	3630      	adds	r6, #48	; 0x30
 800b182:	f805 6b01 	strb.w	r6, [r5], #1
 800b186:	9e00      	ldr	r6, [sp, #0]
 800b188:	1bae      	subs	r6, r5, r6
 800b18a:	42b7      	cmp	r7, r6
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	d137      	bne.n	800b202 <_dtoa_r+0x722>
 800b192:	f7f5 f88b 	bl	80002ac <__adddf3>
 800b196:	4642      	mov	r2, r8
 800b198:	464b      	mov	r3, r9
 800b19a:	4606      	mov	r6, r0
 800b19c:	460f      	mov	r7, r1
 800b19e:	f7f5 fccb 	bl	8000b38 <__aeabi_dcmpgt>
 800b1a2:	b9c8      	cbnz	r0, 800b1d8 <_dtoa_r+0x6f8>
 800b1a4:	4642      	mov	r2, r8
 800b1a6:	464b      	mov	r3, r9
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	f7f5 fc9c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b1b0:	b110      	cbz	r0, 800b1b8 <_dtoa_r+0x6d8>
 800b1b2:	9b02      	ldr	r3, [sp, #8]
 800b1b4:	07d9      	lsls	r1, r3, #31
 800b1b6:	d40f      	bmi.n	800b1d8 <_dtoa_r+0x6f8>
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	4659      	mov	r1, fp
 800b1bc:	f000 fcfa 	bl	800bbb4 <_Bfree>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	702b      	strb	r3, [r5, #0]
 800b1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1c6:	f10a 0001 	add.w	r0, sl, #1
 800b1ca:	6018      	str	r0, [r3, #0]
 800b1cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f43f acd8 	beq.w	800ab84 <_dtoa_r+0xa4>
 800b1d4:	601d      	str	r5, [r3, #0]
 800b1d6:	e4d5      	b.n	800ab84 <_dtoa_r+0xa4>
 800b1d8:	f8cd a01c 	str.w	sl, [sp, #28]
 800b1dc:	462b      	mov	r3, r5
 800b1de:	461d      	mov	r5, r3
 800b1e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1e4:	2a39      	cmp	r2, #57	; 0x39
 800b1e6:	d108      	bne.n	800b1fa <_dtoa_r+0x71a>
 800b1e8:	9a00      	ldr	r2, [sp, #0]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d1f7      	bne.n	800b1de <_dtoa_r+0x6fe>
 800b1ee:	9a07      	ldr	r2, [sp, #28]
 800b1f0:	9900      	ldr	r1, [sp, #0]
 800b1f2:	3201      	adds	r2, #1
 800b1f4:	9207      	str	r2, [sp, #28]
 800b1f6:	2230      	movs	r2, #48	; 0x30
 800b1f8:	700a      	strb	r2, [r1, #0]
 800b1fa:	781a      	ldrb	r2, [r3, #0]
 800b1fc:	3201      	adds	r2, #1
 800b1fe:	701a      	strb	r2, [r3, #0]
 800b200:	e78c      	b.n	800b11c <_dtoa_r+0x63c>
 800b202:	4b7f      	ldr	r3, [pc, #508]	; (800b400 <_dtoa_r+0x920>)
 800b204:	2200      	movs	r2, #0
 800b206:	f7f5 fa07 	bl	8000618 <__aeabi_dmul>
 800b20a:	2200      	movs	r2, #0
 800b20c:	2300      	movs	r3, #0
 800b20e:	4606      	mov	r6, r0
 800b210:	460f      	mov	r7, r1
 800b212:	f7f5 fc69 	bl	8000ae8 <__aeabi_dcmpeq>
 800b216:	2800      	cmp	r0, #0
 800b218:	d09b      	beq.n	800b152 <_dtoa_r+0x672>
 800b21a:	e7cd      	b.n	800b1b8 <_dtoa_r+0x6d8>
 800b21c:	9a08      	ldr	r2, [sp, #32]
 800b21e:	2a00      	cmp	r2, #0
 800b220:	f000 80c4 	beq.w	800b3ac <_dtoa_r+0x8cc>
 800b224:	9a05      	ldr	r2, [sp, #20]
 800b226:	2a01      	cmp	r2, #1
 800b228:	f300 80a8 	bgt.w	800b37c <_dtoa_r+0x89c>
 800b22c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b22e:	2a00      	cmp	r2, #0
 800b230:	f000 80a0 	beq.w	800b374 <_dtoa_r+0x894>
 800b234:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b238:	9e06      	ldr	r6, [sp, #24]
 800b23a:	4645      	mov	r5, r8
 800b23c:	9a04      	ldr	r2, [sp, #16]
 800b23e:	2101      	movs	r1, #1
 800b240:	441a      	add	r2, r3
 800b242:	4620      	mov	r0, r4
 800b244:	4498      	add	r8, r3
 800b246:	9204      	str	r2, [sp, #16]
 800b248:	f000 fd70 	bl	800bd2c <__i2b>
 800b24c:	4607      	mov	r7, r0
 800b24e:	2d00      	cmp	r5, #0
 800b250:	dd0b      	ble.n	800b26a <_dtoa_r+0x78a>
 800b252:	9b04      	ldr	r3, [sp, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	dd08      	ble.n	800b26a <_dtoa_r+0x78a>
 800b258:	42ab      	cmp	r3, r5
 800b25a:	9a04      	ldr	r2, [sp, #16]
 800b25c:	bfa8      	it	ge
 800b25e:	462b      	movge	r3, r5
 800b260:	eba8 0803 	sub.w	r8, r8, r3
 800b264:	1aed      	subs	r5, r5, r3
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	9304      	str	r3, [sp, #16]
 800b26a:	9b06      	ldr	r3, [sp, #24]
 800b26c:	b1fb      	cbz	r3, 800b2ae <_dtoa_r+0x7ce>
 800b26e:	9b08      	ldr	r3, [sp, #32]
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 809f 	beq.w	800b3b4 <_dtoa_r+0x8d4>
 800b276:	2e00      	cmp	r6, #0
 800b278:	dd11      	ble.n	800b29e <_dtoa_r+0x7be>
 800b27a:	4639      	mov	r1, r7
 800b27c:	4632      	mov	r2, r6
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 fe10 	bl	800bea4 <__pow5mult>
 800b284:	465a      	mov	r2, fp
 800b286:	4601      	mov	r1, r0
 800b288:	4607      	mov	r7, r0
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 fd64 	bl	800bd58 <__multiply>
 800b290:	4659      	mov	r1, fp
 800b292:	9007      	str	r0, [sp, #28]
 800b294:	4620      	mov	r0, r4
 800b296:	f000 fc8d 	bl	800bbb4 <_Bfree>
 800b29a:	9b07      	ldr	r3, [sp, #28]
 800b29c:	469b      	mov	fp, r3
 800b29e:	9b06      	ldr	r3, [sp, #24]
 800b2a0:	1b9a      	subs	r2, r3, r6
 800b2a2:	d004      	beq.n	800b2ae <_dtoa_r+0x7ce>
 800b2a4:	4659      	mov	r1, fp
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f000 fdfc 	bl	800bea4 <__pow5mult>
 800b2ac:	4683      	mov	fp, r0
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 fd3b 	bl	800bd2c <__i2b>
 800b2b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	4606      	mov	r6, r0
 800b2bc:	dd7c      	ble.n	800b3b8 <_dtoa_r+0x8d8>
 800b2be:	461a      	mov	r2, r3
 800b2c0:	4601      	mov	r1, r0
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 fdee 	bl	800bea4 <__pow5mult>
 800b2c8:	9b05      	ldr	r3, [sp, #20]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	dd76      	ble.n	800b3be <_dtoa_r+0x8de>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9306      	str	r3, [sp, #24]
 800b2d4:	6933      	ldr	r3, [r6, #16]
 800b2d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b2da:	6918      	ldr	r0, [r3, #16]
 800b2dc:	f000 fcd6 	bl	800bc8c <__hi0bits>
 800b2e0:	f1c0 0020 	rsb	r0, r0, #32
 800b2e4:	9b04      	ldr	r3, [sp, #16]
 800b2e6:	4418      	add	r0, r3
 800b2e8:	f010 001f 	ands.w	r0, r0, #31
 800b2ec:	f000 8086 	beq.w	800b3fc <_dtoa_r+0x91c>
 800b2f0:	f1c0 0320 	rsb	r3, r0, #32
 800b2f4:	2b04      	cmp	r3, #4
 800b2f6:	dd7f      	ble.n	800b3f8 <_dtoa_r+0x918>
 800b2f8:	f1c0 001c 	rsb	r0, r0, #28
 800b2fc:	9b04      	ldr	r3, [sp, #16]
 800b2fe:	4403      	add	r3, r0
 800b300:	4480      	add	r8, r0
 800b302:	4405      	add	r5, r0
 800b304:	9304      	str	r3, [sp, #16]
 800b306:	f1b8 0f00 	cmp.w	r8, #0
 800b30a:	dd05      	ble.n	800b318 <_dtoa_r+0x838>
 800b30c:	4659      	mov	r1, fp
 800b30e:	4642      	mov	r2, r8
 800b310:	4620      	mov	r0, r4
 800b312:	f000 fe21 	bl	800bf58 <__lshift>
 800b316:	4683      	mov	fp, r0
 800b318:	9b04      	ldr	r3, [sp, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	dd05      	ble.n	800b32a <_dtoa_r+0x84a>
 800b31e:	4631      	mov	r1, r6
 800b320:	461a      	mov	r2, r3
 800b322:	4620      	mov	r0, r4
 800b324:	f000 fe18 	bl	800bf58 <__lshift>
 800b328:	4606      	mov	r6, r0
 800b32a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d069      	beq.n	800b404 <_dtoa_r+0x924>
 800b330:	4631      	mov	r1, r6
 800b332:	4658      	mov	r0, fp
 800b334:	f000 fe7c 	bl	800c030 <__mcmp>
 800b338:	2800      	cmp	r0, #0
 800b33a:	da63      	bge.n	800b404 <_dtoa_r+0x924>
 800b33c:	2300      	movs	r3, #0
 800b33e:	4659      	mov	r1, fp
 800b340:	220a      	movs	r2, #10
 800b342:	4620      	mov	r0, r4
 800b344:	f000 fc58 	bl	800bbf8 <__multadd>
 800b348:	9b08      	ldr	r3, [sp, #32]
 800b34a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b34e:	4683      	mov	fp, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 818f 	beq.w	800b674 <_dtoa_r+0xb94>
 800b356:	4639      	mov	r1, r7
 800b358:	2300      	movs	r3, #0
 800b35a:	220a      	movs	r2, #10
 800b35c:	4620      	mov	r0, r4
 800b35e:	f000 fc4b 	bl	800bbf8 <__multadd>
 800b362:	f1b9 0f00 	cmp.w	r9, #0
 800b366:	4607      	mov	r7, r0
 800b368:	f300 808e 	bgt.w	800b488 <_dtoa_r+0x9a8>
 800b36c:	9b05      	ldr	r3, [sp, #20]
 800b36e:	2b02      	cmp	r3, #2
 800b370:	dc50      	bgt.n	800b414 <_dtoa_r+0x934>
 800b372:	e089      	b.n	800b488 <_dtoa_r+0x9a8>
 800b374:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b37a:	e75d      	b.n	800b238 <_dtoa_r+0x758>
 800b37c:	9b01      	ldr	r3, [sp, #4]
 800b37e:	1e5e      	subs	r6, r3, #1
 800b380:	9b06      	ldr	r3, [sp, #24]
 800b382:	42b3      	cmp	r3, r6
 800b384:	bfbf      	itttt	lt
 800b386:	9b06      	ldrlt	r3, [sp, #24]
 800b388:	9606      	strlt	r6, [sp, #24]
 800b38a:	1af2      	sublt	r2, r6, r3
 800b38c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b38e:	bfb6      	itet	lt
 800b390:	189b      	addlt	r3, r3, r2
 800b392:	1b9e      	subge	r6, r3, r6
 800b394:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b396:	9b01      	ldr	r3, [sp, #4]
 800b398:	bfb8      	it	lt
 800b39a:	2600      	movlt	r6, #0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	bfb5      	itete	lt
 800b3a0:	eba8 0503 	sublt.w	r5, r8, r3
 800b3a4:	9b01      	ldrge	r3, [sp, #4]
 800b3a6:	2300      	movlt	r3, #0
 800b3a8:	4645      	movge	r5, r8
 800b3aa:	e747      	b.n	800b23c <_dtoa_r+0x75c>
 800b3ac:	9e06      	ldr	r6, [sp, #24]
 800b3ae:	9f08      	ldr	r7, [sp, #32]
 800b3b0:	4645      	mov	r5, r8
 800b3b2:	e74c      	b.n	800b24e <_dtoa_r+0x76e>
 800b3b4:	9a06      	ldr	r2, [sp, #24]
 800b3b6:	e775      	b.n	800b2a4 <_dtoa_r+0x7c4>
 800b3b8:	9b05      	ldr	r3, [sp, #20]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	dc18      	bgt.n	800b3f0 <_dtoa_r+0x910>
 800b3be:	9b02      	ldr	r3, [sp, #8]
 800b3c0:	b9b3      	cbnz	r3, 800b3f0 <_dtoa_r+0x910>
 800b3c2:	9b03      	ldr	r3, [sp, #12]
 800b3c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3c8:	b9a3      	cbnz	r3, 800b3f4 <_dtoa_r+0x914>
 800b3ca:	9b03      	ldr	r3, [sp, #12]
 800b3cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b3d0:	0d1b      	lsrs	r3, r3, #20
 800b3d2:	051b      	lsls	r3, r3, #20
 800b3d4:	b12b      	cbz	r3, 800b3e2 <_dtoa_r+0x902>
 800b3d6:	9b04      	ldr	r3, [sp, #16]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	9304      	str	r3, [sp, #16]
 800b3dc:	f108 0801 	add.w	r8, r8, #1
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	9306      	str	r3, [sp, #24]
 800b3e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f47f af74 	bne.w	800b2d4 <_dtoa_r+0x7f4>
 800b3ec:	2001      	movs	r0, #1
 800b3ee:	e779      	b.n	800b2e4 <_dtoa_r+0x804>
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	e7f6      	b.n	800b3e2 <_dtoa_r+0x902>
 800b3f4:	9b02      	ldr	r3, [sp, #8]
 800b3f6:	e7f4      	b.n	800b3e2 <_dtoa_r+0x902>
 800b3f8:	d085      	beq.n	800b306 <_dtoa_r+0x826>
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	301c      	adds	r0, #28
 800b3fe:	e77d      	b.n	800b2fc <_dtoa_r+0x81c>
 800b400:	40240000 	.word	0x40240000
 800b404:	9b01      	ldr	r3, [sp, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	dc38      	bgt.n	800b47c <_dtoa_r+0x99c>
 800b40a:	9b05      	ldr	r3, [sp, #20]
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	dd35      	ble.n	800b47c <_dtoa_r+0x99c>
 800b410:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b414:	f1b9 0f00 	cmp.w	r9, #0
 800b418:	d10d      	bne.n	800b436 <_dtoa_r+0x956>
 800b41a:	4631      	mov	r1, r6
 800b41c:	464b      	mov	r3, r9
 800b41e:	2205      	movs	r2, #5
 800b420:	4620      	mov	r0, r4
 800b422:	f000 fbe9 	bl	800bbf8 <__multadd>
 800b426:	4601      	mov	r1, r0
 800b428:	4606      	mov	r6, r0
 800b42a:	4658      	mov	r0, fp
 800b42c:	f000 fe00 	bl	800c030 <__mcmp>
 800b430:	2800      	cmp	r0, #0
 800b432:	f73f adbd 	bgt.w	800afb0 <_dtoa_r+0x4d0>
 800b436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b438:	9d00      	ldr	r5, [sp, #0]
 800b43a:	ea6f 0a03 	mvn.w	sl, r3
 800b43e:	f04f 0800 	mov.w	r8, #0
 800b442:	4631      	mov	r1, r6
 800b444:	4620      	mov	r0, r4
 800b446:	f000 fbb5 	bl	800bbb4 <_Bfree>
 800b44a:	2f00      	cmp	r7, #0
 800b44c:	f43f aeb4 	beq.w	800b1b8 <_dtoa_r+0x6d8>
 800b450:	f1b8 0f00 	cmp.w	r8, #0
 800b454:	d005      	beq.n	800b462 <_dtoa_r+0x982>
 800b456:	45b8      	cmp	r8, r7
 800b458:	d003      	beq.n	800b462 <_dtoa_r+0x982>
 800b45a:	4641      	mov	r1, r8
 800b45c:	4620      	mov	r0, r4
 800b45e:	f000 fba9 	bl	800bbb4 <_Bfree>
 800b462:	4639      	mov	r1, r7
 800b464:	4620      	mov	r0, r4
 800b466:	f000 fba5 	bl	800bbb4 <_Bfree>
 800b46a:	e6a5      	b.n	800b1b8 <_dtoa_r+0x6d8>
 800b46c:	2600      	movs	r6, #0
 800b46e:	4637      	mov	r7, r6
 800b470:	e7e1      	b.n	800b436 <_dtoa_r+0x956>
 800b472:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b474:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b478:	4637      	mov	r7, r6
 800b47a:	e599      	b.n	800afb0 <_dtoa_r+0x4d0>
 800b47c:	9b08      	ldr	r3, [sp, #32]
 800b47e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	f000 80fd 	beq.w	800b682 <_dtoa_r+0xba2>
 800b488:	2d00      	cmp	r5, #0
 800b48a:	dd05      	ble.n	800b498 <_dtoa_r+0x9b8>
 800b48c:	4639      	mov	r1, r7
 800b48e:	462a      	mov	r2, r5
 800b490:	4620      	mov	r0, r4
 800b492:	f000 fd61 	bl	800bf58 <__lshift>
 800b496:	4607      	mov	r7, r0
 800b498:	9b06      	ldr	r3, [sp, #24]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d05c      	beq.n	800b558 <_dtoa_r+0xa78>
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f000 fb47 	bl	800bb34 <_Balloc>
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	b928      	cbnz	r0, 800b4b6 <_dtoa_r+0x9d6>
 800b4aa:	4b80      	ldr	r3, [pc, #512]	; (800b6ac <_dtoa_r+0xbcc>)
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b4b2:	f7ff bb2e 	b.w	800ab12 <_dtoa_r+0x32>
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	3202      	adds	r2, #2
 800b4ba:	0092      	lsls	r2, r2, #2
 800b4bc:	f107 010c 	add.w	r1, r7, #12
 800b4c0:	300c      	adds	r0, #12
 800b4c2:	f7fe fcfd 	bl	8009ec0 <memcpy>
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f000 fd44 	bl	800bf58 <__lshift>
 800b4d0:	9b00      	ldr	r3, [sp, #0]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	9b00      	ldr	r3, [sp, #0]
 800b4d8:	444b      	add	r3, r9
 800b4da:	9307      	str	r3, [sp, #28]
 800b4dc:	9b02      	ldr	r3, [sp, #8]
 800b4de:	f003 0301 	and.w	r3, r3, #1
 800b4e2:	46b8      	mov	r8, r7
 800b4e4:	9306      	str	r3, [sp, #24]
 800b4e6:	4607      	mov	r7, r0
 800b4e8:	9b01      	ldr	r3, [sp, #4]
 800b4ea:	4631      	mov	r1, r6
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	4658      	mov	r0, fp
 800b4f0:	9302      	str	r3, [sp, #8]
 800b4f2:	f7ff fa67 	bl	800a9c4 <quorem>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	3330      	adds	r3, #48	; 0x30
 800b4fa:	9004      	str	r0, [sp, #16]
 800b4fc:	4641      	mov	r1, r8
 800b4fe:	4658      	mov	r0, fp
 800b500:	9308      	str	r3, [sp, #32]
 800b502:	f000 fd95 	bl	800c030 <__mcmp>
 800b506:	463a      	mov	r2, r7
 800b508:	4681      	mov	r9, r0
 800b50a:	4631      	mov	r1, r6
 800b50c:	4620      	mov	r0, r4
 800b50e:	f000 fdab 	bl	800c068 <__mdiff>
 800b512:	68c2      	ldr	r2, [r0, #12]
 800b514:	9b08      	ldr	r3, [sp, #32]
 800b516:	4605      	mov	r5, r0
 800b518:	bb02      	cbnz	r2, 800b55c <_dtoa_r+0xa7c>
 800b51a:	4601      	mov	r1, r0
 800b51c:	4658      	mov	r0, fp
 800b51e:	f000 fd87 	bl	800c030 <__mcmp>
 800b522:	9b08      	ldr	r3, [sp, #32]
 800b524:	4602      	mov	r2, r0
 800b526:	4629      	mov	r1, r5
 800b528:	4620      	mov	r0, r4
 800b52a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b52e:	f000 fb41 	bl	800bbb4 <_Bfree>
 800b532:	9b05      	ldr	r3, [sp, #20]
 800b534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b536:	9d01      	ldr	r5, [sp, #4]
 800b538:	ea43 0102 	orr.w	r1, r3, r2
 800b53c:	9b06      	ldr	r3, [sp, #24]
 800b53e:	430b      	orrs	r3, r1
 800b540:	9b08      	ldr	r3, [sp, #32]
 800b542:	d10d      	bne.n	800b560 <_dtoa_r+0xa80>
 800b544:	2b39      	cmp	r3, #57	; 0x39
 800b546:	d029      	beq.n	800b59c <_dtoa_r+0xabc>
 800b548:	f1b9 0f00 	cmp.w	r9, #0
 800b54c:	dd01      	ble.n	800b552 <_dtoa_r+0xa72>
 800b54e:	9b04      	ldr	r3, [sp, #16]
 800b550:	3331      	adds	r3, #49	; 0x31
 800b552:	9a02      	ldr	r2, [sp, #8]
 800b554:	7013      	strb	r3, [r2, #0]
 800b556:	e774      	b.n	800b442 <_dtoa_r+0x962>
 800b558:	4638      	mov	r0, r7
 800b55a:	e7b9      	b.n	800b4d0 <_dtoa_r+0x9f0>
 800b55c:	2201      	movs	r2, #1
 800b55e:	e7e2      	b.n	800b526 <_dtoa_r+0xa46>
 800b560:	f1b9 0f00 	cmp.w	r9, #0
 800b564:	db06      	blt.n	800b574 <_dtoa_r+0xa94>
 800b566:	9905      	ldr	r1, [sp, #20]
 800b568:	ea41 0909 	orr.w	r9, r1, r9
 800b56c:	9906      	ldr	r1, [sp, #24]
 800b56e:	ea59 0101 	orrs.w	r1, r9, r1
 800b572:	d120      	bne.n	800b5b6 <_dtoa_r+0xad6>
 800b574:	2a00      	cmp	r2, #0
 800b576:	ddec      	ble.n	800b552 <_dtoa_r+0xa72>
 800b578:	4659      	mov	r1, fp
 800b57a:	2201      	movs	r2, #1
 800b57c:	4620      	mov	r0, r4
 800b57e:	9301      	str	r3, [sp, #4]
 800b580:	f000 fcea 	bl	800bf58 <__lshift>
 800b584:	4631      	mov	r1, r6
 800b586:	4683      	mov	fp, r0
 800b588:	f000 fd52 	bl	800c030 <__mcmp>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	9b01      	ldr	r3, [sp, #4]
 800b590:	dc02      	bgt.n	800b598 <_dtoa_r+0xab8>
 800b592:	d1de      	bne.n	800b552 <_dtoa_r+0xa72>
 800b594:	07da      	lsls	r2, r3, #31
 800b596:	d5dc      	bpl.n	800b552 <_dtoa_r+0xa72>
 800b598:	2b39      	cmp	r3, #57	; 0x39
 800b59a:	d1d8      	bne.n	800b54e <_dtoa_r+0xa6e>
 800b59c:	9a02      	ldr	r2, [sp, #8]
 800b59e:	2339      	movs	r3, #57	; 0x39
 800b5a0:	7013      	strb	r3, [r2, #0]
 800b5a2:	462b      	mov	r3, r5
 800b5a4:	461d      	mov	r5, r3
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b5ac:	2a39      	cmp	r2, #57	; 0x39
 800b5ae:	d050      	beq.n	800b652 <_dtoa_r+0xb72>
 800b5b0:	3201      	adds	r2, #1
 800b5b2:	701a      	strb	r2, [r3, #0]
 800b5b4:	e745      	b.n	800b442 <_dtoa_r+0x962>
 800b5b6:	2a00      	cmp	r2, #0
 800b5b8:	dd03      	ble.n	800b5c2 <_dtoa_r+0xae2>
 800b5ba:	2b39      	cmp	r3, #57	; 0x39
 800b5bc:	d0ee      	beq.n	800b59c <_dtoa_r+0xabc>
 800b5be:	3301      	adds	r3, #1
 800b5c0:	e7c7      	b.n	800b552 <_dtoa_r+0xa72>
 800b5c2:	9a01      	ldr	r2, [sp, #4]
 800b5c4:	9907      	ldr	r1, [sp, #28]
 800b5c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b5ca:	428a      	cmp	r2, r1
 800b5cc:	d02a      	beq.n	800b624 <_dtoa_r+0xb44>
 800b5ce:	4659      	mov	r1, fp
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	220a      	movs	r2, #10
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f000 fb0f 	bl	800bbf8 <__multadd>
 800b5da:	45b8      	cmp	r8, r7
 800b5dc:	4683      	mov	fp, r0
 800b5de:	f04f 0300 	mov.w	r3, #0
 800b5e2:	f04f 020a 	mov.w	r2, #10
 800b5e6:	4641      	mov	r1, r8
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	d107      	bne.n	800b5fc <_dtoa_r+0xb1c>
 800b5ec:	f000 fb04 	bl	800bbf8 <__multadd>
 800b5f0:	4680      	mov	r8, r0
 800b5f2:	4607      	mov	r7, r0
 800b5f4:	9b01      	ldr	r3, [sp, #4]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	9301      	str	r3, [sp, #4]
 800b5fa:	e775      	b.n	800b4e8 <_dtoa_r+0xa08>
 800b5fc:	f000 fafc 	bl	800bbf8 <__multadd>
 800b600:	4639      	mov	r1, r7
 800b602:	4680      	mov	r8, r0
 800b604:	2300      	movs	r3, #0
 800b606:	220a      	movs	r2, #10
 800b608:	4620      	mov	r0, r4
 800b60a:	f000 faf5 	bl	800bbf8 <__multadd>
 800b60e:	4607      	mov	r7, r0
 800b610:	e7f0      	b.n	800b5f4 <_dtoa_r+0xb14>
 800b612:	f1b9 0f00 	cmp.w	r9, #0
 800b616:	9a00      	ldr	r2, [sp, #0]
 800b618:	bfcc      	ite	gt
 800b61a:	464d      	movgt	r5, r9
 800b61c:	2501      	movle	r5, #1
 800b61e:	4415      	add	r5, r2
 800b620:	f04f 0800 	mov.w	r8, #0
 800b624:	4659      	mov	r1, fp
 800b626:	2201      	movs	r2, #1
 800b628:	4620      	mov	r0, r4
 800b62a:	9301      	str	r3, [sp, #4]
 800b62c:	f000 fc94 	bl	800bf58 <__lshift>
 800b630:	4631      	mov	r1, r6
 800b632:	4683      	mov	fp, r0
 800b634:	f000 fcfc 	bl	800c030 <__mcmp>
 800b638:	2800      	cmp	r0, #0
 800b63a:	dcb2      	bgt.n	800b5a2 <_dtoa_r+0xac2>
 800b63c:	d102      	bne.n	800b644 <_dtoa_r+0xb64>
 800b63e:	9b01      	ldr	r3, [sp, #4]
 800b640:	07db      	lsls	r3, r3, #31
 800b642:	d4ae      	bmi.n	800b5a2 <_dtoa_r+0xac2>
 800b644:	462b      	mov	r3, r5
 800b646:	461d      	mov	r5, r3
 800b648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b64c:	2a30      	cmp	r2, #48	; 0x30
 800b64e:	d0fa      	beq.n	800b646 <_dtoa_r+0xb66>
 800b650:	e6f7      	b.n	800b442 <_dtoa_r+0x962>
 800b652:	9a00      	ldr	r2, [sp, #0]
 800b654:	429a      	cmp	r2, r3
 800b656:	d1a5      	bne.n	800b5a4 <_dtoa_r+0xac4>
 800b658:	f10a 0a01 	add.w	sl, sl, #1
 800b65c:	2331      	movs	r3, #49	; 0x31
 800b65e:	e779      	b.n	800b554 <_dtoa_r+0xa74>
 800b660:	4b13      	ldr	r3, [pc, #76]	; (800b6b0 <_dtoa_r+0xbd0>)
 800b662:	f7ff baaf 	b.w	800abc4 <_dtoa_r+0xe4>
 800b666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f47f aa86 	bne.w	800ab7a <_dtoa_r+0x9a>
 800b66e:	4b11      	ldr	r3, [pc, #68]	; (800b6b4 <_dtoa_r+0xbd4>)
 800b670:	f7ff baa8 	b.w	800abc4 <_dtoa_r+0xe4>
 800b674:	f1b9 0f00 	cmp.w	r9, #0
 800b678:	dc03      	bgt.n	800b682 <_dtoa_r+0xba2>
 800b67a:	9b05      	ldr	r3, [sp, #20]
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	f73f aec9 	bgt.w	800b414 <_dtoa_r+0x934>
 800b682:	9d00      	ldr	r5, [sp, #0]
 800b684:	4631      	mov	r1, r6
 800b686:	4658      	mov	r0, fp
 800b688:	f7ff f99c 	bl	800a9c4 <quorem>
 800b68c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b690:	f805 3b01 	strb.w	r3, [r5], #1
 800b694:	9a00      	ldr	r2, [sp, #0]
 800b696:	1aaa      	subs	r2, r5, r2
 800b698:	4591      	cmp	r9, r2
 800b69a:	ddba      	ble.n	800b612 <_dtoa_r+0xb32>
 800b69c:	4659      	mov	r1, fp
 800b69e:	2300      	movs	r3, #0
 800b6a0:	220a      	movs	r2, #10
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f000 faa8 	bl	800bbf8 <__multadd>
 800b6a8:	4683      	mov	fp, r0
 800b6aa:	e7eb      	b.n	800b684 <_dtoa_r+0xba4>
 800b6ac:	0800e5a4 	.word	0x0800e5a4
 800b6b0:	0800e3fc 	.word	0x0800e3fc
 800b6b4:	0800e521 	.word	0x0800e521

0800b6b8 <print_e>:
 800b6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ba:	b087      	sub	sp, #28
 800b6bc:	ec43 2b10 	vmov	d0, r2, r3
 800b6c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b6c2:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800b6c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b6c8:	ab04      	add	r3, sp, #16
 800b6ca:	9301      	str	r3, [sp, #4]
 800b6cc:	ab03      	add	r3, sp, #12
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	1c62      	adds	r2, r4, #1
 800b6d2:	ab05      	add	r3, sp, #20
 800b6d4:	460f      	mov	r7, r1
 800b6d6:	2102      	movs	r1, #2
 800b6d8:	f7ff fa02 	bl	800aae0 <_dtoa_r>
 800b6dc:	9a05      	ldr	r2, [sp, #20]
 800b6de:	f242 730f 	movw	r3, #9999	; 0x270f
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d105      	bne.n	800b6f2 <print_e+0x3a>
 800b6e6:	4601      	mov	r1, r0
 800b6e8:	4638      	mov	r0, r7
 800b6ea:	f001 f9a8 	bl	800ca3e <strcpy>
 800b6ee:	b007      	add	sp, #28
 800b6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6f2:	463b      	mov	r3, r7
 800b6f4:	7801      	ldrb	r1, [r0, #0]
 800b6f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b6fa:	2c00      	cmp	r4, #0
 800b6fc:	bfc8      	it	gt
 800b6fe:	2501      	movgt	r5, #1
 800b700:	212e      	movs	r1, #46	; 0x2e
 800b702:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800b706:	b10f      	cbz	r7, 800b70c <print_e+0x54>
 800b708:	2c00      	cmp	r4, #0
 800b70a:	dc37      	bgt.n	800b77c <print_e+0xc4>
 800b70c:	2e67      	cmp	r6, #103	; 0x67
 800b70e:	d046      	beq.n	800b79e <print_e+0xe6>
 800b710:	2e47      	cmp	r6, #71	; 0x47
 800b712:	d046      	beq.n	800b7a2 <print_e+0xea>
 800b714:	212e      	movs	r1, #46	; 0x2e
 800b716:	2030      	movs	r0, #48	; 0x30
 800b718:	2c00      	cmp	r4, #0
 800b71a:	dc38      	bgt.n	800b78e <print_e+0xd6>
 800b71c:	1e51      	subs	r1, r2, #1
 800b71e:	2900      	cmp	r1, #0
 800b720:	bfb8      	it	lt
 800b722:	f1c2 0201 	rsblt	r2, r2, #1
 800b726:	4618      	mov	r0, r3
 800b728:	9105      	str	r1, [sp, #20]
 800b72a:	bfbc      	itt	lt
 800b72c:	212d      	movlt	r1, #45	; 0x2d
 800b72e:	9205      	strlt	r2, [sp, #20]
 800b730:	f800 6b02 	strb.w	r6, [r0], #2
 800b734:	bfb8      	it	lt
 800b736:	7059      	strblt	r1, [r3, #1]
 800b738:	9905      	ldr	r1, [sp, #20]
 800b73a:	bfa4      	itt	ge
 800b73c:	222b      	movge	r2, #43	; 0x2b
 800b73e:	705a      	strbge	r2, [r3, #1]
 800b740:	2963      	cmp	r1, #99	; 0x63
 800b742:	dd0b      	ble.n	800b75c <print_e+0xa4>
 800b744:	2264      	movs	r2, #100	; 0x64
 800b746:	fb91 f2f2 	sdiv	r2, r1, r2
 800b74a:	f102 0430 	add.w	r4, r2, #48	; 0x30
 800b74e:	1cd8      	adds	r0, r3, #3
 800b750:	709c      	strb	r4, [r3, #2]
 800b752:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800b756:	fb03 1202 	mla	r2, r3, r2, r1
 800b75a:	9205      	str	r2, [sp, #20]
 800b75c:	9a05      	ldr	r2, [sp, #20]
 800b75e:	230a      	movs	r3, #10
 800b760:	fb92 f3f3 	sdiv	r3, r2, r3
 800b764:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b768:	7001      	strb	r1, [r0, #0]
 800b76a:	f06f 0109 	mvn.w	r1, #9
 800b76e:	fb01 2303 	mla	r3, r1, r3, r2
 800b772:	3330      	adds	r3, #48	; 0x30
 800b774:	7043      	strb	r3, [r0, #1]
 800b776:	2300      	movs	r3, #0
 800b778:	7083      	strb	r3, [r0, #2]
 800b77a:	e7b8      	b.n	800b6ee <print_e+0x36>
 800b77c:	b10d      	cbz	r5, 800b782 <print_e+0xca>
 800b77e:	f803 1b01 	strb.w	r1, [r3], #1
 800b782:	7805      	ldrb	r5, [r0, #0]
 800b784:	f803 5b01 	strb.w	r5, [r3], #1
 800b788:	3c01      	subs	r4, #1
 800b78a:	2500      	movs	r5, #0
 800b78c:	e7b9      	b.n	800b702 <print_e+0x4a>
 800b78e:	b10d      	cbz	r5, 800b794 <print_e+0xdc>
 800b790:	f803 1b01 	strb.w	r1, [r3], #1
 800b794:	f803 0b01 	strb.w	r0, [r3], #1
 800b798:	3c01      	subs	r4, #1
 800b79a:	2500      	movs	r5, #0
 800b79c:	e7bc      	b.n	800b718 <print_e+0x60>
 800b79e:	2665      	movs	r6, #101	; 0x65
 800b7a0:	e7bc      	b.n	800b71c <print_e+0x64>
 800b7a2:	2645      	movs	r6, #69	; 0x45
 800b7a4:	e7ba      	b.n	800b71c <print_e+0x64>
	...

0800b7a8 <_gcvt>:
 800b7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7ac:	ec55 4b10 	vmov	r4, r5, d0
 800b7b0:	b088      	sub	sp, #32
 800b7b2:	4681      	mov	r9, r0
 800b7b4:	4688      	mov	r8, r1
 800b7b6:	4616      	mov	r6, r2
 800b7b8:	469a      	mov	sl, r3
 800b7ba:	ee10 0a10 	vmov	r0, s0
 800b7be:	2200      	movs	r2, #0
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800b7c6:	f7f5 f999 	bl	8000afc <__aeabi_dcmplt>
 800b7ca:	b110      	cbz	r0, 800b7d2 <_gcvt+0x2a>
 800b7cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b7d0:	461d      	mov	r5, r3
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	4629      	mov	r1, r5
 800b7da:	f7f5 f985 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7de:	b138      	cbz	r0, 800b7f0 <_gcvt+0x48>
 800b7e0:	2330      	movs	r3, #48	; 0x30
 800b7e2:	7033      	strb	r3, [r6, #0]
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	7073      	strb	r3, [r6, #1]
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	b008      	add	sp, #32
 800b7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f0:	a34b      	add	r3, pc, #300	; (adr r3, 800b920 <_gcvt+0x178>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	f7f5 f989 	bl	8000b10 <__aeabi_dcmple>
 800b7fe:	b158      	cbz	r0, 800b818 <_gcvt+0x70>
 800b800:	f108 31ff 	add.w	r1, r8, #4294967295
 800b804:	9100      	str	r1, [sp, #0]
 800b806:	e9cd a701 	strd	sl, r7, [sp, #4]
 800b80a:	4622      	mov	r2, r4
 800b80c:	462b      	mov	r3, r5
 800b80e:	4631      	mov	r1, r6
 800b810:	4648      	mov	r0, r9
 800b812:	f7ff ff51 	bl	800b6b8 <print_e>
 800b816:	e7e7      	b.n	800b7e8 <_gcvt+0x40>
 800b818:	4640      	mov	r0, r8
 800b81a:	f000 fd09 	bl	800c230 <_mprec_log10>
 800b81e:	4622      	mov	r2, r4
 800b820:	ec51 0b10 	vmov	r0, r1, d0
 800b824:	462b      	mov	r3, r5
 800b826:	f7f5 f973 	bl	8000b10 <__aeabi_dcmple>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d1e8      	bne.n	800b800 <_gcvt+0x58>
 800b82e:	ab07      	add	r3, sp, #28
 800b830:	9301      	str	r3, [sp, #4]
 800b832:	ab06      	add	r3, sp, #24
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	4642      	mov	r2, r8
 800b838:	ab05      	add	r3, sp, #20
 800b83a:	ec45 4b10 	vmov	d0, r4, r5
 800b83e:	2102      	movs	r1, #2
 800b840:	4648      	mov	r0, r9
 800b842:	f7ff f94d 	bl	800aae0 <_dtoa_r>
 800b846:	9a05      	ldr	r2, [sp, #20]
 800b848:	f242 730f 	movw	r3, #9999	; 0x270f
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d00e      	beq.n	800b86e <_gcvt+0xc6>
 800b850:	4633      	mov	r3, r6
 800b852:	44b0      	add	r8, r6
 800b854:	4604      	mov	r4, r0
 800b856:	f810 5b01 	ldrb.w	r5, [r0], #1
 800b85a:	9905      	ldr	r1, [sp, #20]
 800b85c:	eba8 0203 	sub.w	r2, r8, r3
 800b860:	b10d      	cbz	r5, 800b866 <_gcvt+0xbe>
 800b862:	2900      	cmp	r1, #0
 800b864:	dc08      	bgt.n	800b878 <_gcvt+0xd0>
 800b866:	2000      	movs	r0, #0
 800b868:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800b86c:	e00d      	b.n	800b88a <_gcvt+0xe2>
 800b86e:	4601      	mov	r1, r0
 800b870:	4630      	mov	r0, r6
 800b872:	f001 f8e4 	bl	800ca3e <strcpy>
 800b876:	e7b7      	b.n	800b7e8 <_gcvt+0x40>
 800b878:	3901      	subs	r1, #1
 800b87a:	f803 5b01 	strb.w	r5, [r3], #1
 800b87e:	9105      	str	r1, [sp, #20]
 800b880:	e7e8      	b.n	800b854 <_gcvt+0xac>
 800b882:	f803 cb01 	strb.w	ip, [r3], #1
 800b886:	3a01      	subs	r2, #1
 800b888:	2001      	movs	r0, #1
 800b88a:	2900      	cmp	r1, #0
 800b88c:	460d      	mov	r5, r1
 800b88e:	dc2a      	bgt.n	800b8e6 <_gcvt+0x13e>
 800b890:	b100      	cbz	r0, 800b894 <_gcvt+0xec>
 800b892:	9105      	str	r1, [sp, #20]
 800b894:	b90f      	cbnz	r7, 800b89a <_gcvt+0xf2>
 800b896:	7821      	ldrb	r1, [r4, #0]
 800b898:	b311      	cbz	r1, 800b8e0 <_gcvt+0x138>
 800b89a:	42b3      	cmp	r3, r6
 800b89c:	bf04      	itt	eq
 800b89e:	2130      	moveq	r1, #48	; 0x30
 800b8a0:	f803 1b01 	strbeq.w	r1, [r3], #1
 800b8a4:	212e      	movs	r1, #46	; 0x2e
 800b8a6:	7019      	strb	r1, [r3, #0]
 800b8a8:	9905      	ldr	r1, [sp, #20]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	2500      	movs	r5, #0
 800b8ae:	eba1 0c03 	sub.w	ip, r1, r3
 800b8b2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800b8b6:	eb1c 0f00 	cmn.w	ip, r0
 800b8ba:	d41c      	bmi.n	800b8f6 <_gcvt+0x14e>
 800b8bc:	2900      	cmp	r1, #0
 800b8be:	f1c1 0000 	rsb	r0, r1, #0
 800b8c2:	bfc8      	it	gt
 800b8c4:	2000      	movgt	r0, #0
 800b8c6:	f100 0c01 	add.w	ip, r0, #1
 800b8ca:	4463      	add	r3, ip
 800b8cc:	4401      	add	r1, r0
 800b8ce:	b105      	cbz	r5, 800b8d2 <_gcvt+0x12a>
 800b8d0:	9105      	str	r1, [sp, #20]
 800b8d2:	1e61      	subs	r1, r4, #1
 800b8d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b8d8:	b108      	cbz	r0, 800b8de <_gcvt+0x136>
 800b8da:	2a00      	cmp	r2, #0
 800b8dc:	dc0f      	bgt.n	800b8fe <_gcvt+0x156>
 800b8de:	b9df      	cbnz	r7, 800b918 <_gcvt+0x170>
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	701a      	strb	r2, [r3, #0]
 800b8e4:	e780      	b.n	800b7e8 <_gcvt+0x40>
 800b8e6:	2a00      	cmp	r2, #0
 800b8e8:	f101 31ff 	add.w	r1, r1, #4294967295
 800b8ec:	dcc9      	bgt.n	800b882 <_gcvt+0xda>
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d0d0      	beq.n	800b894 <_gcvt+0xec>
 800b8f2:	9505      	str	r5, [sp, #20]
 800b8f4:	e7ce      	b.n	800b894 <_gcvt+0xec>
 800b8f6:	f800 ef01 	strb.w	lr, [r0, #1]!
 800b8fa:	2501      	movs	r5, #1
 800b8fc:	e7db      	b.n	800b8b6 <_gcvt+0x10e>
 800b8fe:	f803 0b01 	strb.w	r0, [r3], #1
 800b902:	3a01      	subs	r2, #1
 800b904:	e7e6      	b.n	800b8d4 <_gcvt+0x12c>
 800b906:	f801 5b01 	strb.w	r5, [r1], #1
 800b90a:	1a60      	subs	r0, r4, r1
 800b90c:	2800      	cmp	r0, #0
 800b90e:	dcfa      	bgt.n	800b906 <_gcvt+0x15e>
 800b910:	2a00      	cmp	r2, #0
 800b912:	bfa8      	it	ge
 800b914:	189b      	addge	r3, r3, r2
 800b916:	e7e3      	b.n	800b8e0 <_gcvt+0x138>
 800b918:	4619      	mov	r1, r3
 800b91a:	189c      	adds	r4, r3, r2
 800b91c:	2530      	movs	r5, #48	; 0x30
 800b91e:	e7f4      	b.n	800b90a <_gcvt+0x162>
 800b920:	eb1c432d 	.word	0xeb1c432d
 800b924:	3f1a36e2 	.word	0x3f1a36e2

0800b928 <std>:
 800b928:	2300      	movs	r3, #0
 800b92a:	b510      	push	{r4, lr}
 800b92c:	4604      	mov	r4, r0
 800b92e:	e9c0 3300 	strd	r3, r3, [r0]
 800b932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b936:	6083      	str	r3, [r0, #8]
 800b938:	8181      	strh	r1, [r0, #12]
 800b93a:	6643      	str	r3, [r0, #100]	; 0x64
 800b93c:	81c2      	strh	r2, [r0, #14]
 800b93e:	6183      	str	r3, [r0, #24]
 800b940:	4619      	mov	r1, r3
 800b942:	2208      	movs	r2, #8
 800b944:	305c      	adds	r0, #92	; 0x5c
 800b946:	f7fe fac9 	bl	8009edc <memset>
 800b94a:	4b05      	ldr	r3, [pc, #20]	; (800b960 <std+0x38>)
 800b94c:	6263      	str	r3, [r4, #36]	; 0x24
 800b94e:	4b05      	ldr	r3, [pc, #20]	; (800b964 <std+0x3c>)
 800b950:	62a3      	str	r3, [r4, #40]	; 0x28
 800b952:	4b05      	ldr	r3, [pc, #20]	; (800b968 <std+0x40>)
 800b954:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b956:	4b05      	ldr	r3, [pc, #20]	; (800b96c <std+0x44>)
 800b958:	6224      	str	r4, [r4, #32]
 800b95a:	6323      	str	r3, [r4, #48]	; 0x30
 800b95c:	bd10      	pop	{r4, pc}
 800b95e:	bf00      	nop
 800b960:	0800c9b9 	.word	0x0800c9b9
 800b964:	0800c9db 	.word	0x0800c9db
 800b968:	0800ca13 	.word	0x0800ca13
 800b96c:	0800ca37 	.word	0x0800ca37

0800b970 <_cleanup_r>:
 800b970:	4901      	ldr	r1, [pc, #4]	; (800b978 <_cleanup_r+0x8>)
 800b972:	f000 b8af 	b.w	800bad4 <_fwalk_reent>
 800b976:	bf00      	nop
 800b978:	0800cd5d 	.word	0x0800cd5d

0800b97c <__sfmoreglue>:
 800b97c:	b570      	push	{r4, r5, r6, lr}
 800b97e:	1e4a      	subs	r2, r1, #1
 800b980:	2568      	movs	r5, #104	; 0x68
 800b982:	4355      	muls	r5, r2
 800b984:	460e      	mov	r6, r1
 800b986:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b98a:	f000 fccf 	bl	800c32c <_malloc_r>
 800b98e:	4604      	mov	r4, r0
 800b990:	b140      	cbz	r0, 800b9a4 <__sfmoreglue+0x28>
 800b992:	2100      	movs	r1, #0
 800b994:	e9c0 1600 	strd	r1, r6, [r0]
 800b998:	300c      	adds	r0, #12
 800b99a:	60a0      	str	r0, [r4, #8]
 800b99c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b9a0:	f7fe fa9c 	bl	8009edc <memset>
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	bd70      	pop	{r4, r5, r6, pc}

0800b9a8 <__sfp_lock_acquire>:
 800b9a8:	4801      	ldr	r0, [pc, #4]	; (800b9b0 <__sfp_lock_acquire+0x8>)
 800b9aa:	f000 b8b8 	b.w	800bb1e <__retarget_lock_acquire_recursive>
 800b9ae:	bf00      	nop
 800b9b0:	2000554c 	.word	0x2000554c

0800b9b4 <__sfp_lock_release>:
 800b9b4:	4801      	ldr	r0, [pc, #4]	; (800b9bc <__sfp_lock_release+0x8>)
 800b9b6:	f000 b8b3 	b.w	800bb20 <__retarget_lock_release_recursive>
 800b9ba:	bf00      	nop
 800b9bc:	2000554c 	.word	0x2000554c

0800b9c0 <__sinit_lock_acquire>:
 800b9c0:	4801      	ldr	r0, [pc, #4]	; (800b9c8 <__sinit_lock_acquire+0x8>)
 800b9c2:	f000 b8ac 	b.w	800bb1e <__retarget_lock_acquire_recursive>
 800b9c6:	bf00      	nop
 800b9c8:	20005547 	.word	0x20005547

0800b9cc <__sinit_lock_release>:
 800b9cc:	4801      	ldr	r0, [pc, #4]	; (800b9d4 <__sinit_lock_release+0x8>)
 800b9ce:	f000 b8a7 	b.w	800bb20 <__retarget_lock_release_recursive>
 800b9d2:	bf00      	nop
 800b9d4:	20005547 	.word	0x20005547

0800b9d8 <__sinit>:
 800b9d8:	b510      	push	{r4, lr}
 800b9da:	4604      	mov	r4, r0
 800b9dc:	f7ff fff0 	bl	800b9c0 <__sinit_lock_acquire>
 800b9e0:	69a3      	ldr	r3, [r4, #24]
 800b9e2:	b11b      	cbz	r3, 800b9ec <__sinit+0x14>
 800b9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9e8:	f7ff bff0 	b.w	800b9cc <__sinit_lock_release>
 800b9ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9f0:	6523      	str	r3, [r4, #80]	; 0x50
 800b9f2:	4b13      	ldr	r3, [pc, #76]	; (800ba40 <__sinit+0x68>)
 800b9f4:	4a13      	ldr	r2, [pc, #76]	; (800ba44 <__sinit+0x6c>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9fa:	42a3      	cmp	r3, r4
 800b9fc:	bf04      	itt	eq
 800b9fe:	2301      	moveq	r3, #1
 800ba00:	61a3      	streq	r3, [r4, #24]
 800ba02:	4620      	mov	r0, r4
 800ba04:	f000 f820 	bl	800ba48 <__sfp>
 800ba08:	6060      	str	r0, [r4, #4]
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f000 f81c 	bl	800ba48 <__sfp>
 800ba10:	60a0      	str	r0, [r4, #8]
 800ba12:	4620      	mov	r0, r4
 800ba14:	f000 f818 	bl	800ba48 <__sfp>
 800ba18:	2200      	movs	r2, #0
 800ba1a:	60e0      	str	r0, [r4, #12]
 800ba1c:	2104      	movs	r1, #4
 800ba1e:	6860      	ldr	r0, [r4, #4]
 800ba20:	f7ff ff82 	bl	800b928 <std>
 800ba24:	68a0      	ldr	r0, [r4, #8]
 800ba26:	2201      	movs	r2, #1
 800ba28:	2109      	movs	r1, #9
 800ba2a:	f7ff ff7d 	bl	800b928 <std>
 800ba2e:	68e0      	ldr	r0, [r4, #12]
 800ba30:	2202      	movs	r2, #2
 800ba32:	2112      	movs	r1, #18
 800ba34:	f7ff ff78 	bl	800b928 <std>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	61a3      	str	r3, [r4, #24]
 800ba3c:	e7d2      	b.n	800b9e4 <__sinit+0xc>
 800ba3e:	bf00      	nop
 800ba40:	0800e3e8 	.word	0x0800e3e8
 800ba44:	0800b971 	.word	0x0800b971

0800ba48 <__sfp>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	4607      	mov	r7, r0
 800ba4c:	f7ff ffac 	bl	800b9a8 <__sfp_lock_acquire>
 800ba50:	4b1e      	ldr	r3, [pc, #120]	; (800bacc <__sfp+0x84>)
 800ba52:	681e      	ldr	r6, [r3, #0]
 800ba54:	69b3      	ldr	r3, [r6, #24]
 800ba56:	b913      	cbnz	r3, 800ba5e <__sfp+0x16>
 800ba58:	4630      	mov	r0, r6
 800ba5a:	f7ff ffbd 	bl	800b9d8 <__sinit>
 800ba5e:	3648      	adds	r6, #72	; 0x48
 800ba60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba64:	3b01      	subs	r3, #1
 800ba66:	d503      	bpl.n	800ba70 <__sfp+0x28>
 800ba68:	6833      	ldr	r3, [r6, #0]
 800ba6a:	b30b      	cbz	r3, 800bab0 <__sfp+0x68>
 800ba6c:	6836      	ldr	r6, [r6, #0]
 800ba6e:	e7f7      	b.n	800ba60 <__sfp+0x18>
 800ba70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba74:	b9d5      	cbnz	r5, 800baac <__sfp+0x64>
 800ba76:	4b16      	ldr	r3, [pc, #88]	; (800bad0 <__sfp+0x88>)
 800ba78:	60e3      	str	r3, [r4, #12]
 800ba7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba7e:	6665      	str	r5, [r4, #100]	; 0x64
 800ba80:	f000 f84c 	bl	800bb1c <__retarget_lock_init_recursive>
 800ba84:	f7ff ff96 	bl	800b9b4 <__sfp_lock_release>
 800ba88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba90:	6025      	str	r5, [r4, #0]
 800ba92:	61a5      	str	r5, [r4, #24]
 800ba94:	2208      	movs	r2, #8
 800ba96:	4629      	mov	r1, r5
 800ba98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba9c:	f7fe fa1e 	bl	8009edc <memset>
 800baa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800baa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800baa8:	4620      	mov	r0, r4
 800baaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800baac:	3468      	adds	r4, #104	; 0x68
 800baae:	e7d9      	b.n	800ba64 <__sfp+0x1c>
 800bab0:	2104      	movs	r1, #4
 800bab2:	4638      	mov	r0, r7
 800bab4:	f7ff ff62 	bl	800b97c <__sfmoreglue>
 800bab8:	4604      	mov	r4, r0
 800baba:	6030      	str	r0, [r6, #0]
 800babc:	2800      	cmp	r0, #0
 800babe:	d1d5      	bne.n	800ba6c <__sfp+0x24>
 800bac0:	f7ff ff78 	bl	800b9b4 <__sfp_lock_release>
 800bac4:	230c      	movs	r3, #12
 800bac6:	603b      	str	r3, [r7, #0]
 800bac8:	e7ee      	b.n	800baa8 <__sfp+0x60>
 800baca:	bf00      	nop
 800bacc:	0800e3e8 	.word	0x0800e3e8
 800bad0:	ffff0001 	.word	0xffff0001

0800bad4 <_fwalk_reent>:
 800bad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bad8:	4606      	mov	r6, r0
 800bada:	4688      	mov	r8, r1
 800badc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bae0:	2700      	movs	r7, #0
 800bae2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bae6:	f1b9 0901 	subs.w	r9, r9, #1
 800baea:	d505      	bpl.n	800baf8 <_fwalk_reent+0x24>
 800baec:	6824      	ldr	r4, [r4, #0]
 800baee:	2c00      	cmp	r4, #0
 800baf0:	d1f7      	bne.n	800bae2 <_fwalk_reent+0xe>
 800baf2:	4638      	mov	r0, r7
 800baf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baf8:	89ab      	ldrh	r3, [r5, #12]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d907      	bls.n	800bb0e <_fwalk_reent+0x3a>
 800bafe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb02:	3301      	adds	r3, #1
 800bb04:	d003      	beq.n	800bb0e <_fwalk_reent+0x3a>
 800bb06:	4629      	mov	r1, r5
 800bb08:	4630      	mov	r0, r6
 800bb0a:	47c0      	blx	r8
 800bb0c:	4307      	orrs	r7, r0
 800bb0e:	3568      	adds	r5, #104	; 0x68
 800bb10:	e7e9      	b.n	800bae6 <_fwalk_reent+0x12>
	...

0800bb14 <_localeconv_r>:
 800bb14:	4800      	ldr	r0, [pc, #0]	; (800bb18 <_localeconv_r+0x4>)
 800bb16:	4770      	bx	lr
 800bb18:	20000174 	.word	0x20000174

0800bb1c <__retarget_lock_init_recursive>:
 800bb1c:	4770      	bx	lr

0800bb1e <__retarget_lock_acquire_recursive>:
 800bb1e:	4770      	bx	lr

0800bb20 <__retarget_lock_release_recursive>:
 800bb20:	4770      	bx	lr
	...

0800bb24 <malloc>:
 800bb24:	4b02      	ldr	r3, [pc, #8]	; (800bb30 <malloc+0xc>)
 800bb26:	4601      	mov	r1, r0
 800bb28:	6818      	ldr	r0, [r3, #0]
 800bb2a:	f000 bbff 	b.w	800c32c <_malloc_r>
 800bb2e:	bf00      	nop
 800bb30:	20000020 	.word	0x20000020

0800bb34 <_Balloc>:
 800bb34:	b570      	push	{r4, r5, r6, lr}
 800bb36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb38:	4604      	mov	r4, r0
 800bb3a:	460d      	mov	r5, r1
 800bb3c:	b976      	cbnz	r6, 800bb5c <_Balloc+0x28>
 800bb3e:	2010      	movs	r0, #16
 800bb40:	f7ff fff0 	bl	800bb24 <malloc>
 800bb44:	4602      	mov	r2, r0
 800bb46:	6260      	str	r0, [r4, #36]	; 0x24
 800bb48:	b920      	cbnz	r0, 800bb54 <_Balloc+0x20>
 800bb4a:	4b18      	ldr	r3, [pc, #96]	; (800bbac <_Balloc+0x78>)
 800bb4c:	4818      	ldr	r0, [pc, #96]	; (800bbb0 <_Balloc+0x7c>)
 800bb4e:	2166      	movs	r1, #102	; 0x66
 800bb50:	f001 f850 	bl	800cbf4 <__assert_func>
 800bb54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb58:	6006      	str	r6, [r0, #0]
 800bb5a:	60c6      	str	r6, [r0, #12]
 800bb5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb5e:	68f3      	ldr	r3, [r6, #12]
 800bb60:	b183      	cbz	r3, 800bb84 <_Balloc+0x50>
 800bb62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb6a:	b9b8      	cbnz	r0, 800bb9c <_Balloc+0x68>
 800bb6c:	2101      	movs	r1, #1
 800bb6e:	fa01 f605 	lsl.w	r6, r1, r5
 800bb72:	1d72      	adds	r2, r6, #5
 800bb74:	0092      	lsls	r2, r2, #2
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 fb78 	bl	800c26c <_calloc_r>
 800bb7c:	b160      	cbz	r0, 800bb98 <_Balloc+0x64>
 800bb7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb82:	e00e      	b.n	800bba2 <_Balloc+0x6e>
 800bb84:	2221      	movs	r2, #33	; 0x21
 800bb86:	2104      	movs	r1, #4
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f000 fb6f 	bl	800c26c <_calloc_r>
 800bb8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb90:	60f0      	str	r0, [r6, #12]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1e4      	bne.n	800bb62 <_Balloc+0x2e>
 800bb98:	2000      	movs	r0, #0
 800bb9a:	bd70      	pop	{r4, r5, r6, pc}
 800bb9c:	6802      	ldr	r2, [r0, #0]
 800bb9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bba2:	2300      	movs	r3, #0
 800bba4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bba8:	e7f7      	b.n	800bb9a <_Balloc+0x66>
 800bbaa:	bf00      	nop
 800bbac:	0800e52e 	.word	0x0800e52e
 800bbb0:	0800e618 	.word	0x0800e618

0800bbb4 <_Bfree>:
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bbb8:	4605      	mov	r5, r0
 800bbba:	460c      	mov	r4, r1
 800bbbc:	b976      	cbnz	r6, 800bbdc <_Bfree+0x28>
 800bbbe:	2010      	movs	r0, #16
 800bbc0:	f7ff ffb0 	bl	800bb24 <malloc>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	6268      	str	r0, [r5, #36]	; 0x24
 800bbc8:	b920      	cbnz	r0, 800bbd4 <_Bfree+0x20>
 800bbca:	4b09      	ldr	r3, [pc, #36]	; (800bbf0 <_Bfree+0x3c>)
 800bbcc:	4809      	ldr	r0, [pc, #36]	; (800bbf4 <_Bfree+0x40>)
 800bbce:	218a      	movs	r1, #138	; 0x8a
 800bbd0:	f001 f810 	bl	800cbf4 <__assert_func>
 800bbd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbd8:	6006      	str	r6, [r0, #0]
 800bbda:	60c6      	str	r6, [r0, #12]
 800bbdc:	b13c      	cbz	r4, 800bbee <_Bfree+0x3a>
 800bbde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbe0:	6862      	ldr	r2, [r4, #4]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbe8:	6021      	str	r1, [r4, #0]
 800bbea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	0800e52e 	.word	0x0800e52e
 800bbf4:	0800e618 	.word	0x0800e618

0800bbf8 <__multadd>:
 800bbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfc:	690e      	ldr	r6, [r1, #16]
 800bbfe:	4607      	mov	r7, r0
 800bc00:	4698      	mov	r8, r3
 800bc02:	460c      	mov	r4, r1
 800bc04:	f101 0014 	add.w	r0, r1, #20
 800bc08:	2300      	movs	r3, #0
 800bc0a:	6805      	ldr	r5, [r0, #0]
 800bc0c:	b2a9      	uxth	r1, r5
 800bc0e:	fb02 8101 	mla	r1, r2, r1, r8
 800bc12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bc16:	0c2d      	lsrs	r5, r5, #16
 800bc18:	fb02 c505 	mla	r5, r2, r5, ip
 800bc1c:	b289      	uxth	r1, r1
 800bc1e:	3301      	adds	r3, #1
 800bc20:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bc24:	429e      	cmp	r6, r3
 800bc26:	f840 1b04 	str.w	r1, [r0], #4
 800bc2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bc2e:	dcec      	bgt.n	800bc0a <__multadd+0x12>
 800bc30:	f1b8 0f00 	cmp.w	r8, #0
 800bc34:	d022      	beq.n	800bc7c <__multadd+0x84>
 800bc36:	68a3      	ldr	r3, [r4, #8]
 800bc38:	42b3      	cmp	r3, r6
 800bc3a:	dc19      	bgt.n	800bc70 <__multadd+0x78>
 800bc3c:	6861      	ldr	r1, [r4, #4]
 800bc3e:	4638      	mov	r0, r7
 800bc40:	3101      	adds	r1, #1
 800bc42:	f7ff ff77 	bl	800bb34 <_Balloc>
 800bc46:	4605      	mov	r5, r0
 800bc48:	b928      	cbnz	r0, 800bc56 <__multadd+0x5e>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	4b0d      	ldr	r3, [pc, #52]	; (800bc84 <__multadd+0x8c>)
 800bc4e:	480e      	ldr	r0, [pc, #56]	; (800bc88 <__multadd+0x90>)
 800bc50:	21b5      	movs	r1, #181	; 0xb5
 800bc52:	f000 ffcf 	bl	800cbf4 <__assert_func>
 800bc56:	6922      	ldr	r2, [r4, #16]
 800bc58:	3202      	adds	r2, #2
 800bc5a:	f104 010c 	add.w	r1, r4, #12
 800bc5e:	0092      	lsls	r2, r2, #2
 800bc60:	300c      	adds	r0, #12
 800bc62:	f7fe f92d 	bl	8009ec0 <memcpy>
 800bc66:	4621      	mov	r1, r4
 800bc68:	4638      	mov	r0, r7
 800bc6a:	f7ff ffa3 	bl	800bbb4 <_Bfree>
 800bc6e:	462c      	mov	r4, r5
 800bc70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bc74:	3601      	adds	r6, #1
 800bc76:	f8c3 8014 	str.w	r8, [r3, #20]
 800bc7a:	6126      	str	r6, [r4, #16]
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc82:	bf00      	nop
 800bc84:	0800e5a4 	.word	0x0800e5a4
 800bc88:	0800e618 	.word	0x0800e618

0800bc8c <__hi0bits>:
 800bc8c:	0c03      	lsrs	r3, r0, #16
 800bc8e:	041b      	lsls	r3, r3, #16
 800bc90:	b9d3      	cbnz	r3, 800bcc8 <__hi0bits+0x3c>
 800bc92:	0400      	lsls	r0, r0, #16
 800bc94:	2310      	movs	r3, #16
 800bc96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc9a:	bf04      	itt	eq
 800bc9c:	0200      	lsleq	r0, r0, #8
 800bc9e:	3308      	addeq	r3, #8
 800bca0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bca4:	bf04      	itt	eq
 800bca6:	0100      	lsleq	r0, r0, #4
 800bca8:	3304      	addeq	r3, #4
 800bcaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bcae:	bf04      	itt	eq
 800bcb0:	0080      	lsleq	r0, r0, #2
 800bcb2:	3302      	addeq	r3, #2
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	db05      	blt.n	800bcc4 <__hi0bits+0x38>
 800bcb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bcbc:	f103 0301 	add.w	r3, r3, #1
 800bcc0:	bf08      	it	eq
 800bcc2:	2320      	moveq	r3, #32
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	4770      	bx	lr
 800bcc8:	2300      	movs	r3, #0
 800bcca:	e7e4      	b.n	800bc96 <__hi0bits+0xa>

0800bccc <__lo0bits>:
 800bccc:	6803      	ldr	r3, [r0, #0]
 800bcce:	f013 0207 	ands.w	r2, r3, #7
 800bcd2:	4601      	mov	r1, r0
 800bcd4:	d00b      	beq.n	800bcee <__lo0bits+0x22>
 800bcd6:	07da      	lsls	r2, r3, #31
 800bcd8:	d424      	bmi.n	800bd24 <__lo0bits+0x58>
 800bcda:	0798      	lsls	r0, r3, #30
 800bcdc:	bf49      	itett	mi
 800bcde:	085b      	lsrmi	r3, r3, #1
 800bce0:	089b      	lsrpl	r3, r3, #2
 800bce2:	2001      	movmi	r0, #1
 800bce4:	600b      	strmi	r3, [r1, #0]
 800bce6:	bf5c      	itt	pl
 800bce8:	600b      	strpl	r3, [r1, #0]
 800bcea:	2002      	movpl	r0, #2
 800bcec:	4770      	bx	lr
 800bcee:	b298      	uxth	r0, r3
 800bcf0:	b9b0      	cbnz	r0, 800bd20 <__lo0bits+0x54>
 800bcf2:	0c1b      	lsrs	r3, r3, #16
 800bcf4:	2010      	movs	r0, #16
 800bcf6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bcfa:	bf04      	itt	eq
 800bcfc:	0a1b      	lsreq	r3, r3, #8
 800bcfe:	3008      	addeq	r0, #8
 800bd00:	071a      	lsls	r2, r3, #28
 800bd02:	bf04      	itt	eq
 800bd04:	091b      	lsreq	r3, r3, #4
 800bd06:	3004      	addeq	r0, #4
 800bd08:	079a      	lsls	r2, r3, #30
 800bd0a:	bf04      	itt	eq
 800bd0c:	089b      	lsreq	r3, r3, #2
 800bd0e:	3002      	addeq	r0, #2
 800bd10:	07da      	lsls	r2, r3, #31
 800bd12:	d403      	bmi.n	800bd1c <__lo0bits+0x50>
 800bd14:	085b      	lsrs	r3, r3, #1
 800bd16:	f100 0001 	add.w	r0, r0, #1
 800bd1a:	d005      	beq.n	800bd28 <__lo0bits+0x5c>
 800bd1c:	600b      	str	r3, [r1, #0]
 800bd1e:	4770      	bx	lr
 800bd20:	4610      	mov	r0, r2
 800bd22:	e7e8      	b.n	800bcf6 <__lo0bits+0x2a>
 800bd24:	2000      	movs	r0, #0
 800bd26:	4770      	bx	lr
 800bd28:	2020      	movs	r0, #32
 800bd2a:	4770      	bx	lr

0800bd2c <__i2b>:
 800bd2c:	b510      	push	{r4, lr}
 800bd2e:	460c      	mov	r4, r1
 800bd30:	2101      	movs	r1, #1
 800bd32:	f7ff feff 	bl	800bb34 <_Balloc>
 800bd36:	4602      	mov	r2, r0
 800bd38:	b928      	cbnz	r0, 800bd46 <__i2b+0x1a>
 800bd3a:	4b05      	ldr	r3, [pc, #20]	; (800bd50 <__i2b+0x24>)
 800bd3c:	4805      	ldr	r0, [pc, #20]	; (800bd54 <__i2b+0x28>)
 800bd3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd42:	f000 ff57 	bl	800cbf4 <__assert_func>
 800bd46:	2301      	movs	r3, #1
 800bd48:	6144      	str	r4, [r0, #20]
 800bd4a:	6103      	str	r3, [r0, #16]
 800bd4c:	bd10      	pop	{r4, pc}
 800bd4e:	bf00      	nop
 800bd50:	0800e5a4 	.word	0x0800e5a4
 800bd54:	0800e618 	.word	0x0800e618

0800bd58 <__multiply>:
 800bd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	4614      	mov	r4, r2
 800bd5e:	690a      	ldr	r2, [r1, #16]
 800bd60:	6923      	ldr	r3, [r4, #16]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	bfb8      	it	lt
 800bd66:	460b      	movlt	r3, r1
 800bd68:	460d      	mov	r5, r1
 800bd6a:	bfbc      	itt	lt
 800bd6c:	4625      	movlt	r5, r4
 800bd6e:	461c      	movlt	r4, r3
 800bd70:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bd74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bd78:	68ab      	ldr	r3, [r5, #8]
 800bd7a:	6869      	ldr	r1, [r5, #4]
 800bd7c:	eb0a 0709 	add.w	r7, sl, r9
 800bd80:	42bb      	cmp	r3, r7
 800bd82:	b085      	sub	sp, #20
 800bd84:	bfb8      	it	lt
 800bd86:	3101      	addlt	r1, #1
 800bd88:	f7ff fed4 	bl	800bb34 <_Balloc>
 800bd8c:	b930      	cbnz	r0, 800bd9c <__multiply+0x44>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	4b42      	ldr	r3, [pc, #264]	; (800be9c <__multiply+0x144>)
 800bd92:	4843      	ldr	r0, [pc, #268]	; (800bea0 <__multiply+0x148>)
 800bd94:	f240 115d 	movw	r1, #349	; 0x15d
 800bd98:	f000 ff2c 	bl	800cbf4 <__assert_func>
 800bd9c:	f100 0614 	add.w	r6, r0, #20
 800bda0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bda4:	4633      	mov	r3, r6
 800bda6:	2200      	movs	r2, #0
 800bda8:	4543      	cmp	r3, r8
 800bdaa:	d31e      	bcc.n	800bdea <__multiply+0x92>
 800bdac:	f105 0c14 	add.w	ip, r5, #20
 800bdb0:	f104 0314 	add.w	r3, r4, #20
 800bdb4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bdb8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bdbc:	9202      	str	r2, [sp, #8]
 800bdbe:	ebac 0205 	sub.w	r2, ip, r5
 800bdc2:	3a15      	subs	r2, #21
 800bdc4:	f022 0203 	bic.w	r2, r2, #3
 800bdc8:	3204      	adds	r2, #4
 800bdca:	f105 0115 	add.w	r1, r5, #21
 800bdce:	458c      	cmp	ip, r1
 800bdd0:	bf38      	it	cc
 800bdd2:	2204      	movcc	r2, #4
 800bdd4:	9201      	str	r2, [sp, #4]
 800bdd6:	9a02      	ldr	r2, [sp, #8]
 800bdd8:	9303      	str	r3, [sp, #12]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d808      	bhi.n	800bdf0 <__multiply+0x98>
 800bdde:	2f00      	cmp	r7, #0
 800bde0:	dc55      	bgt.n	800be8e <__multiply+0x136>
 800bde2:	6107      	str	r7, [r0, #16]
 800bde4:	b005      	add	sp, #20
 800bde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdea:	f843 2b04 	str.w	r2, [r3], #4
 800bdee:	e7db      	b.n	800bda8 <__multiply+0x50>
 800bdf0:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdf4:	f1ba 0f00 	cmp.w	sl, #0
 800bdf8:	d020      	beq.n	800be3c <__multiply+0xe4>
 800bdfa:	f105 0e14 	add.w	lr, r5, #20
 800bdfe:	46b1      	mov	r9, r6
 800be00:	2200      	movs	r2, #0
 800be02:	f85e 4b04 	ldr.w	r4, [lr], #4
 800be06:	f8d9 b000 	ldr.w	fp, [r9]
 800be0a:	b2a1      	uxth	r1, r4
 800be0c:	fa1f fb8b 	uxth.w	fp, fp
 800be10:	fb0a b101 	mla	r1, sl, r1, fp
 800be14:	4411      	add	r1, r2
 800be16:	f8d9 2000 	ldr.w	r2, [r9]
 800be1a:	0c24      	lsrs	r4, r4, #16
 800be1c:	0c12      	lsrs	r2, r2, #16
 800be1e:	fb0a 2404 	mla	r4, sl, r4, r2
 800be22:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800be26:	b289      	uxth	r1, r1
 800be28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800be2c:	45f4      	cmp	ip, lr
 800be2e:	f849 1b04 	str.w	r1, [r9], #4
 800be32:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800be36:	d8e4      	bhi.n	800be02 <__multiply+0xaa>
 800be38:	9901      	ldr	r1, [sp, #4]
 800be3a:	5072      	str	r2, [r6, r1]
 800be3c:	9a03      	ldr	r2, [sp, #12]
 800be3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be42:	3304      	adds	r3, #4
 800be44:	f1b9 0f00 	cmp.w	r9, #0
 800be48:	d01f      	beq.n	800be8a <__multiply+0x132>
 800be4a:	6834      	ldr	r4, [r6, #0]
 800be4c:	f105 0114 	add.w	r1, r5, #20
 800be50:	46b6      	mov	lr, r6
 800be52:	f04f 0a00 	mov.w	sl, #0
 800be56:	880a      	ldrh	r2, [r1, #0]
 800be58:	f8be b002 	ldrh.w	fp, [lr, #2]
 800be5c:	fb09 b202 	mla	r2, r9, r2, fp
 800be60:	4492      	add	sl, r2
 800be62:	b2a4      	uxth	r4, r4
 800be64:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800be68:	f84e 4b04 	str.w	r4, [lr], #4
 800be6c:	f851 4b04 	ldr.w	r4, [r1], #4
 800be70:	f8be 2000 	ldrh.w	r2, [lr]
 800be74:	0c24      	lsrs	r4, r4, #16
 800be76:	fb09 2404 	mla	r4, r9, r4, r2
 800be7a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800be7e:	458c      	cmp	ip, r1
 800be80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800be84:	d8e7      	bhi.n	800be56 <__multiply+0xfe>
 800be86:	9a01      	ldr	r2, [sp, #4]
 800be88:	50b4      	str	r4, [r6, r2]
 800be8a:	3604      	adds	r6, #4
 800be8c:	e7a3      	b.n	800bdd6 <__multiply+0x7e>
 800be8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1a5      	bne.n	800bde2 <__multiply+0x8a>
 800be96:	3f01      	subs	r7, #1
 800be98:	e7a1      	b.n	800bdde <__multiply+0x86>
 800be9a:	bf00      	nop
 800be9c:	0800e5a4 	.word	0x0800e5a4
 800bea0:	0800e618 	.word	0x0800e618

0800bea4 <__pow5mult>:
 800bea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bea8:	4615      	mov	r5, r2
 800beaa:	f012 0203 	ands.w	r2, r2, #3
 800beae:	4606      	mov	r6, r0
 800beb0:	460f      	mov	r7, r1
 800beb2:	d007      	beq.n	800bec4 <__pow5mult+0x20>
 800beb4:	4c25      	ldr	r4, [pc, #148]	; (800bf4c <__pow5mult+0xa8>)
 800beb6:	3a01      	subs	r2, #1
 800beb8:	2300      	movs	r3, #0
 800beba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bebe:	f7ff fe9b 	bl	800bbf8 <__multadd>
 800bec2:	4607      	mov	r7, r0
 800bec4:	10ad      	asrs	r5, r5, #2
 800bec6:	d03d      	beq.n	800bf44 <__pow5mult+0xa0>
 800bec8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800beca:	b97c      	cbnz	r4, 800beec <__pow5mult+0x48>
 800becc:	2010      	movs	r0, #16
 800bece:	f7ff fe29 	bl	800bb24 <malloc>
 800bed2:	4602      	mov	r2, r0
 800bed4:	6270      	str	r0, [r6, #36]	; 0x24
 800bed6:	b928      	cbnz	r0, 800bee4 <__pow5mult+0x40>
 800bed8:	4b1d      	ldr	r3, [pc, #116]	; (800bf50 <__pow5mult+0xac>)
 800beda:	481e      	ldr	r0, [pc, #120]	; (800bf54 <__pow5mult+0xb0>)
 800bedc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bee0:	f000 fe88 	bl	800cbf4 <__assert_func>
 800bee4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bee8:	6004      	str	r4, [r0, #0]
 800beea:	60c4      	str	r4, [r0, #12]
 800beec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bef0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bef4:	b94c      	cbnz	r4, 800bf0a <__pow5mult+0x66>
 800bef6:	f240 2171 	movw	r1, #625	; 0x271
 800befa:	4630      	mov	r0, r6
 800befc:	f7ff ff16 	bl	800bd2c <__i2b>
 800bf00:	2300      	movs	r3, #0
 800bf02:	f8c8 0008 	str.w	r0, [r8, #8]
 800bf06:	4604      	mov	r4, r0
 800bf08:	6003      	str	r3, [r0, #0]
 800bf0a:	f04f 0900 	mov.w	r9, #0
 800bf0e:	07eb      	lsls	r3, r5, #31
 800bf10:	d50a      	bpl.n	800bf28 <__pow5mult+0x84>
 800bf12:	4639      	mov	r1, r7
 800bf14:	4622      	mov	r2, r4
 800bf16:	4630      	mov	r0, r6
 800bf18:	f7ff ff1e 	bl	800bd58 <__multiply>
 800bf1c:	4639      	mov	r1, r7
 800bf1e:	4680      	mov	r8, r0
 800bf20:	4630      	mov	r0, r6
 800bf22:	f7ff fe47 	bl	800bbb4 <_Bfree>
 800bf26:	4647      	mov	r7, r8
 800bf28:	106d      	asrs	r5, r5, #1
 800bf2a:	d00b      	beq.n	800bf44 <__pow5mult+0xa0>
 800bf2c:	6820      	ldr	r0, [r4, #0]
 800bf2e:	b938      	cbnz	r0, 800bf40 <__pow5mult+0x9c>
 800bf30:	4622      	mov	r2, r4
 800bf32:	4621      	mov	r1, r4
 800bf34:	4630      	mov	r0, r6
 800bf36:	f7ff ff0f 	bl	800bd58 <__multiply>
 800bf3a:	6020      	str	r0, [r4, #0]
 800bf3c:	f8c0 9000 	str.w	r9, [r0]
 800bf40:	4604      	mov	r4, r0
 800bf42:	e7e4      	b.n	800bf0e <__pow5mult+0x6a>
 800bf44:	4638      	mov	r0, r7
 800bf46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf4a:	bf00      	nop
 800bf4c:	0800e768 	.word	0x0800e768
 800bf50:	0800e52e 	.word	0x0800e52e
 800bf54:	0800e618 	.word	0x0800e618

0800bf58 <__lshift>:
 800bf58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	6849      	ldr	r1, [r1, #4]
 800bf60:	6923      	ldr	r3, [r4, #16]
 800bf62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf66:	68a3      	ldr	r3, [r4, #8]
 800bf68:	4607      	mov	r7, r0
 800bf6a:	4691      	mov	r9, r2
 800bf6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf70:	f108 0601 	add.w	r6, r8, #1
 800bf74:	42b3      	cmp	r3, r6
 800bf76:	db0b      	blt.n	800bf90 <__lshift+0x38>
 800bf78:	4638      	mov	r0, r7
 800bf7a:	f7ff fddb 	bl	800bb34 <_Balloc>
 800bf7e:	4605      	mov	r5, r0
 800bf80:	b948      	cbnz	r0, 800bf96 <__lshift+0x3e>
 800bf82:	4602      	mov	r2, r0
 800bf84:	4b28      	ldr	r3, [pc, #160]	; (800c028 <__lshift+0xd0>)
 800bf86:	4829      	ldr	r0, [pc, #164]	; (800c02c <__lshift+0xd4>)
 800bf88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf8c:	f000 fe32 	bl	800cbf4 <__assert_func>
 800bf90:	3101      	adds	r1, #1
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	e7ee      	b.n	800bf74 <__lshift+0x1c>
 800bf96:	2300      	movs	r3, #0
 800bf98:	f100 0114 	add.w	r1, r0, #20
 800bf9c:	f100 0210 	add.w	r2, r0, #16
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	4553      	cmp	r3, sl
 800bfa4:	db33      	blt.n	800c00e <__lshift+0xb6>
 800bfa6:	6920      	ldr	r0, [r4, #16]
 800bfa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfac:	f104 0314 	add.w	r3, r4, #20
 800bfb0:	f019 091f 	ands.w	r9, r9, #31
 800bfb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bfbc:	d02b      	beq.n	800c016 <__lshift+0xbe>
 800bfbe:	f1c9 0e20 	rsb	lr, r9, #32
 800bfc2:	468a      	mov	sl, r1
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	6818      	ldr	r0, [r3, #0]
 800bfc8:	fa00 f009 	lsl.w	r0, r0, r9
 800bfcc:	4302      	orrs	r2, r0
 800bfce:	f84a 2b04 	str.w	r2, [sl], #4
 800bfd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfd6:	459c      	cmp	ip, r3
 800bfd8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bfdc:	d8f3      	bhi.n	800bfc6 <__lshift+0x6e>
 800bfde:	ebac 0304 	sub.w	r3, ip, r4
 800bfe2:	3b15      	subs	r3, #21
 800bfe4:	f023 0303 	bic.w	r3, r3, #3
 800bfe8:	3304      	adds	r3, #4
 800bfea:	f104 0015 	add.w	r0, r4, #21
 800bfee:	4584      	cmp	ip, r0
 800bff0:	bf38      	it	cc
 800bff2:	2304      	movcc	r3, #4
 800bff4:	50ca      	str	r2, [r1, r3]
 800bff6:	b10a      	cbz	r2, 800bffc <__lshift+0xa4>
 800bff8:	f108 0602 	add.w	r6, r8, #2
 800bffc:	3e01      	subs	r6, #1
 800bffe:	4638      	mov	r0, r7
 800c000:	612e      	str	r6, [r5, #16]
 800c002:	4621      	mov	r1, r4
 800c004:	f7ff fdd6 	bl	800bbb4 <_Bfree>
 800c008:	4628      	mov	r0, r5
 800c00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c00e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c012:	3301      	adds	r3, #1
 800c014:	e7c5      	b.n	800bfa2 <__lshift+0x4a>
 800c016:	3904      	subs	r1, #4
 800c018:	f853 2b04 	ldr.w	r2, [r3], #4
 800c01c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c020:	459c      	cmp	ip, r3
 800c022:	d8f9      	bhi.n	800c018 <__lshift+0xc0>
 800c024:	e7ea      	b.n	800bffc <__lshift+0xa4>
 800c026:	bf00      	nop
 800c028:	0800e5a4 	.word	0x0800e5a4
 800c02c:	0800e618 	.word	0x0800e618

0800c030 <__mcmp>:
 800c030:	b530      	push	{r4, r5, lr}
 800c032:	6902      	ldr	r2, [r0, #16]
 800c034:	690c      	ldr	r4, [r1, #16]
 800c036:	1b12      	subs	r2, r2, r4
 800c038:	d10e      	bne.n	800c058 <__mcmp+0x28>
 800c03a:	f100 0314 	add.w	r3, r0, #20
 800c03e:	3114      	adds	r1, #20
 800c040:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c044:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c048:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c04c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c050:	42a5      	cmp	r5, r4
 800c052:	d003      	beq.n	800c05c <__mcmp+0x2c>
 800c054:	d305      	bcc.n	800c062 <__mcmp+0x32>
 800c056:	2201      	movs	r2, #1
 800c058:	4610      	mov	r0, r2
 800c05a:	bd30      	pop	{r4, r5, pc}
 800c05c:	4283      	cmp	r3, r0
 800c05e:	d3f3      	bcc.n	800c048 <__mcmp+0x18>
 800c060:	e7fa      	b.n	800c058 <__mcmp+0x28>
 800c062:	f04f 32ff 	mov.w	r2, #4294967295
 800c066:	e7f7      	b.n	800c058 <__mcmp+0x28>

0800c068 <__mdiff>:
 800c068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06c:	460c      	mov	r4, r1
 800c06e:	4606      	mov	r6, r0
 800c070:	4611      	mov	r1, r2
 800c072:	4620      	mov	r0, r4
 800c074:	4617      	mov	r7, r2
 800c076:	f7ff ffdb 	bl	800c030 <__mcmp>
 800c07a:	1e05      	subs	r5, r0, #0
 800c07c:	d110      	bne.n	800c0a0 <__mdiff+0x38>
 800c07e:	4629      	mov	r1, r5
 800c080:	4630      	mov	r0, r6
 800c082:	f7ff fd57 	bl	800bb34 <_Balloc>
 800c086:	b930      	cbnz	r0, 800c096 <__mdiff+0x2e>
 800c088:	4b39      	ldr	r3, [pc, #228]	; (800c170 <__mdiff+0x108>)
 800c08a:	4602      	mov	r2, r0
 800c08c:	f240 2132 	movw	r1, #562	; 0x232
 800c090:	4838      	ldr	r0, [pc, #224]	; (800c174 <__mdiff+0x10c>)
 800c092:	f000 fdaf 	bl	800cbf4 <__assert_func>
 800c096:	2301      	movs	r3, #1
 800c098:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c09c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a0:	bfa4      	itt	ge
 800c0a2:	463b      	movge	r3, r7
 800c0a4:	4627      	movge	r7, r4
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	6879      	ldr	r1, [r7, #4]
 800c0aa:	bfa6      	itte	ge
 800c0ac:	461c      	movge	r4, r3
 800c0ae:	2500      	movge	r5, #0
 800c0b0:	2501      	movlt	r5, #1
 800c0b2:	f7ff fd3f 	bl	800bb34 <_Balloc>
 800c0b6:	b920      	cbnz	r0, 800c0c2 <__mdiff+0x5a>
 800c0b8:	4b2d      	ldr	r3, [pc, #180]	; (800c170 <__mdiff+0x108>)
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0c0:	e7e6      	b.n	800c090 <__mdiff+0x28>
 800c0c2:	693e      	ldr	r6, [r7, #16]
 800c0c4:	60c5      	str	r5, [r0, #12]
 800c0c6:	6925      	ldr	r5, [r4, #16]
 800c0c8:	f107 0114 	add.w	r1, r7, #20
 800c0cc:	f104 0914 	add.w	r9, r4, #20
 800c0d0:	f100 0e14 	add.w	lr, r0, #20
 800c0d4:	f107 0210 	add.w	r2, r7, #16
 800c0d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c0dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c0e0:	46f2      	mov	sl, lr
 800c0e2:	2700      	movs	r7, #0
 800c0e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0ec:	fa1f f883 	uxth.w	r8, r3
 800c0f0:	fa17 f78b 	uxtah	r7, r7, fp
 800c0f4:	0c1b      	lsrs	r3, r3, #16
 800c0f6:	eba7 0808 	sub.w	r8, r7, r8
 800c0fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c102:	fa1f f888 	uxth.w	r8, r8
 800c106:	141f      	asrs	r7, r3, #16
 800c108:	454d      	cmp	r5, r9
 800c10a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c10e:	f84a 3b04 	str.w	r3, [sl], #4
 800c112:	d8e7      	bhi.n	800c0e4 <__mdiff+0x7c>
 800c114:	1b2b      	subs	r3, r5, r4
 800c116:	3b15      	subs	r3, #21
 800c118:	f023 0303 	bic.w	r3, r3, #3
 800c11c:	3304      	adds	r3, #4
 800c11e:	3415      	adds	r4, #21
 800c120:	42a5      	cmp	r5, r4
 800c122:	bf38      	it	cc
 800c124:	2304      	movcc	r3, #4
 800c126:	4419      	add	r1, r3
 800c128:	4473      	add	r3, lr
 800c12a:	469e      	mov	lr, r3
 800c12c:	460d      	mov	r5, r1
 800c12e:	4565      	cmp	r5, ip
 800c130:	d30e      	bcc.n	800c150 <__mdiff+0xe8>
 800c132:	f10c 0203 	add.w	r2, ip, #3
 800c136:	1a52      	subs	r2, r2, r1
 800c138:	f022 0203 	bic.w	r2, r2, #3
 800c13c:	3903      	subs	r1, #3
 800c13e:	458c      	cmp	ip, r1
 800c140:	bf38      	it	cc
 800c142:	2200      	movcc	r2, #0
 800c144:	441a      	add	r2, r3
 800c146:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c14a:	b17b      	cbz	r3, 800c16c <__mdiff+0x104>
 800c14c:	6106      	str	r6, [r0, #16]
 800c14e:	e7a5      	b.n	800c09c <__mdiff+0x34>
 800c150:	f855 8b04 	ldr.w	r8, [r5], #4
 800c154:	fa17 f488 	uxtah	r4, r7, r8
 800c158:	1422      	asrs	r2, r4, #16
 800c15a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c15e:	b2a4      	uxth	r4, r4
 800c160:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c164:	f84e 4b04 	str.w	r4, [lr], #4
 800c168:	1417      	asrs	r7, r2, #16
 800c16a:	e7e0      	b.n	800c12e <__mdiff+0xc6>
 800c16c:	3e01      	subs	r6, #1
 800c16e:	e7ea      	b.n	800c146 <__mdiff+0xde>
 800c170:	0800e5a4 	.word	0x0800e5a4
 800c174:	0800e618 	.word	0x0800e618

0800c178 <__d2b>:
 800c178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c17c:	4689      	mov	r9, r1
 800c17e:	2101      	movs	r1, #1
 800c180:	ec57 6b10 	vmov	r6, r7, d0
 800c184:	4690      	mov	r8, r2
 800c186:	f7ff fcd5 	bl	800bb34 <_Balloc>
 800c18a:	4604      	mov	r4, r0
 800c18c:	b930      	cbnz	r0, 800c19c <__d2b+0x24>
 800c18e:	4602      	mov	r2, r0
 800c190:	4b25      	ldr	r3, [pc, #148]	; (800c228 <__d2b+0xb0>)
 800c192:	4826      	ldr	r0, [pc, #152]	; (800c22c <__d2b+0xb4>)
 800c194:	f240 310a 	movw	r1, #778	; 0x30a
 800c198:	f000 fd2c 	bl	800cbf4 <__assert_func>
 800c19c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c1a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1a4:	bb35      	cbnz	r5, 800c1f4 <__d2b+0x7c>
 800c1a6:	2e00      	cmp	r6, #0
 800c1a8:	9301      	str	r3, [sp, #4]
 800c1aa:	d028      	beq.n	800c1fe <__d2b+0x86>
 800c1ac:	4668      	mov	r0, sp
 800c1ae:	9600      	str	r6, [sp, #0]
 800c1b0:	f7ff fd8c 	bl	800bccc <__lo0bits>
 800c1b4:	9900      	ldr	r1, [sp, #0]
 800c1b6:	b300      	cbz	r0, 800c1fa <__d2b+0x82>
 800c1b8:	9a01      	ldr	r2, [sp, #4]
 800c1ba:	f1c0 0320 	rsb	r3, r0, #32
 800c1be:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c2:	430b      	orrs	r3, r1
 800c1c4:	40c2      	lsrs	r2, r0
 800c1c6:	6163      	str	r3, [r4, #20]
 800c1c8:	9201      	str	r2, [sp, #4]
 800c1ca:	9b01      	ldr	r3, [sp, #4]
 800c1cc:	61a3      	str	r3, [r4, #24]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	bf14      	ite	ne
 800c1d2:	2202      	movne	r2, #2
 800c1d4:	2201      	moveq	r2, #1
 800c1d6:	6122      	str	r2, [r4, #16]
 800c1d8:	b1d5      	cbz	r5, 800c210 <__d2b+0x98>
 800c1da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1de:	4405      	add	r5, r0
 800c1e0:	f8c9 5000 	str.w	r5, [r9]
 800c1e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1e8:	f8c8 0000 	str.w	r0, [r8]
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	b003      	add	sp, #12
 800c1f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1f8:	e7d5      	b.n	800c1a6 <__d2b+0x2e>
 800c1fa:	6161      	str	r1, [r4, #20]
 800c1fc:	e7e5      	b.n	800c1ca <__d2b+0x52>
 800c1fe:	a801      	add	r0, sp, #4
 800c200:	f7ff fd64 	bl	800bccc <__lo0bits>
 800c204:	9b01      	ldr	r3, [sp, #4]
 800c206:	6163      	str	r3, [r4, #20]
 800c208:	2201      	movs	r2, #1
 800c20a:	6122      	str	r2, [r4, #16]
 800c20c:	3020      	adds	r0, #32
 800c20e:	e7e3      	b.n	800c1d8 <__d2b+0x60>
 800c210:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c214:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c218:	f8c9 0000 	str.w	r0, [r9]
 800c21c:	6918      	ldr	r0, [r3, #16]
 800c21e:	f7ff fd35 	bl	800bc8c <__hi0bits>
 800c222:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c226:	e7df      	b.n	800c1e8 <__d2b+0x70>
 800c228:	0800e5a4 	.word	0x0800e5a4
 800c22c:	0800e618 	.word	0x0800e618

0800c230 <_mprec_log10>:
 800c230:	2817      	cmp	r0, #23
 800c232:	b5d0      	push	{r4, r6, r7, lr}
 800c234:	4604      	mov	r4, r0
 800c236:	dc07      	bgt.n	800c248 <_mprec_log10+0x18>
 800c238:	4809      	ldr	r0, [pc, #36]	; (800c260 <_mprec_log10+0x30>)
 800c23a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800c23e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c242:	ec41 0b10 	vmov	d0, r0, r1
 800c246:	bdd0      	pop	{r4, r6, r7, pc}
 800c248:	4906      	ldr	r1, [pc, #24]	; (800c264 <_mprec_log10+0x34>)
 800c24a:	4f07      	ldr	r7, [pc, #28]	; (800c268 <_mprec_log10+0x38>)
 800c24c:	2000      	movs	r0, #0
 800c24e:	2600      	movs	r6, #0
 800c250:	4632      	mov	r2, r6
 800c252:	463b      	mov	r3, r7
 800c254:	f7f4 f9e0 	bl	8000618 <__aeabi_dmul>
 800c258:	3c01      	subs	r4, #1
 800c25a:	d1f9      	bne.n	800c250 <_mprec_log10+0x20>
 800c25c:	e7f1      	b.n	800c242 <_mprec_log10+0x12>
 800c25e:	bf00      	nop
 800c260:	0800e6a0 	.word	0x0800e6a0
 800c264:	3ff00000 	.word	0x3ff00000
 800c268:	40240000 	.word	0x40240000

0800c26c <_calloc_r>:
 800c26c:	b513      	push	{r0, r1, r4, lr}
 800c26e:	434a      	muls	r2, r1
 800c270:	4611      	mov	r1, r2
 800c272:	9201      	str	r2, [sp, #4]
 800c274:	f000 f85a 	bl	800c32c <_malloc_r>
 800c278:	4604      	mov	r4, r0
 800c27a:	b118      	cbz	r0, 800c284 <_calloc_r+0x18>
 800c27c:	9a01      	ldr	r2, [sp, #4]
 800c27e:	2100      	movs	r1, #0
 800c280:	f7fd fe2c 	bl	8009edc <memset>
 800c284:	4620      	mov	r0, r4
 800c286:	b002      	add	sp, #8
 800c288:	bd10      	pop	{r4, pc}
	...

0800c28c <_free_r>:
 800c28c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c28e:	2900      	cmp	r1, #0
 800c290:	d048      	beq.n	800c324 <_free_r+0x98>
 800c292:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c296:	9001      	str	r0, [sp, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f1a1 0404 	sub.w	r4, r1, #4
 800c29e:	bfb8      	it	lt
 800c2a0:	18e4      	addlt	r4, r4, r3
 800c2a2:	f000 fe4b 	bl	800cf3c <__malloc_lock>
 800c2a6:	4a20      	ldr	r2, [pc, #128]	; (800c328 <_free_r+0x9c>)
 800c2a8:	9801      	ldr	r0, [sp, #4]
 800c2aa:	6813      	ldr	r3, [r2, #0]
 800c2ac:	4615      	mov	r5, r2
 800c2ae:	b933      	cbnz	r3, 800c2be <_free_r+0x32>
 800c2b0:	6063      	str	r3, [r4, #4]
 800c2b2:	6014      	str	r4, [r2, #0]
 800c2b4:	b003      	add	sp, #12
 800c2b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2ba:	f000 be45 	b.w	800cf48 <__malloc_unlock>
 800c2be:	42a3      	cmp	r3, r4
 800c2c0:	d90b      	bls.n	800c2da <_free_r+0x4e>
 800c2c2:	6821      	ldr	r1, [r4, #0]
 800c2c4:	1862      	adds	r2, r4, r1
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	bf04      	itt	eq
 800c2ca:	681a      	ldreq	r2, [r3, #0]
 800c2cc:	685b      	ldreq	r3, [r3, #4]
 800c2ce:	6063      	str	r3, [r4, #4]
 800c2d0:	bf04      	itt	eq
 800c2d2:	1852      	addeq	r2, r2, r1
 800c2d4:	6022      	streq	r2, [r4, #0]
 800c2d6:	602c      	str	r4, [r5, #0]
 800c2d8:	e7ec      	b.n	800c2b4 <_free_r+0x28>
 800c2da:	461a      	mov	r2, r3
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	b10b      	cbz	r3, 800c2e4 <_free_r+0x58>
 800c2e0:	42a3      	cmp	r3, r4
 800c2e2:	d9fa      	bls.n	800c2da <_free_r+0x4e>
 800c2e4:	6811      	ldr	r1, [r2, #0]
 800c2e6:	1855      	adds	r5, r2, r1
 800c2e8:	42a5      	cmp	r5, r4
 800c2ea:	d10b      	bne.n	800c304 <_free_r+0x78>
 800c2ec:	6824      	ldr	r4, [r4, #0]
 800c2ee:	4421      	add	r1, r4
 800c2f0:	1854      	adds	r4, r2, r1
 800c2f2:	42a3      	cmp	r3, r4
 800c2f4:	6011      	str	r1, [r2, #0]
 800c2f6:	d1dd      	bne.n	800c2b4 <_free_r+0x28>
 800c2f8:	681c      	ldr	r4, [r3, #0]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	6053      	str	r3, [r2, #4]
 800c2fe:	4421      	add	r1, r4
 800c300:	6011      	str	r1, [r2, #0]
 800c302:	e7d7      	b.n	800c2b4 <_free_r+0x28>
 800c304:	d902      	bls.n	800c30c <_free_r+0x80>
 800c306:	230c      	movs	r3, #12
 800c308:	6003      	str	r3, [r0, #0]
 800c30a:	e7d3      	b.n	800c2b4 <_free_r+0x28>
 800c30c:	6825      	ldr	r5, [r4, #0]
 800c30e:	1961      	adds	r1, r4, r5
 800c310:	428b      	cmp	r3, r1
 800c312:	bf04      	itt	eq
 800c314:	6819      	ldreq	r1, [r3, #0]
 800c316:	685b      	ldreq	r3, [r3, #4]
 800c318:	6063      	str	r3, [r4, #4]
 800c31a:	bf04      	itt	eq
 800c31c:	1949      	addeq	r1, r1, r5
 800c31e:	6021      	streq	r1, [r4, #0]
 800c320:	6054      	str	r4, [r2, #4]
 800c322:	e7c7      	b.n	800c2b4 <_free_r+0x28>
 800c324:	b003      	add	sp, #12
 800c326:	bd30      	pop	{r4, r5, pc}
 800c328:	20004bc4 	.word	0x20004bc4

0800c32c <_malloc_r>:
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	1ccd      	adds	r5, r1, #3
 800c330:	f025 0503 	bic.w	r5, r5, #3
 800c334:	3508      	adds	r5, #8
 800c336:	2d0c      	cmp	r5, #12
 800c338:	bf38      	it	cc
 800c33a:	250c      	movcc	r5, #12
 800c33c:	2d00      	cmp	r5, #0
 800c33e:	4606      	mov	r6, r0
 800c340:	db01      	blt.n	800c346 <_malloc_r+0x1a>
 800c342:	42a9      	cmp	r1, r5
 800c344:	d903      	bls.n	800c34e <_malloc_r+0x22>
 800c346:	230c      	movs	r3, #12
 800c348:	6033      	str	r3, [r6, #0]
 800c34a:	2000      	movs	r0, #0
 800c34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c34e:	f000 fdf5 	bl	800cf3c <__malloc_lock>
 800c352:	4921      	ldr	r1, [pc, #132]	; (800c3d8 <_malloc_r+0xac>)
 800c354:	680a      	ldr	r2, [r1, #0]
 800c356:	4614      	mov	r4, r2
 800c358:	b99c      	cbnz	r4, 800c382 <_malloc_r+0x56>
 800c35a:	4f20      	ldr	r7, [pc, #128]	; (800c3dc <_malloc_r+0xb0>)
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	b923      	cbnz	r3, 800c36a <_malloc_r+0x3e>
 800c360:	4621      	mov	r1, r4
 800c362:	4630      	mov	r0, r6
 800c364:	f000 fb18 	bl	800c998 <_sbrk_r>
 800c368:	6038      	str	r0, [r7, #0]
 800c36a:	4629      	mov	r1, r5
 800c36c:	4630      	mov	r0, r6
 800c36e:	f000 fb13 	bl	800c998 <_sbrk_r>
 800c372:	1c43      	adds	r3, r0, #1
 800c374:	d123      	bne.n	800c3be <_malloc_r+0x92>
 800c376:	230c      	movs	r3, #12
 800c378:	6033      	str	r3, [r6, #0]
 800c37a:	4630      	mov	r0, r6
 800c37c:	f000 fde4 	bl	800cf48 <__malloc_unlock>
 800c380:	e7e3      	b.n	800c34a <_malloc_r+0x1e>
 800c382:	6823      	ldr	r3, [r4, #0]
 800c384:	1b5b      	subs	r3, r3, r5
 800c386:	d417      	bmi.n	800c3b8 <_malloc_r+0x8c>
 800c388:	2b0b      	cmp	r3, #11
 800c38a:	d903      	bls.n	800c394 <_malloc_r+0x68>
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	441c      	add	r4, r3
 800c390:	6025      	str	r5, [r4, #0]
 800c392:	e004      	b.n	800c39e <_malloc_r+0x72>
 800c394:	6863      	ldr	r3, [r4, #4]
 800c396:	42a2      	cmp	r2, r4
 800c398:	bf0c      	ite	eq
 800c39a:	600b      	streq	r3, [r1, #0]
 800c39c:	6053      	strne	r3, [r2, #4]
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f000 fdd2 	bl	800cf48 <__malloc_unlock>
 800c3a4:	f104 000b 	add.w	r0, r4, #11
 800c3a8:	1d23      	adds	r3, r4, #4
 800c3aa:	f020 0007 	bic.w	r0, r0, #7
 800c3ae:	1ac2      	subs	r2, r0, r3
 800c3b0:	d0cc      	beq.n	800c34c <_malloc_r+0x20>
 800c3b2:	1a1b      	subs	r3, r3, r0
 800c3b4:	50a3      	str	r3, [r4, r2]
 800c3b6:	e7c9      	b.n	800c34c <_malloc_r+0x20>
 800c3b8:	4622      	mov	r2, r4
 800c3ba:	6864      	ldr	r4, [r4, #4]
 800c3bc:	e7cc      	b.n	800c358 <_malloc_r+0x2c>
 800c3be:	1cc4      	adds	r4, r0, #3
 800c3c0:	f024 0403 	bic.w	r4, r4, #3
 800c3c4:	42a0      	cmp	r0, r4
 800c3c6:	d0e3      	beq.n	800c390 <_malloc_r+0x64>
 800c3c8:	1a21      	subs	r1, r4, r0
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f000 fae4 	bl	800c998 <_sbrk_r>
 800c3d0:	3001      	adds	r0, #1
 800c3d2:	d1dd      	bne.n	800c390 <_malloc_r+0x64>
 800c3d4:	e7cf      	b.n	800c376 <_malloc_r+0x4a>
 800c3d6:	bf00      	nop
 800c3d8:	20004bc4 	.word	0x20004bc4
 800c3dc:	20004bc8 	.word	0x20004bc8

0800c3e0 <_realloc_r>:
 800c3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e2:	4607      	mov	r7, r0
 800c3e4:	4614      	mov	r4, r2
 800c3e6:	460e      	mov	r6, r1
 800c3e8:	b921      	cbnz	r1, 800c3f4 <_realloc_r+0x14>
 800c3ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	f7ff bf9c 	b.w	800c32c <_malloc_r>
 800c3f4:	b922      	cbnz	r2, 800c400 <_realloc_r+0x20>
 800c3f6:	f7ff ff49 	bl	800c28c <_free_r>
 800c3fa:	4625      	mov	r5, r4
 800c3fc:	4628      	mov	r0, r5
 800c3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c400:	f000 fda8 	bl	800cf54 <_malloc_usable_size_r>
 800c404:	42a0      	cmp	r0, r4
 800c406:	d20f      	bcs.n	800c428 <_realloc_r+0x48>
 800c408:	4621      	mov	r1, r4
 800c40a:	4638      	mov	r0, r7
 800c40c:	f7ff ff8e 	bl	800c32c <_malloc_r>
 800c410:	4605      	mov	r5, r0
 800c412:	2800      	cmp	r0, #0
 800c414:	d0f2      	beq.n	800c3fc <_realloc_r+0x1c>
 800c416:	4631      	mov	r1, r6
 800c418:	4622      	mov	r2, r4
 800c41a:	f7fd fd51 	bl	8009ec0 <memcpy>
 800c41e:	4631      	mov	r1, r6
 800c420:	4638      	mov	r0, r7
 800c422:	f7ff ff33 	bl	800c28c <_free_r>
 800c426:	e7e9      	b.n	800c3fc <_realloc_r+0x1c>
 800c428:	4635      	mov	r5, r6
 800c42a:	e7e7      	b.n	800c3fc <_realloc_r+0x1c>

0800c42c <__ssputs_r>:
 800c42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c430:	688e      	ldr	r6, [r1, #8]
 800c432:	429e      	cmp	r6, r3
 800c434:	4682      	mov	sl, r0
 800c436:	460c      	mov	r4, r1
 800c438:	4690      	mov	r8, r2
 800c43a:	461f      	mov	r7, r3
 800c43c:	d838      	bhi.n	800c4b0 <__ssputs_r+0x84>
 800c43e:	898a      	ldrh	r2, [r1, #12]
 800c440:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c444:	d032      	beq.n	800c4ac <__ssputs_r+0x80>
 800c446:	6825      	ldr	r5, [r4, #0]
 800c448:	6909      	ldr	r1, [r1, #16]
 800c44a:	eba5 0901 	sub.w	r9, r5, r1
 800c44e:	6965      	ldr	r5, [r4, #20]
 800c450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c458:	3301      	adds	r3, #1
 800c45a:	444b      	add	r3, r9
 800c45c:	106d      	asrs	r5, r5, #1
 800c45e:	429d      	cmp	r5, r3
 800c460:	bf38      	it	cc
 800c462:	461d      	movcc	r5, r3
 800c464:	0553      	lsls	r3, r2, #21
 800c466:	d531      	bpl.n	800c4cc <__ssputs_r+0xa0>
 800c468:	4629      	mov	r1, r5
 800c46a:	f7ff ff5f 	bl	800c32c <_malloc_r>
 800c46e:	4606      	mov	r6, r0
 800c470:	b950      	cbnz	r0, 800c488 <__ssputs_r+0x5c>
 800c472:	230c      	movs	r3, #12
 800c474:	f8ca 3000 	str.w	r3, [sl]
 800c478:	89a3      	ldrh	r3, [r4, #12]
 800c47a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c47e:	81a3      	strh	r3, [r4, #12]
 800c480:	f04f 30ff 	mov.w	r0, #4294967295
 800c484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c488:	6921      	ldr	r1, [r4, #16]
 800c48a:	464a      	mov	r2, r9
 800c48c:	f7fd fd18 	bl	8009ec0 <memcpy>
 800c490:	89a3      	ldrh	r3, [r4, #12]
 800c492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c49a:	81a3      	strh	r3, [r4, #12]
 800c49c:	6126      	str	r6, [r4, #16]
 800c49e:	6165      	str	r5, [r4, #20]
 800c4a0:	444e      	add	r6, r9
 800c4a2:	eba5 0509 	sub.w	r5, r5, r9
 800c4a6:	6026      	str	r6, [r4, #0]
 800c4a8:	60a5      	str	r5, [r4, #8]
 800c4aa:	463e      	mov	r6, r7
 800c4ac:	42be      	cmp	r6, r7
 800c4ae:	d900      	bls.n	800c4b2 <__ssputs_r+0x86>
 800c4b0:	463e      	mov	r6, r7
 800c4b2:	4632      	mov	r2, r6
 800c4b4:	6820      	ldr	r0, [r4, #0]
 800c4b6:	4641      	mov	r1, r8
 800c4b8:	f000 fd26 	bl	800cf08 <memmove>
 800c4bc:	68a3      	ldr	r3, [r4, #8]
 800c4be:	6822      	ldr	r2, [r4, #0]
 800c4c0:	1b9b      	subs	r3, r3, r6
 800c4c2:	4432      	add	r2, r6
 800c4c4:	60a3      	str	r3, [r4, #8]
 800c4c6:	6022      	str	r2, [r4, #0]
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	e7db      	b.n	800c484 <__ssputs_r+0x58>
 800c4cc:	462a      	mov	r2, r5
 800c4ce:	f7ff ff87 	bl	800c3e0 <_realloc_r>
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d1e1      	bne.n	800c49c <__ssputs_r+0x70>
 800c4d8:	6921      	ldr	r1, [r4, #16]
 800c4da:	4650      	mov	r0, sl
 800c4dc:	f7ff fed6 	bl	800c28c <_free_r>
 800c4e0:	e7c7      	b.n	800c472 <__ssputs_r+0x46>
	...

0800c4e4 <_svfiprintf_r>:
 800c4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e8:	4698      	mov	r8, r3
 800c4ea:	898b      	ldrh	r3, [r1, #12]
 800c4ec:	061b      	lsls	r3, r3, #24
 800c4ee:	b09d      	sub	sp, #116	; 0x74
 800c4f0:	4607      	mov	r7, r0
 800c4f2:	460d      	mov	r5, r1
 800c4f4:	4614      	mov	r4, r2
 800c4f6:	d50e      	bpl.n	800c516 <_svfiprintf_r+0x32>
 800c4f8:	690b      	ldr	r3, [r1, #16]
 800c4fa:	b963      	cbnz	r3, 800c516 <_svfiprintf_r+0x32>
 800c4fc:	2140      	movs	r1, #64	; 0x40
 800c4fe:	f7ff ff15 	bl	800c32c <_malloc_r>
 800c502:	6028      	str	r0, [r5, #0]
 800c504:	6128      	str	r0, [r5, #16]
 800c506:	b920      	cbnz	r0, 800c512 <_svfiprintf_r+0x2e>
 800c508:	230c      	movs	r3, #12
 800c50a:	603b      	str	r3, [r7, #0]
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295
 800c510:	e0d1      	b.n	800c6b6 <_svfiprintf_r+0x1d2>
 800c512:	2340      	movs	r3, #64	; 0x40
 800c514:	616b      	str	r3, [r5, #20]
 800c516:	2300      	movs	r3, #0
 800c518:	9309      	str	r3, [sp, #36]	; 0x24
 800c51a:	2320      	movs	r3, #32
 800c51c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c520:	f8cd 800c 	str.w	r8, [sp, #12]
 800c524:	2330      	movs	r3, #48	; 0x30
 800c526:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c6d0 <_svfiprintf_r+0x1ec>
 800c52a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c52e:	f04f 0901 	mov.w	r9, #1
 800c532:	4623      	mov	r3, r4
 800c534:	469a      	mov	sl, r3
 800c536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c53a:	b10a      	cbz	r2, 800c540 <_svfiprintf_r+0x5c>
 800c53c:	2a25      	cmp	r2, #37	; 0x25
 800c53e:	d1f9      	bne.n	800c534 <_svfiprintf_r+0x50>
 800c540:	ebba 0b04 	subs.w	fp, sl, r4
 800c544:	d00b      	beq.n	800c55e <_svfiprintf_r+0x7a>
 800c546:	465b      	mov	r3, fp
 800c548:	4622      	mov	r2, r4
 800c54a:	4629      	mov	r1, r5
 800c54c:	4638      	mov	r0, r7
 800c54e:	f7ff ff6d 	bl	800c42c <__ssputs_r>
 800c552:	3001      	adds	r0, #1
 800c554:	f000 80aa 	beq.w	800c6ac <_svfiprintf_r+0x1c8>
 800c558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c55a:	445a      	add	r2, fp
 800c55c:	9209      	str	r2, [sp, #36]	; 0x24
 800c55e:	f89a 3000 	ldrb.w	r3, [sl]
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 80a2 	beq.w	800c6ac <_svfiprintf_r+0x1c8>
 800c568:	2300      	movs	r3, #0
 800c56a:	f04f 32ff 	mov.w	r2, #4294967295
 800c56e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c572:	f10a 0a01 	add.w	sl, sl, #1
 800c576:	9304      	str	r3, [sp, #16]
 800c578:	9307      	str	r3, [sp, #28]
 800c57a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c57e:	931a      	str	r3, [sp, #104]	; 0x68
 800c580:	4654      	mov	r4, sl
 800c582:	2205      	movs	r2, #5
 800c584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c588:	4851      	ldr	r0, [pc, #324]	; (800c6d0 <_svfiprintf_r+0x1ec>)
 800c58a:	f7f3 fe39 	bl	8000200 <memchr>
 800c58e:	9a04      	ldr	r2, [sp, #16]
 800c590:	b9d8      	cbnz	r0, 800c5ca <_svfiprintf_r+0xe6>
 800c592:	06d0      	lsls	r0, r2, #27
 800c594:	bf44      	itt	mi
 800c596:	2320      	movmi	r3, #32
 800c598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c59c:	0711      	lsls	r1, r2, #28
 800c59e:	bf44      	itt	mi
 800c5a0:	232b      	movmi	r3, #43	; 0x2b
 800c5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c5ac:	d015      	beq.n	800c5da <_svfiprintf_r+0xf6>
 800c5ae:	9a07      	ldr	r2, [sp, #28]
 800c5b0:	4654      	mov	r4, sl
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	f04f 0c0a 	mov.w	ip, #10
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5be:	3b30      	subs	r3, #48	; 0x30
 800c5c0:	2b09      	cmp	r3, #9
 800c5c2:	d94e      	bls.n	800c662 <_svfiprintf_r+0x17e>
 800c5c4:	b1b0      	cbz	r0, 800c5f4 <_svfiprintf_r+0x110>
 800c5c6:	9207      	str	r2, [sp, #28]
 800c5c8:	e014      	b.n	800c5f4 <_svfiprintf_r+0x110>
 800c5ca:	eba0 0308 	sub.w	r3, r0, r8
 800c5ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	9304      	str	r3, [sp, #16]
 800c5d6:	46a2      	mov	sl, r4
 800c5d8:	e7d2      	b.n	800c580 <_svfiprintf_r+0x9c>
 800c5da:	9b03      	ldr	r3, [sp, #12]
 800c5dc:	1d19      	adds	r1, r3, #4
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	9103      	str	r1, [sp, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	bfbb      	ittet	lt
 800c5e6:	425b      	neglt	r3, r3
 800c5e8:	f042 0202 	orrlt.w	r2, r2, #2
 800c5ec:	9307      	strge	r3, [sp, #28]
 800c5ee:	9307      	strlt	r3, [sp, #28]
 800c5f0:	bfb8      	it	lt
 800c5f2:	9204      	strlt	r2, [sp, #16]
 800c5f4:	7823      	ldrb	r3, [r4, #0]
 800c5f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c5f8:	d10c      	bne.n	800c614 <_svfiprintf_r+0x130>
 800c5fa:	7863      	ldrb	r3, [r4, #1]
 800c5fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c5fe:	d135      	bne.n	800c66c <_svfiprintf_r+0x188>
 800c600:	9b03      	ldr	r3, [sp, #12]
 800c602:	1d1a      	adds	r2, r3, #4
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	9203      	str	r2, [sp, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	bfb8      	it	lt
 800c60c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c610:	3402      	adds	r4, #2
 800c612:	9305      	str	r3, [sp, #20]
 800c614:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c6e0 <_svfiprintf_r+0x1fc>
 800c618:	7821      	ldrb	r1, [r4, #0]
 800c61a:	2203      	movs	r2, #3
 800c61c:	4650      	mov	r0, sl
 800c61e:	f7f3 fdef 	bl	8000200 <memchr>
 800c622:	b140      	cbz	r0, 800c636 <_svfiprintf_r+0x152>
 800c624:	2340      	movs	r3, #64	; 0x40
 800c626:	eba0 000a 	sub.w	r0, r0, sl
 800c62a:	fa03 f000 	lsl.w	r0, r3, r0
 800c62e:	9b04      	ldr	r3, [sp, #16]
 800c630:	4303      	orrs	r3, r0
 800c632:	3401      	adds	r4, #1
 800c634:	9304      	str	r3, [sp, #16]
 800c636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c63a:	4826      	ldr	r0, [pc, #152]	; (800c6d4 <_svfiprintf_r+0x1f0>)
 800c63c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c640:	2206      	movs	r2, #6
 800c642:	f7f3 fddd 	bl	8000200 <memchr>
 800c646:	2800      	cmp	r0, #0
 800c648:	d038      	beq.n	800c6bc <_svfiprintf_r+0x1d8>
 800c64a:	4b23      	ldr	r3, [pc, #140]	; (800c6d8 <_svfiprintf_r+0x1f4>)
 800c64c:	bb1b      	cbnz	r3, 800c696 <_svfiprintf_r+0x1b2>
 800c64e:	9b03      	ldr	r3, [sp, #12]
 800c650:	3307      	adds	r3, #7
 800c652:	f023 0307 	bic.w	r3, r3, #7
 800c656:	3308      	adds	r3, #8
 800c658:	9303      	str	r3, [sp, #12]
 800c65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c65c:	4433      	add	r3, r6
 800c65e:	9309      	str	r3, [sp, #36]	; 0x24
 800c660:	e767      	b.n	800c532 <_svfiprintf_r+0x4e>
 800c662:	fb0c 3202 	mla	r2, ip, r2, r3
 800c666:	460c      	mov	r4, r1
 800c668:	2001      	movs	r0, #1
 800c66a:	e7a5      	b.n	800c5b8 <_svfiprintf_r+0xd4>
 800c66c:	2300      	movs	r3, #0
 800c66e:	3401      	adds	r4, #1
 800c670:	9305      	str	r3, [sp, #20]
 800c672:	4619      	mov	r1, r3
 800c674:	f04f 0c0a 	mov.w	ip, #10
 800c678:	4620      	mov	r0, r4
 800c67a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c67e:	3a30      	subs	r2, #48	; 0x30
 800c680:	2a09      	cmp	r2, #9
 800c682:	d903      	bls.n	800c68c <_svfiprintf_r+0x1a8>
 800c684:	2b00      	cmp	r3, #0
 800c686:	d0c5      	beq.n	800c614 <_svfiprintf_r+0x130>
 800c688:	9105      	str	r1, [sp, #20]
 800c68a:	e7c3      	b.n	800c614 <_svfiprintf_r+0x130>
 800c68c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c690:	4604      	mov	r4, r0
 800c692:	2301      	movs	r3, #1
 800c694:	e7f0      	b.n	800c678 <_svfiprintf_r+0x194>
 800c696:	ab03      	add	r3, sp, #12
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	462a      	mov	r2, r5
 800c69c:	4b0f      	ldr	r3, [pc, #60]	; (800c6dc <_svfiprintf_r+0x1f8>)
 800c69e:	a904      	add	r1, sp, #16
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	f7fd fcc3 	bl	800a02c <_printf_float>
 800c6a6:	1c42      	adds	r2, r0, #1
 800c6a8:	4606      	mov	r6, r0
 800c6aa:	d1d6      	bne.n	800c65a <_svfiprintf_r+0x176>
 800c6ac:	89ab      	ldrh	r3, [r5, #12]
 800c6ae:	065b      	lsls	r3, r3, #25
 800c6b0:	f53f af2c 	bmi.w	800c50c <_svfiprintf_r+0x28>
 800c6b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6b6:	b01d      	add	sp, #116	; 0x74
 800c6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6bc:	ab03      	add	r3, sp, #12
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	462a      	mov	r2, r5
 800c6c2:	4b06      	ldr	r3, [pc, #24]	; (800c6dc <_svfiprintf_r+0x1f8>)
 800c6c4:	a904      	add	r1, sp, #16
 800c6c6:	4638      	mov	r0, r7
 800c6c8:	f7fd ff54 	bl	800a574 <_printf_i>
 800c6cc:	e7eb      	b.n	800c6a6 <_svfiprintf_r+0x1c2>
 800c6ce:	bf00      	nop
 800c6d0:	0800e774 	.word	0x0800e774
 800c6d4:	0800e77e 	.word	0x0800e77e
 800c6d8:	0800a02d 	.word	0x0800a02d
 800c6dc:	0800c42d 	.word	0x0800c42d
 800c6e0:	0800e77a 	.word	0x0800e77a

0800c6e4 <__sfputc_r>:
 800c6e4:	6893      	ldr	r3, [r2, #8]
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	b410      	push	{r4}
 800c6ec:	6093      	str	r3, [r2, #8]
 800c6ee:	da08      	bge.n	800c702 <__sfputc_r+0x1e>
 800c6f0:	6994      	ldr	r4, [r2, #24]
 800c6f2:	42a3      	cmp	r3, r4
 800c6f4:	db01      	blt.n	800c6fa <__sfputc_r+0x16>
 800c6f6:	290a      	cmp	r1, #10
 800c6f8:	d103      	bne.n	800c702 <__sfputc_r+0x1e>
 800c6fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6fe:	f000 b9a7 	b.w	800ca50 <__swbuf_r>
 800c702:	6813      	ldr	r3, [r2, #0]
 800c704:	1c58      	adds	r0, r3, #1
 800c706:	6010      	str	r0, [r2, #0]
 800c708:	7019      	strb	r1, [r3, #0]
 800c70a:	4608      	mov	r0, r1
 800c70c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c710:	4770      	bx	lr

0800c712 <__sfputs_r>:
 800c712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c714:	4606      	mov	r6, r0
 800c716:	460f      	mov	r7, r1
 800c718:	4614      	mov	r4, r2
 800c71a:	18d5      	adds	r5, r2, r3
 800c71c:	42ac      	cmp	r4, r5
 800c71e:	d101      	bne.n	800c724 <__sfputs_r+0x12>
 800c720:	2000      	movs	r0, #0
 800c722:	e007      	b.n	800c734 <__sfputs_r+0x22>
 800c724:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c728:	463a      	mov	r2, r7
 800c72a:	4630      	mov	r0, r6
 800c72c:	f7ff ffda 	bl	800c6e4 <__sfputc_r>
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d1f3      	bne.n	800c71c <__sfputs_r+0xa>
 800c734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c738 <_vfiprintf_r>:
 800c738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c73c:	460d      	mov	r5, r1
 800c73e:	b09d      	sub	sp, #116	; 0x74
 800c740:	4614      	mov	r4, r2
 800c742:	4698      	mov	r8, r3
 800c744:	4606      	mov	r6, r0
 800c746:	b118      	cbz	r0, 800c750 <_vfiprintf_r+0x18>
 800c748:	6983      	ldr	r3, [r0, #24]
 800c74a:	b90b      	cbnz	r3, 800c750 <_vfiprintf_r+0x18>
 800c74c:	f7ff f944 	bl	800b9d8 <__sinit>
 800c750:	4b89      	ldr	r3, [pc, #548]	; (800c978 <_vfiprintf_r+0x240>)
 800c752:	429d      	cmp	r5, r3
 800c754:	d11b      	bne.n	800c78e <_vfiprintf_r+0x56>
 800c756:	6875      	ldr	r5, [r6, #4]
 800c758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c75a:	07d9      	lsls	r1, r3, #31
 800c75c:	d405      	bmi.n	800c76a <_vfiprintf_r+0x32>
 800c75e:	89ab      	ldrh	r3, [r5, #12]
 800c760:	059a      	lsls	r2, r3, #22
 800c762:	d402      	bmi.n	800c76a <_vfiprintf_r+0x32>
 800c764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c766:	f7ff f9da 	bl	800bb1e <__retarget_lock_acquire_recursive>
 800c76a:	89ab      	ldrh	r3, [r5, #12]
 800c76c:	071b      	lsls	r3, r3, #28
 800c76e:	d501      	bpl.n	800c774 <_vfiprintf_r+0x3c>
 800c770:	692b      	ldr	r3, [r5, #16]
 800c772:	b9eb      	cbnz	r3, 800c7b0 <_vfiprintf_r+0x78>
 800c774:	4629      	mov	r1, r5
 800c776:	4630      	mov	r0, r6
 800c778:	f000 f9ce 	bl	800cb18 <__swsetup_r>
 800c77c:	b1c0      	cbz	r0, 800c7b0 <_vfiprintf_r+0x78>
 800c77e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c780:	07dc      	lsls	r4, r3, #31
 800c782:	d50e      	bpl.n	800c7a2 <_vfiprintf_r+0x6a>
 800c784:	f04f 30ff 	mov.w	r0, #4294967295
 800c788:	b01d      	add	sp, #116	; 0x74
 800c78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78e:	4b7b      	ldr	r3, [pc, #492]	; (800c97c <_vfiprintf_r+0x244>)
 800c790:	429d      	cmp	r5, r3
 800c792:	d101      	bne.n	800c798 <_vfiprintf_r+0x60>
 800c794:	68b5      	ldr	r5, [r6, #8]
 800c796:	e7df      	b.n	800c758 <_vfiprintf_r+0x20>
 800c798:	4b79      	ldr	r3, [pc, #484]	; (800c980 <_vfiprintf_r+0x248>)
 800c79a:	429d      	cmp	r5, r3
 800c79c:	bf08      	it	eq
 800c79e:	68f5      	ldreq	r5, [r6, #12]
 800c7a0:	e7da      	b.n	800c758 <_vfiprintf_r+0x20>
 800c7a2:	89ab      	ldrh	r3, [r5, #12]
 800c7a4:	0598      	lsls	r0, r3, #22
 800c7a6:	d4ed      	bmi.n	800c784 <_vfiprintf_r+0x4c>
 800c7a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7aa:	f7ff f9b9 	bl	800bb20 <__retarget_lock_release_recursive>
 800c7ae:	e7e9      	b.n	800c784 <_vfiprintf_r+0x4c>
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7b4:	2320      	movs	r3, #32
 800c7b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7be:	2330      	movs	r3, #48	; 0x30
 800c7c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c984 <_vfiprintf_r+0x24c>
 800c7c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7c8:	f04f 0901 	mov.w	r9, #1
 800c7cc:	4623      	mov	r3, r4
 800c7ce:	469a      	mov	sl, r3
 800c7d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7d4:	b10a      	cbz	r2, 800c7da <_vfiprintf_r+0xa2>
 800c7d6:	2a25      	cmp	r2, #37	; 0x25
 800c7d8:	d1f9      	bne.n	800c7ce <_vfiprintf_r+0x96>
 800c7da:	ebba 0b04 	subs.w	fp, sl, r4
 800c7de:	d00b      	beq.n	800c7f8 <_vfiprintf_r+0xc0>
 800c7e0:	465b      	mov	r3, fp
 800c7e2:	4622      	mov	r2, r4
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f7ff ff93 	bl	800c712 <__sfputs_r>
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	f000 80aa 	beq.w	800c946 <_vfiprintf_r+0x20e>
 800c7f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7f4:	445a      	add	r2, fp
 800c7f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c7f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 80a2 	beq.w	800c946 <_vfiprintf_r+0x20e>
 800c802:	2300      	movs	r3, #0
 800c804:	f04f 32ff 	mov.w	r2, #4294967295
 800c808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c80c:	f10a 0a01 	add.w	sl, sl, #1
 800c810:	9304      	str	r3, [sp, #16]
 800c812:	9307      	str	r3, [sp, #28]
 800c814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c818:	931a      	str	r3, [sp, #104]	; 0x68
 800c81a:	4654      	mov	r4, sl
 800c81c:	2205      	movs	r2, #5
 800c81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c822:	4858      	ldr	r0, [pc, #352]	; (800c984 <_vfiprintf_r+0x24c>)
 800c824:	f7f3 fcec 	bl	8000200 <memchr>
 800c828:	9a04      	ldr	r2, [sp, #16]
 800c82a:	b9d8      	cbnz	r0, 800c864 <_vfiprintf_r+0x12c>
 800c82c:	06d1      	lsls	r1, r2, #27
 800c82e:	bf44      	itt	mi
 800c830:	2320      	movmi	r3, #32
 800c832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c836:	0713      	lsls	r3, r2, #28
 800c838:	bf44      	itt	mi
 800c83a:	232b      	movmi	r3, #43	; 0x2b
 800c83c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c840:	f89a 3000 	ldrb.w	r3, [sl]
 800c844:	2b2a      	cmp	r3, #42	; 0x2a
 800c846:	d015      	beq.n	800c874 <_vfiprintf_r+0x13c>
 800c848:	9a07      	ldr	r2, [sp, #28]
 800c84a:	4654      	mov	r4, sl
 800c84c:	2000      	movs	r0, #0
 800c84e:	f04f 0c0a 	mov.w	ip, #10
 800c852:	4621      	mov	r1, r4
 800c854:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c858:	3b30      	subs	r3, #48	; 0x30
 800c85a:	2b09      	cmp	r3, #9
 800c85c:	d94e      	bls.n	800c8fc <_vfiprintf_r+0x1c4>
 800c85e:	b1b0      	cbz	r0, 800c88e <_vfiprintf_r+0x156>
 800c860:	9207      	str	r2, [sp, #28]
 800c862:	e014      	b.n	800c88e <_vfiprintf_r+0x156>
 800c864:	eba0 0308 	sub.w	r3, r0, r8
 800c868:	fa09 f303 	lsl.w	r3, r9, r3
 800c86c:	4313      	orrs	r3, r2
 800c86e:	9304      	str	r3, [sp, #16]
 800c870:	46a2      	mov	sl, r4
 800c872:	e7d2      	b.n	800c81a <_vfiprintf_r+0xe2>
 800c874:	9b03      	ldr	r3, [sp, #12]
 800c876:	1d19      	adds	r1, r3, #4
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	9103      	str	r1, [sp, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	bfbb      	ittet	lt
 800c880:	425b      	neglt	r3, r3
 800c882:	f042 0202 	orrlt.w	r2, r2, #2
 800c886:	9307      	strge	r3, [sp, #28]
 800c888:	9307      	strlt	r3, [sp, #28]
 800c88a:	bfb8      	it	lt
 800c88c:	9204      	strlt	r2, [sp, #16]
 800c88e:	7823      	ldrb	r3, [r4, #0]
 800c890:	2b2e      	cmp	r3, #46	; 0x2e
 800c892:	d10c      	bne.n	800c8ae <_vfiprintf_r+0x176>
 800c894:	7863      	ldrb	r3, [r4, #1]
 800c896:	2b2a      	cmp	r3, #42	; 0x2a
 800c898:	d135      	bne.n	800c906 <_vfiprintf_r+0x1ce>
 800c89a:	9b03      	ldr	r3, [sp, #12]
 800c89c:	1d1a      	adds	r2, r3, #4
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	9203      	str	r2, [sp, #12]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	bfb8      	it	lt
 800c8a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8aa:	3402      	adds	r4, #2
 800c8ac:	9305      	str	r3, [sp, #20]
 800c8ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c994 <_vfiprintf_r+0x25c>
 800c8b2:	7821      	ldrb	r1, [r4, #0]
 800c8b4:	2203      	movs	r2, #3
 800c8b6:	4650      	mov	r0, sl
 800c8b8:	f7f3 fca2 	bl	8000200 <memchr>
 800c8bc:	b140      	cbz	r0, 800c8d0 <_vfiprintf_r+0x198>
 800c8be:	2340      	movs	r3, #64	; 0x40
 800c8c0:	eba0 000a 	sub.w	r0, r0, sl
 800c8c4:	fa03 f000 	lsl.w	r0, r3, r0
 800c8c8:	9b04      	ldr	r3, [sp, #16]
 800c8ca:	4303      	orrs	r3, r0
 800c8cc:	3401      	adds	r4, #1
 800c8ce:	9304      	str	r3, [sp, #16]
 800c8d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d4:	482c      	ldr	r0, [pc, #176]	; (800c988 <_vfiprintf_r+0x250>)
 800c8d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8da:	2206      	movs	r2, #6
 800c8dc:	f7f3 fc90 	bl	8000200 <memchr>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d03f      	beq.n	800c964 <_vfiprintf_r+0x22c>
 800c8e4:	4b29      	ldr	r3, [pc, #164]	; (800c98c <_vfiprintf_r+0x254>)
 800c8e6:	bb1b      	cbnz	r3, 800c930 <_vfiprintf_r+0x1f8>
 800c8e8:	9b03      	ldr	r3, [sp, #12]
 800c8ea:	3307      	adds	r3, #7
 800c8ec:	f023 0307 	bic.w	r3, r3, #7
 800c8f0:	3308      	adds	r3, #8
 800c8f2:	9303      	str	r3, [sp, #12]
 800c8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f6:	443b      	add	r3, r7
 800c8f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8fa:	e767      	b.n	800c7cc <_vfiprintf_r+0x94>
 800c8fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c900:	460c      	mov	r4, r1
 800c902:	2001      	movs	r0, #1
 800c904:	e7a5      	b.n	800c852 <_vfiprintf_r+0x11a>
 800c906:	2300      	movs	r3, #0
 800c908:	3401      	adds	r4, #1
 800c90a:	9305      	str	r3, [sp, #20]
 800c90c:	4619      	mov	r1, r3
 800c90e:	f04f 0c0a 	mov.w	ip, #10
 800c912:	4620      	mov	r0, r4
 800c914:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c918:	3a30      	subs	r2, #48	; 0x30
 800c91a:	2a09      	cmp	r2, #9
 800c91c:	d903      	bls.n	800c926 <_vfiprintf_r+0x1ee>
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d0c5      	beq.n	800c8ae <_vfiprintf_r+0x176>
 800c922:	9105      	str	r1, [sp, #20]
 800c924:	e7c3      	b.n	800c8ae <_vfiprintf_r+0x176>
 800c926:	fb0c 2101 	mla	r1, ip, r1, r2
 800c92a:	4604      	mov	r4, r0
 800c92c:	2301      	movs	r3, #1
 800c92e:	e7f0      	b.n	800c912 <_vfiprintf_r+0x1da>
 800c930:	ab03      	add	r3, sp, #12
 800c932:	9300      	str	r3, [sp, #0]
 800c934:	462a      	mov	r2, r5
 800c936:	4b16      	ldr	r3, [pc, #88]	; (800c990 <_vfiprintf_r+0x258>)
 800c938:	a904      	add	r1, sp, #16
 800c93a:	4630      	mov	r0, r6
 800c93c:	f7fd fb76 	bl	800a02c <_printf_float>
 800c940:	4607      	mov	r7, r0
 800c942:	1c78      	adds	r0, r7, #1
 800c944:	d1d6      	bne.n	800c8f4 <_vfiprintf_r+0x1bc>
 800c946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c948:	07d9      	lsls	r1, r3, #31
 800c94a:	d405      	bmi.n	800c958 <_vfiprintf_r+0x220>
 800c94c:	89ab      	ldrh	r3, [r5, #12]
 800c94e:	059a      	lsls	r2, r3, #22
 800c950:	d402      	bmi.n	800c958 <_vfiprintf_r+0x220>
 800c952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c954:	f7ff f8e4 	bl	800bb20 <__retarget_lock_release_recursive>
 800c958:	89ab      	ldrh	r3, [r5, #12]
 800c95a:	065b      	lsls	r3, r3, #25
 800c95c:	f53f af12 	bmi.w	800c784 <_vfiprintf_r+0x4c>
 800c960:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c962:	e711      	b.n	800c788 <_vfiprintf_r+0x50>
 800c964:	ab03      	add	r3, sp, #12
 800c966:	9300      	str	r3, [sp, #0]
 800c968:	462a      	mov	r2, r5
 800c96a:	4b09      	ldr	r3, [pc, #36]	; (800c990 <_vfiprintf_r+0x258>)
 800c96c:	a904      	add	r1, sp, #16
 800c96e:	4630      	mov	r0, r6
 800c970:	f7fd fe00 	bl	800a574 <_printf_i>
 800c974:	e7e4      	b.n	800c940 <_vfiprintf_r+0x208>
 800c976:	bf00      	nop
 800c978:	0800e5d8 	.word	0x0800e5d8
 800c97c:	0800e5f8 	.word	0x0800e5f8
 800c980:	0800e5b8 	.word	0x0800e5b8
 800c984:	0800e774 	.word	0x0800e774
 800c988:	0800e77e 	.word	0x0800e77e
 800c98c:	0800a02d 	.word	0x0800a02d
 800c990:	0800c713 	.word	0x0800c713
 800c994:	0800e77a 	.word	0x0800e77a

0800c998 <_sbrk_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	4d06      	ldr	r5, [pc, #24]	; (800c9b4 <_sbrk_r+0x1c>)
 800c99c:	2300      	movs	r3, #0
 800c99e:	4604      	mov	r4, r0
 800c9a0:	4608      	mov	r0, r1
 800c9a2:	602b      	str	r3, [r5, #0]
 800c9a4:	f7f6 fe4a 	bl	800363c <_sbrk>
 800c9a8:	1c43      	adds	r3, r0, #1
 800c9aa:	d102      	bne.n	800c9b2 <_sbrk_r+0x1a>
 800c9ac:	682b      	ldr	r3, [r5, #0]
 800c9ae:	b103      	cbz	r3, 800c9b2 <_sbrk_r+0x1a>
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	bd38      	pop	{r3, r4, r5, pc}
 800c9b4:	20005550 	.word	0x20005550

0800c9b8 <__sread>:
 800c9b8:	b510      	push	{r4, lr}
 800c9ba:	460c      	mov	r4, r1
 800c9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9c0:	f000 fad0 	bl	800cf64 <_read_r>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	bfab      	itete	ge
 800c9c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c9ca:	89a3      	ldrhlt	r3, [r4, #12]
 800c9cc:	181b      	addge	r3, r3, r0
 800c9ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c9d2:	bfac      	ite	ge
 800c9d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c9d6:	81a3      	strhlt	r3, [r4, #12]
 800c9d8:	bd10      	pop	{r4, pc}

0800c9da <__swrite>:
 800c9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9de:	461f      	mov	r7, r3
 800c9e0:	898b      	ldrh	r3, [r1, #12]
 800c9e2:	05db      	lsls	r3, r3, #23
 800c9e4:	4605      	mov	r5, r0
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	4616      	mov	r6, r2
 800c9ea:	d505      	bpl.n	800c9f8 <__swrite+0x1e>
 800c9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f000 fa00 	bl	800cdf8 <_lseek_r>
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca02:	81a3      	strh	r3, [r4, #12]
 800ca04:	4632      	mov	r2, r6
 800ca06:	463b      	mov	r3, r7
 800ca08:	4628      	mov	r0, r5
 800ca0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca0e:	f000 b871 	b.w	800caf4 <_write_r>

0800ca12 <__sseek>:
 800ca12:	b510      	push	{r4, lr}
 800ca14:	460c      	mov	r4, r1
 800ca16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca1a:	f000 f9ed 	bl	800cdf8 <_lseek_r>
 800ca1e:	1c43      	adds	r3, r0, #1
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	bf15      	itete	ne
 800ca24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca2e:	81a3      	strheq	r3, [r4, #12]
 800ca30:	bf18      	it	ne
 800ca32:	81a3      	strhne	r3, [r4, #12]
 800ca34:	bd10      	pop	{r4, pc}

0800ca36 <__sclose>:
 800ca36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca3a:	f000 b8f9 	b.w	800cc30 <_close_r>

0800ca3e <strcpy>:
 800ca3e:	4603      	mov	r3, r0
 800ca40:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca44:	f803 2b01 	strb.w	r2, [r3], #1
 800ca48:	2a00      	cmp	r2, #0
 800ca4a:	d1f9      	bne.n	800ca40 <strcpy+0x2>
 800ca4c:	4770      	bx	lr
	...

0800ca50 <__swbuf_r>:
 800ca50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca52:	460e      	mov	r6, r1
 800ca54:	4614      	mov	r4, r2
 800ca56:	4605      	mov	r5, r0
 800ca58:	b118      	cbz	r0, 800ca62 <__swbuf_r+0x12>
 800ca5a:	6983      	ldr	r3, [r0, #24]
 800ca5c:	b90b      	cbnz	r3, 800ca62 <__swbuf_r+0x12>
 800ca5e:	f7fe ffbb 	bl	800b9d8 <__sinit>
 800ca62:	4b21      	ldr	r3, [pc, #132]	; (800cae8 <__swbuf_r+0x98>)
 800ca64:	429c      	cmp	r4, r3
 800ca66:	d12b      	bne.n	800cac0 <__swbuf_r+0x70>
 800ca68:	686c      	ldr	r4, [r5, #4]
 800ca6a:	69a3      	ldr	r3, [r4, #24]
 800ca6c:	60a3      	str	r3, [r4, #8]
 800ca6e:	89a3      	ldrh	r3, [r4, #12]
 800ca70:	071a      	lsls	r2, r3, #28
 800ca72:	d52f      	bpl.n	800cad4 <__swbuf_r+0x84>
 800ca74:	6923      	ldr	r3, [r4, #16]
 800ca76:	b36b      	cbz	r3, 800cad4 <__swbuf_r+0x84>
 800ca78:	6923      	ldr	r3, [r4, #16]
 800ca7a:	6820      	ldr	r0, [r4, #0]
 800ca7c:	1ac0      	subs	r0, r0, r3
 800ca7e:	6963      	ldr	r3, [r4, #20]
 800ca80:	b2f6      	uxtb	r6, r6
 800ca82:	4283      	cmp	r3, r0
 800ca84:	4637      	mov	r7, r6
 800ca86:	dc04      	bgt.n	800ca92 <__swbuf_r+0x42>
 800ca88:	4621      	mov	r1, r4
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	f000 f966 	bl	800cd5c <_fflush_r>
 800ca90:	bb30      	cbnz	r0, 800cae0 <__swbuf_r+0x90>
 800ca92:	68a3      	ldr	r3, [r4, #8]
 800ca94:	3b01      	subs	r3, #1
 800ca96:	60a3      	str	r3, [r4, #8]
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	1c5a      	adds	r2, r3, #1
 800ca9c:	6022      	str	r2, [r4, #0]
 800ca9e:	701e      	strb	r6, [r3, #0]
 800caa0:	6963      	ldr	r3, [r4, #20]
 800caa2:	3001      	adds	r0, #1
 800caa4:	4283      	cmp	r3, r0
 800caa6:	d004      	beq.n	800cab2 <__swbuf_r+0x62>
 800caa8:	89a3      	ldrh	r3, [r4, #12]
 800caaa:	07db      	lsls	r3, r3, #31
 800caac:	d506      	bpl.n	800cabc <__swbuf_r+0x6c>
 800caae:	2e0a      	cmp	r6, #10
 800cab0:	d104      	bne.n	800cabc <__swbuf_r+0x6c>
 800cab2:	4621      	mov	r1, r4
 800cab4:	4628      	mov	r0, r5
 800cab6:	f000 f951 	bl	800cd5c <_fflush_r>
 800caba:	b988      	cbnz	r0, 800cae0 <__swbuf_r+0x90>
 800cabc:	4638      	mov	r0, r7
 800cabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cac0:	4b0a      	ldr	r3, [pc, #40]	; (800caec <__swbuf_r+0x9c>)
 800cac2:	429c      	cmp	r4, r3
 800cac4:	d101      	bne.n	800caca <__swbuf_r+0x7a>
 800cac6:	68ac      	ldr	r4, [r5, #8]
 800cac8:	e7cf      	b.n	800ca6a <__swbuf_r+0x1a>
 800caca:	4b09      	ldr	r3, [pc, #36]	; (800caf0 <__swbuf_r+0xa0>)
 800cacc:	429c      	cmp	r4, r3
 800cace:	bf08      	it	eq
 800cad0:	68ec      	ldreq	r4, [r5, #12]
 800cad2:	e7ca      	b.n	800ca6a <__swbuf_r+0x1a>
 800cad4:	4621      	mov	r1, r4
 800cad6:	4628      	mov	r0, r5
 800cad8:	f000 f81e 	bl	800cb18 <__swsetup_r>
 800cadc:	2800      	cmp	r0, #0
 800cade:	d0cb      	beq.n	800ca78 <__swbuf_r+0x28>
 800cae0:	f04f 37ff 	mov.w	r7, #4294967295
 800cae4:	e7ea      	b.n	800cabc <__swbuf_r+0x6c>
 800cae6:	bf00      	nop
 800cae8:	0800e5d8 	.word	0x0800e5d8
 800caec:	0800e5f8 	.word	0x0800e5f8
 800caf0:	0800e5b8 	.word	0x0800e5b8

0800caf4 <_write_r>:
 800caf4:	b538      	push	{r3, r4, r5, lr}
 800caf6:	4d07      	ldr	r5, [pc, #28]	; (800cb14 <_write_r+0x20>)
 800caf8:	4604      	mov	r4, r0
 800cafa:	4608      	mov	r0, r1
 800cafc:	4611      	mov	r1, r2
 800cafe:	2200      	movs	r2, #0
 800cb00:	602a      	str	r2, [r5, #0]
 800cb02:	461a      	mov	r2, r3
 800cb04:	f7f6 fd49 	bl	800359a <_write>
 800cb08:	1c43      	adds	r3, r0, #1
 800cb0a:	d102      	bne.n	800cb12 <_write_r+0x1e>
 800cb0c:	682b      	ldr	r3, [r5, #0]
 800cb0e:	b103      	cbz	r3, 800cb12 <_write_r+0x1e>
 800cb10:	6023      	str	r3, [r4, #0]
 800cb12:	bd38      	pop	{r3, r4, r5, pc}
 800cb14:	20005550 	.word	0x20005550

0800cb18 <__swsetup_r>:
 800cb18:	4b32      	ldr	r3, [pc, #200]	; (800cbe4 <__swsetup_r+0xcc>)
 800cb1a:	b570      	push	{r4, r5, r6, lr}
 800cb1c:	681d      	ldr	r5, [r3, #0]
 800cb1e:	4606      	mov	r6, r0
 800cb20:	460c      	mov	r4, r1
 800cb22:	b125      	cbz	r5, 800cb2e <__swsetup_r+0x16>
 800cb24:	69ab      	ldr	r3, [r5, #24]
 800cb26:	b913      	cbnz	r3, 800cb2e <__swsetup_r+0x16>
 800cb28:	4628      	mov	r0, r5
 800cb2a:	f7fe ff55 	bl	800b9d8 <__sinit>
 800cb2e:	4b2e      	ldr	r3, [pc, #184]	; (800cbe8 <__swsetup_r+0xd0>)
 800cb30:	429c      	cmp	r4, r3
 800cb32:	d10f      	bne.n	800cb54 <__swsetup_r+0x3c>
 800cb34:	686c      	ldr	r4, [r5, #4]
 800cb36:	89a3      	ldrh	r3, [r4, #12]
 800cb38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb3c:	0719      	lsls	r1, r3, #28
 800cb3e:	d42c      	bmi.n	800cb9a <__swsetup_r+0x82>
 800cb40:	06dd      	lsls	r5, r3, #27
 800cb42:	d411      	bmi.n	800cb68 <__swsetup_r+0x50>
 800cb44:	2309      	movs	r3, #9
 800cb46:	6033      	str	r3, [r6, #0]
 800cb48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb4c:	81a3      	strh	r3, [r4, #12]
 800cb4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb52:	e03e      	b.n	800cbd2 <__swsetup_r+0xba>
 800cb54:	4b25      	ldr	r3, [pc, #148]	; (800cbec <__swsetup_r+0xd4>)
 800cb56:	429c      	cmp	r4, r3
 800cb58:	d101      	bne.n	800cb5e <__swsetup_r+0x46>
 800cb5a:	68ac      	ldr	r4, [r5, #8]
 800cb5c:	e7eb      	b.n	800cb36 <__swsetup_r+0x1e>
 800cb5e:	4b24      	ldr	r3, [pc, #144]	; (800cbf0 <__swsetup_r+0xd8>)
 800cb60:	429c      	cmp	r4, r3
 800cb62:	bf08      	it	eq
 800cb64:	68ec      	ldreq	r4, [r5, #12]
 800cb66:	e7e6      	b.n	800cb36 <__swsetup_r+0x1e>
 800cb68:	0758      	lsls	r0, r3, #29
 800cb6a:	d512      	bpl.n	800cb92 <__swsetup_r+0x7a>
 800cb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb6e:	b141      	cbz	r1, 800cb82 <__swsetup_r+0x6a>
 800cb70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb74:	4299      	cmp	r1, r3
 800cb76:	d002      	beq.n	800cb7e <__swsetup_r+0x66>
 800cb78:	4630      	mov	r0, r6
 800cb7a:	f7ff fb87 	bl	800c28c <_free_r>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	6363      	str	r3, [r4, #52]	; 0x34
 800cb82:	89a3      	ldrh	r3, [r4, #12]
 800cb84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb88:	81a3      	strh	r3, [r4, #12]
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	6063      	str	r3, [r4, #4]
 800cb8e:	6923      	ldr	r3, [r4, #16]
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	89a3      	ldrh	r3, [r4, #12]
 800cb94:	f043 0308 	orr.w	r3, r3, #8
 800cb98:	81a3      	strh	r3, [r4, #12]
 800cb9a:	6923      	ldr	r3, [r4, #16]
 800cb9c:	b94b      	cbnz	r3, 800cbb2 <__swsetup_r+0x9a>
 800cb9e:	89a3      	ldrh	r3, [r4, #12]
 800cba0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cba8:	d003      	beq.n	800cbb2 <__swsetup_r+0x9a>
 800cbaa:	4621      	mov	r1, r4
 800cbac:	4630      	mov	r0, r6
 800cbae:	f000 f959 	bl	800ce64 <__smakebuf_r>
 800cbb2:	89a0      	ldrh	r0, [r4, #12]
 800cbb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbb8:	f010 0301 	ands.w	r3, r0, #1
 800cbbc:	d00a      	beq.n	800cbd4 <__swsetup_r+0xbc>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	60a3      	str	r3, [r4, #8]
 800cbc2:	6963      	ldr	r3, [r4, #20]
 800cbc4:	425b      	negs	r3, r3
 800cbc6:	61a3      	str	r3, [r4, #24]
 800cbc8:	6923      	ldr	r3, [r4, #16]
 800cbca:	b943      	cbnz	r3, 800cbde <__swsetup_r+0xc6>
 800cbcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbd0:	d1ba      	bne.n	800cb48 <__swsetup_r+0x30>
 800cbd2:	bd70      	pop	{r4, r5, r6, pc}
 800cbd4:	0781      	lsls	r1, r0, #30
 800cbd6:	bf58      	it	pl
 800cbd8:	6963      	ldrpl	r3, [r4, #20]
 800cbda:	60a3      	str	r3, [r4, #8]
 800cbdc:	e7f4      	b.n	800cbc8 <__swsetup_r+0xb0>
 800cbde:	2000      	movs	r0, #0
 800cbe0:	e7f7      	b.n	800cbd2 <__swsetup_r+0xba>
 800cbe2:	bf00      	nop
 800cbe4:	20000020 	.word	0x20000020
 800cbe8:	0800e5d8 	.word	0x0800e5d8
 800cbec:	0800e5f8 	.word	0x0800e5f8
 800cbf0:	0800e5b8 	.word	0x0800e5b8

0800cbf4 <__assert_func>:
 800cbf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbf6:	4614      	mov	r4, r2
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	4b09      	ldr	r3, [pc, #36]	; (800cc20 <__assert_func+0x2c>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4605      	mov	r5, r0
 800cc00:	68d8      	ldr	r0, [r3, #12]
 800cc02:	b14c      	cbz	r4, 800cc18 <__assert_func+0x24>
 800cc04:	4b07      	ldr	r3, [pc, #28]	; (800cc24 <__assert_func+0x30>)
 800cc06:	9100      	str	r1, [sp, #0]
 800cc08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc0c:	4906      	ldr	r1, [pc, #24]	; (800cc28 <__assert_func+0x34>)
 800cc0e:	462b      	mov	r3, r5
 800cc10:	f000 f8e0 	bl	800cdd4 <fiprintf>
 800cc14:	f000 f9c5 	bl	800cfa2 <abort>
 800cc18:	4b04      	ldr	r3, [pc, #16]	; (800cc2c <__assert_func+0x38>)
 800cc1a:	461c      	mov	r4, r3
 800cc1c:	e7f3      	b.n	800cc06 <__assert_func+0x12>
 800cc1e:	bf00      	nop
 800cc20:	20000020 	.word	0x20000020
 800cc24:	0800e785 	.word	0x0800e785
 800cc28:	0800e792 	.word	0x0800e792
 800cc2c:	0800e7c0 	.word	0x0800e7c0

0800cc30 <_close_r>:
 800cc30:	b538      	push	{r3, r4, r5, lr}
 800cc32:	4d06      	ldr	r5, [pc, #24]	; (800cc4c <_close_r+0x1c>)
 800cc34:	2300      	movs	r3, #0
 800cc36:	4604      	mov	r4, r0
 800cc38:	4608      	mov	r0, r1
 800cc3a:	602b      	str	r3, [r5, #0]
 800cc3c:	f7f6 fcc9 	bl	80035d2 <_close>
 800cc40:	1c43      	adds	r3, r0, #1
 800cc42:	d102      	bne.n	800cc4a <_close_r+0x1a>
 800cc44:	682b      	ldr	r3, [r5, #0]
 800cc46:	b103      	cbz	r3, 800cc4a <_close_r+0x1a>
 800cc48:	6023      	str	r3, [r4, #0]
 800cc4a:	bd38      	pop	{r3, r4, r5, pc}
 800cc4c:	20005550 	.word	0x20005550

0800cc50 <__sflush_r>:
 800cc50:	898a      	ldrh	r2, [r1, #12]
 800cc52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc56:	4605      	mov	r5, r0
 800cc58:	0710      	lsls	r0, r2, #28
 800cc5a:	460c      	mov	r4, r1
 800cc5c:	d458      	bmi.n	800cd10 <__sflush_r+0xc0>
 800cc5e:	684b      	ldr	r3, [r1, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	dc05      	bgt.n	800cc70 <__sflush_r+0x20>
 800cc64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	dc02      	bgt.n	800cc70 <__sflush_r+0x20>
 800cc6a:	2000      	movs	r0, #0
 800cc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc72:	2e00      	cmp	r6, #0
 800cc74:	d0f9      	beq.n	800cc6a <__sflush_r+0x1a>
 800cc76:	2300      	movs	r3, #0
 800cc78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc7c:	682f      	ldr	r7, [r5, #0]
 800cc7e:	602b      	str	r3, [r5, #0]
 800cc80:	d032      	beq.n	800cce8 <__sflush_r+0x98>
 800cc82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc84:	89a3      	ldrh	r3, [r4, #12]
 800cc86:	075a      	lsls	r2, r3, #29
 800cc88:	d505      	bpl.n	800cc96 <__sflush_r+0x46>
 800cc8a:	6863      	ldr	r3, [r4, #4]
 800cc8c:	1ac0      	subs	r0, r0, r3
 800cc8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc90:	b10b      	cbz	r3, 800cc96 <__sflush_r+0x46>
 800cc92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc94:	1ac0      	subs	r0, r0, r3
 800cc96:	2300      	movs	r3, #0
 800cc98:	4602      	mov	r2, r0
 800cc9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc9c:	6a21      	ldr	r1, [r4, #32]
 800cc9e:	4628      	mov	r0, r5
 800cca0:	47b0      	blx	r6
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	89a3      	ldrh	r3, [r4, #12]
 800cca6:	d106      	bne.n	800ccb6 <__sflush_r+0x66>
 800cca8:	6829      	ldr	r1, [r5, #0]
 800ccaa:	291d      	cmp	r1, #29
 800ccac:	d82c      	bhi.n	800cd08 <__sflush_r+0xb8>
 800ccae:	4a2a      	ldr	r2, [pc, #168]	; (800cd58 <__sflush_r+0x108>)
 800ccb0:	40ca      	lsrs	r2, r1
 800ccb2:	07d6      	lsls	r6, r2, #31
 800ccb4:	d528      	bpl.n	800cd08 <__sflush_r+0xb8>
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	6062      	str	r2, [r4, #4]
 800ccba:	04d9      	lsls	r1, r3, #19
 800ccbc:	6922      	ldr	r2, [r4, #16]
 800ccbe:	6022      	str	r2, [r4, #0]
 800ccc0:	d504      	bpl.n	800cccc <__sflush_r+0x7c>
 800ccc2:	1c42      	adds	r2, r0, #1
 800ccc4:	d101      	bne.n	800ccca <__sflush_r+0x7a>
 800ccc6:	682b      	ldr	r3, [r5, #0]
 800ccc8:	b903      	cbnz	r3, 800cccc <__sflush_r+0x7c>
 800ccca:	6560      	str	r0, [r4, #84]	; 0x54
 800cccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccce:	602f      	str	r7, [r5, #0]
 800ccd0:	2900      	cmp	r1, #0
 800ccd2:	d0ca      	beq.n	800cc6a <__sflush_r+0x1a>
 800ccd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccd8:	4299      	cmp	r1, r3
 800ccda:	d002      	beq.n	800cce2 <__sflush_r+0x92>
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f7ff fad5 	bl	800c28c <_free_r>
 800cce2:	2000      	movs	r0, #0
 800cce4:	6360      	str	r0, [r4, #52]	; 0x34
 800cce6:	e7c1      	b.n	800cc6c <__sflush_r+0x1c>
 800cce8:	6a21      	ldr	r1, [r4, #32]
 800ccea:	2301      	movs	r3, #1
 800ccec:	4628      	mov	r0, r5
 800ccee:	47b0      	blx	r6
 800ccf0:	1c41      	adds	r1, r0, #1
 800ccf2:	d1c7      	bne.n	800cc84 <__sflush_r+0x34>
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d0c4      	beq.n	800cc84 <__sflush_r+0x34>
 800ccfa:	2b1d      	cmp	r3, #29
 800ccfc:	d001      	beq.n	800cd02 <__sflush_r+0xb2>
 800ccfe:	2b16      	cmp	r3, #22
 800cd00:	d101      	bne.n	800cd06 <__sflush_r+0xb6>
 800cd02:	602f      	str	r7, [r5, #0]
 800cd04:	e7b1      	b.n	800cc6a <__sflush_r+0x1a>
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd0c:	81a3      	strh	r3, [r4, #12]
 800cd0e:	e7ad      	b.n	800cc6c <__sflush_r+0x1c>
 800cd10:	690f      	ldr	r7, [r1, #16]
 800cd12:	2f00      	cmp	r7, #0
 800cd14:	d0a9      	beq.n	800cc6a <__sflush_r+0x1a>
 800cd16:	0793      	lsls	r3, r2, #30
 800cd18:	680e      	ldr	r6, [r1, #0]
 800cd1a:	bf08      	it	eq
 800cd1c:	694b      	ldreq	r3, [r1, #20]
 800cd1e:	600f      	str	r7, [r1, #0]
 800cd20:	bf18      	it	ne
 800cd22:	2300      	movne	r3, #0
 800cd24:	eba6 0807 	sub.w	r8, r6, r7
 800cd28:	608b      	str	r3, [r1, #8]
 800cd2a:	f1b8 0f00 	cmp.w	r8, #0
 800cd2e:	dd9c      	ble.n	800cc6a <__sflush_r+0x1a>
 800cd30:	6a21      	ldr	r1, [r4, #32]
 800cd32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd34:	4643      	mov	r3, r8
 800cd36:	463a      	mov	r2, r7
 800cd38:	4628      	mov	r0, r5
 800cd3a:	47b0      	blx	r6
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	dc06      	bgt.n	800cd4e <__sflush_r+0xfe>
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd46:	81a3      	strh	r3, [r4, #12]
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4c:	e78e      	b.n	800cc6c <__sflush_r+0x1c>
 800cd4e:	4407      	add	r7, r0
 800cd50:	eba8 0800 	sub.w	r8, r8, r0
 800cd54:	e7e9      	b.n	800cd2a <__sflush_r+0xda>
 800cd56:	bf00      	nop
 800cd58:	20400001 	.word	0x20400001

0800cd5c <_fflush_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	690b      	ldr	r3, [r1, #16]
 800cd60:	4605      	mov	r5, r0
 800cd62:	460c      	mov	r4, r1
 800cd64:	b913      	cbnz	r3, 800cd6c <_fflush_r+0x10>
 800cd66:	2500      	movs	r5, #0
 800cd68:	4628      	mov	r0, r5
 800cd6a:	bd38      	pop	{r3, r4, r5, pc}
 800cd6c:	b118      	cbz	r0, 800cd76 <_fflush_r+0x1a>
 800cd6e:	6983      	ldr	r3, [r0, #24]
 800cd70:	b90b      	cbnz	r3, 800cd76 <_fflush_r+0x1a>
 800cd72:	f7fe fe31 	bl	800b9d8 <__sinit>
 800cd76:	4b14      	ldr	r3, [pc, #80]	; (800cdc8 <_fflush_r+0x6c>)
 800cd78:	429c      	cmp	r4, r3
 800cd7a:	d11b      	bne.n	800cdb4 <_fflush_r+0x58>
 800cd7c:	686c      	ldr	r4, [r5, #4]
 800cd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d0ef      	beq.n	800cd66 <_fflush_r+0xa>
 800cd86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd88:	07d0      	lsls	r0, r2, #31
 800cd8a:	d404      	bmi.n	800cd96 <_fflush_r+0x3a>
 800cd8c:	0599      	lsls	r1, r3, #22
 800cd8e:	d402      	bmi.n	800cd96 <_fflush_r+0x3a>
 800cd90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd92:	f7fe fec4 	bl	800bb1e <__retarget_lock_acquire_recursive>
 800cd96:	4628      	mov	r0, r5
 800cd98:	4621      	mov	r1, r4
 800cd9a:	f7ff ff59 	bl	800cc50 <__sflush_r>
 800cd9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cda0:	07da      	lsls	r2, r3, #31
 800cda2:	4605      	mov	r5, r0
 800cda4:	d4e0      	bmi.n	800cd68 <_fflush_r+0xc>
 800cda6:	89a3      	ldrh	r3, [r4, #12]
 800cda8:	059b      	lsls	r3, r3, #22
 800cdaa:	d4dd      	bmi.n	800cd68 <_fflush_r+0xc>
 800cdac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdae:	f7fe feb7 	bl	800bb20 <__retarget_lock_release_recursive>
 800cdb2:	e7d9      	b.n	800cd68 <_fflush_r+0xc>
 800cdb4:	4b05      	ldr	r3, [pc, #20]	; (800cdcc <_fflush_r+0x70>)
 800cdb6:	429c      	cmp	r4, r3
 800cdb8:	d101      	bne.n	800cdbe <_fflush_r+0x62>
 800cdba:	68ac      	ldr	r4, [r5, #8]
 800cdbc:	e7df      	b.n	800cd7e <_fflush_r+0x22>
 800cdbe:	4b04      	ldr	r3, [pc, #16]	; (800cdd0 <_fflush_r+0x74>)
 800cdc0:	429c      	cmp	r4, r3
 800cdc2:	bf08      	it	eq
 800cdc4:	68ec      	ldreq	r4, [r5, #12]
 800cdc6:	e7da      	b.n	800cd7e <_fflush_r+0x22>
 800cdc8:	0800e5d8 	.word	0x0800e5d8
 800cdcc:	0800e5f8 	.word	0x0800e5f8
 800cdd0:	0800e5b8 	.word	0x0800e5b8

0800cdd4 <fiprintf>:
 800cdd4:	b40e      	push	{r1, r2, r3}
 800cdd6:	b503      	push	{r0, r1, lr}
 800cdd8:	4601      	mov	r1, r0
 800cdda:	ab03      	add	r3, sp, #12
 800cddc:	4805      	ldr	r0, [pc, #20]	; (800cdf4 <fiprintf+0x20>)
 800cdde:	f853 2b04 	ldr.w	r2, [r3], #4
 800cde2:	6800      	ldr	r0, [r0, #0]
 800cde4:	9301      	str	r3, [sp, #4]
 800cde6:	f7ff fca7 	bl	800c738 <_vfiprintf_r>
 800cdea:	b002      	add	sp, #8
 800cdec:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdf0:	b003      	add	sp, #12
 800cdf2:	4770      	bx	lr
 800cdf4:	20000020 	.word	0x20000020

0800cdf8 <_lseek_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	4d07      	ldr	r5, [pc, #28]	; (800ce18 <_lseek_r+0x20>)
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	4608      	mov	r0, r1
 800ce00:	4611      	mov	r1, r2
 800ce02:	2200      	movs	r2, #0
 800ce04:	602a      	str	r2, [r5, #0]
 800ce06:	461a      	mov	r2, r3
 800ce08:	f7f6 fc0a 	bl	8003620 <_lseek>
 800ce0c:	1c43      	adds	r3, r0, #1
 800ce0e:	d102      	bne.n	800ce16 <_lseek_r+0x1e>
 800ce10:	682b      	ldr	r3, [r5, #0]
 800ce12:	b103      	cbz	r3, 800ce16 <_lseek_r+0x1e>
 800ce14:	6023      	str	r3, [r4, #0]
 800ce16:	bd38      	pop	{r3, r4, r5, pc}
 800ce18:	20005550 	.word	0x20005550

0800ce1c <__swhatbuf_r>:
 800ce1c:	b570      	push	{r4, r5, r6, lr}
 800ce1e:	460e      	mov	r6, r1
 800ce20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce24:	2900      	cmp	r1, #0
 800ce26:	b096      	sub	sp, #88	; 0x58
 800ce28:	4614      	mov	r4, r2
 800ce2a:	461d      	mov	r5, r3
 800ce2c:	da07      	bge.n	800ce3e <__swhatbuf_r+0x22>
 800ce2e:	2300      	movs	r3, #0
 800ce30:	602b      	str	r3, [r5, #0]
 800ce32:	89b3      	ldrh	r3, [r6, #12]
 800ce34:	061a      	lsls	r2, r3, #24
 800ce36:	d410      	bmi.n	800ce5a <__swhatbuf_r+0x3e>
 800ce38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce3c:	e00e      	b.n	800ce5c <__swhatbuf_r+0x40>
 800ce3e:	466a      	mov	r2, sp
 800ce40:	f000 f8b6 	bl	800cfb0 <_fstat_r>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	dbf2      	blt.n	800ce2e <__swhatbuf_r+0x12>
 800ce48:	9a01      	ldr	r2, [sp, #4]
 800ce4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce52:	425a      	negs	r2, r3
 800ce54:	415a      	adcs	r2, r3
 800ce56:	602a      	str	r2, [r5, #0]
 800ce58:	e7ee      	b.n	800ce38 <__swhatbuf_r+0x1c>
 800ce5a:	2340      	movs	r3, #64	; 0x40
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	6023      	str	r3, [r4, #0]
 800ce60:	b016      	add	sp, #88	; 0x58
 800ce62:	bd70      	pop	{r4, r5, r6, pc}

0800ce64 <__smakebuf_r>:
 800ce64:	898b      	ldrh	r3, [r1, #12]
 800ce66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce68:	079d      	lsls	r5, r3, #30
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	d507      	bpl.n	800ce80 <__smakebuf_r+0x1c>
 800ce70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	6123      	str	r3, [r4, #16]
 800ce78:	2301      	movs	r3, #1
 800ce7a:	6163      	str	r3, [r4, #20]
 800ce7c:	b002      	add	sp, #8
 800ce7e:	bd70      	pop	{r4, r5, r6, pc}
 800ce80:	ab01      	add	r3, sp, #4
 800ce82:	466a      	mov	r2, sp
 800ce84:	f7ff ffca 	bl	800ce1c <__swhatbuf_r>
 800ce88:	9900      	ldr	r1, [sp, #0]
 800ce8a:	4605      	mov	r5, r0
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	f7ff fa4d 	bl	800c32c <_malloc_r>
 800ce92:	b948      	cbnz	r0, 800cea8 <__smakebuf_r+0x44>
 800ce94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce98:	059a      	lsls	r2, r3, #22
 800ce9a:	d4ef      	bmi.n	800ce7c <__smakebuf_r+0x18>
 800ce9c:	f023 0303 	bic.w	r3, r3, #3
 800cea0:	f043 0302 	orr.w	r3, r3, #2
 800cea4:	81a3      	strh	r3, [r4, #12]
 800cea6:	e7e3      	b.n	800ce70 <__smakebuf_r+0xc>
 800cea8:	4b0d      	ldr	r3, [pc, #52]	; (800cee0 <__smakebuf_r+0x7c>)
 800ceaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	6020      	str	r0, [r4, #0]
 800ceb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceb4:	81a3      	strh	r3, [r4, #12]
 800ceb6:	9b00      	ldr	r3, [sp, #0]
 800ceb8:	6163      	str	r3, [r4, #20]
 800ceba:	9b01      	ldr	r3, [sp, #4]
 800cebc:	6120      	str	r0, [r4, #16]
 800cebe:	b15b      	cbz	r3, 800ced8 <__smakebuf_r+0x74>
 800cec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cec4:	4630      	mov	r0, r6
 800cec6:	f000 f885 	bl	800cfd4 <_isatty_r>
 800ceca:	b128      	cbz	r0, 800ced8 <__smakebuf_r+0x74>
 800cecc:	89a3      	ldrh	r3, [r4, #12]
 800cece:	f023 0303 	bic.w	r3, r3, #3
 800ced2:	f043 0301 	orr.w	r3, r3, #1
 800ced6:	81a3      	strh	r3, [r4, #12]
 800ced8:	89a0      	ldrh	r0, [r4, #12]
 800ceda:	4305      	orrs	r5, r0
 800cedc:	81a5      	strh	r5, [r4, #12]
 800cede:	e7cd      	b.n	800ce7c <__smakebuf_r+0x18>
 800cee0:	0800b971 	.word	0x0800b971

0800cee4 <__ascii_mbtowc>:
 800cee4:	b082      	sub	sp, #8
 800cee6:	b901      	cbnz	r1, 800ceea <__ascii_mbtowc+0x6>
 800cee8:	a901      	add	r1, sp, #4
 800ceea:	b142      	cbz	r2, 800cefe <__ascii_mbtowc+0x1a>
 800ceec:	b14b      	cbz	r3, 800cf02 <__ascii_mbtowc+0x1e>
 800ceee:	7813      	ldrb	r3, [r2, #0]
 800cef0:	600b      	str	r3, [r1, #0]
 800cef2:	7812      	ldrb	r2, [r2, #0]
 800cef4:	1e10      	subs	r0, r2, #0
 800cef6:	bf18      	it	ne
 800cef8:	2001      	movne	r0, #1
 800cefa:	b002      	add	sp, #8
 800cefc:	4770      	bx	lr
 800cefe:	4610      	mov	r0, r2
 800cf00:	e7fb      	b.n	800cefa <__ascii_mbtowc+0x16>
 800cf02:	f06f 0001 	mvn.w	r0, #1
 800cf06:	e7f8      	b.n	800cefa <__ascii_mbtowc+0x16>

0800cf08 <memmove>:
 800cf08:	4288      	cmp	r0, r1
 800cf0a:	b510      	push	{r4, lr}
 800cf0c:	eb01 0402 	add.w	r4, r1, r2
 800cf10:	d902      	bls.n	800cf18 <memmove+0x10>
 800cf12:	4284      	cmp	r4, r0
 800cf14:	4623      	mov	r3, r4
 800cf16:	d807      	bhi.n	800cf28 <memmove+0x20>
 800cf18:	1e43      	subs	r3, r0, #1
 800cf1a:	42a1      	cmp	r1, r4
 800cf1c:	d008      	beq.n	800cf30 <memmove+0x28>
 800cf1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf26:	e7f8      	b.n	800cf1a <memmove+0x12>
 800cf28:	4402      	add	r2, r0
 800cf2a:	4601      	mov	r1, r0
 800cf2c:	428a      	cmp	r2, r1
 800cf2e:	d100      	bne.n	800cf32 <memmove+0x2a>
 800cf30:	bd10      	pop	{r4, pc}
 800cf32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf3a:	e7f7      	b.n	800cf2c <memmove+0x24>

0800cf3c <__malloc_lock>:
 800cf3c:	4801      	ldr	r0, [pc, #4]	; (800cf44 <__malloc_lock+0x8>)
 800cf3e:	f7fe bdee 	b.w	800bb1e <__retarget_lock_acquire_recursive>
 800cf42:	bf00      	nop
 800cf44:	20005548 	.word	0x20005548

0800cf48 <__malloc_unlock>:
 800cf48:	4801      	ldr	r0, [pc, #4]	; (800cf50 <__malloc_unlock+0x8>)
 800cf4a:	f7fe bde9 	b.w	800bb20 <__retarget_lock_release_recursive>
 800cf4e:	bf00      	nop
 800cf50:	20005548 	.word	0x20005548

0800cf54 <_malloc_usable_size_r>:
 800cf54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf58:	1f18      	subs	r0, r3, #4
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	bfbc      	itt	lt
 800cf5e:	580b      	ldrlt	r3, [r1, r0]
 800cf60:	18c0      	addlt	r0, r0, r3
 800cf62:	4770      	bx	lr

0800cf64 <_read_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4d07      	ldr	r5, [pc, #28]	; (800cf84 <_read_r+0x20>)
 800cf68:	4604      	mov	r4, r0
 800cf6a:	4608      	mov	r0, r1
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	2200      	movs	r2, #0
 800cf70:	602a      	str	r2, [r5, #0]
 800cf72:	461a      	mov	r2, r3
 800cf74:	f7f6 faf4 	bl	8003560 <_read>
 800cf78:	1c43      	adds	r3, r0, #1
 800cf7a:	d102      	bne.n	800cf82 <_read_r+0x1e>
 800cf7c:	682b      	ldr	r3, [r5, #0]
 800cf7e:	b103      	cbz	r3, 800cf82 <_read_r+0x1e>
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	bd38      	pop	{r3, r4, r5, pc}
 800cf84:	20005550 	.word	0x20005550

0800cf88 <__ascii_wctomb>:
 800cf88:	b149      	cbz	r1, 800cf9e <__ascii_wctomb+0x16>
 800cf8a:	2aff      	cmp	r2, #255	; 0xff
 800cf8c:	bf85      	ittet	hi
 800cf8e:	238a      	movhi	r3, #138	; 0x8a
 800cf90:	6003      	strhi	r3, [r0, #0]
 800cf92:	700a      	strbls	r2, [r1, #0]
 800cf94:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf98:	bf98      	it	ls
 800cf9a:	2001      	movls	r0, #1
 800cf9c:	4770      	bx	lr
 800cf9e:	4608      	mov	r0, r1
 800cfa0:	4770      	bx	lr

0800cfa2 <abort>:
 800cfa2:	b508      	push	{r3, lr}
 800cfa4:	2006      	movs	r0, #6
 800cfa6:	f000 f84d 	bl	800d044 <raise>
 800cfaa:	2001      	movs	r0, #1
 800cfac:	f7f6 face 	bl	800354c <_exit>

0800cfb0 <_fstat_r>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4d07      	ldr	r5, [pc, #28]	; (800cfd0 <_fstat_r+0x20>)
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	4608      	mov	r0, r1
 800cfba:	4611      	mov	r1, r2
 800cfbc:	602b      	str	r3, [r5, #0]
 800cfbe:	f7f6 fb14 	bl	80035ea <_fstat>
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	d102      	bne.n	800cfcc <_fstat_r+0x1c>
 800cfc6:	682b      	ldr	r3, [r5, #0]
 800cfc8:	b103      	cbz	r3, 800cfcc <_fstat_r+0x1c>
 800cfca:	6023      	str	r3, [r4, #0]
 800cfcc:	bd38      	pop	{r3, r4, r5, pc}
 800cfce:	bf00      	nop
 800cfd0:	20005550 	.word	0x20005550

0800cfd4 <_isatty_r>:
 800cfd4:	b538      	push	{r3, r4, r5, lr}
 800cfd6:	4d06      	ldr	r5, [pc, #24]	; (800cff0 <_isatty_r+0x1c>)
 800cfd8:	2300      	movs	r3, #0
 800cfda:	4604      	mov	r4, r0
 800cfdc:	4608      	mov	r0, r1
 800cfde:	602b      	str	r3, [r5, #0]
 800cfe0:	f7f6 fb13 	bl	800360a <_isatty>
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	d102      	bne.n	800cfee <_isatty_r+0x1a>
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	b103      	cbz	r3, 800cfee <_isatty_r+0x1a>
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	bd38      	pop	{r3, r4, r5, pc}
 800cff0:	20005550 	.word	0x20005550

0800cff4 <_raise_r>:
 800cff4:	291f      	cmp	r1, #31
 800cff6:	b538      	push	{r3, r4, r5, lr}
 800cff8:	4604      	mov	r4, r0
 800cffa:	460d      	mov	r5, r1
 800cffc:	d904      	bls.n	800d008 <_raise_r+0x14>
 800cffe:	2316      	movs	r3, #22
 800d000:	6003      	str	r3, [r0, #0]
 800d002:	f04f 30ff 	mov.w	r0, #4294967295
 800d006:	bd38      	pop	{r3, r4, r5, pc}
 800d008:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d00a:	b112      	cbz	r2, 800d012 <_raise_r+0x1e>
 800d00c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d010:	b94b      	cbnz	r3, 800d026 <_raise_r+0x32>
 800d012:	4620      	mov	r0, r4
 800d014:	f000 f830 	bl	800d078 <_getpid_r>
 800d018:	462a      	mov	r2, r5
 800d01a:	4601      	mov	r1, r0
 800d01c:	4620      	mov	r0, r4
 800d01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d022:	f000 b817 	b.w	800d054 <_kill_r>
 800d026:	2b01      	cmp	r3, #1
 800d028:	d00a      	beq.n	800d040 <_raise_r+0x4c>
 800d02a:	1c59      	adds	r1, r3, #1
 800d02c:	d103      	bne.n	800d036 <_raise_r+0x42>
 800d02e:	2316      	movs	r3, #22
 800d030:	6003      	str	r3, [r0, #0]
 800d032:	2001      	movs	r0, #1
 800d034:	e7e7      	b.n	800d006 <_raise_r+0x12>
 800d036:	2400      	movs	r4, #0
 800d038:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d03c:	4628      	mov	r0, r5
 800d03e:	4798      	blx	r3
 800d040:	2000      	movs	r0, #0
 800d042:	e7e0      	b.n	800d006 <_raise_r+0x12>

0800d044 <raise>:
 800d044:	4b02      	ldr	r3, [pc, #8]	; (800d050 <raise+0xc>)
 800d046:	4601      	mov	r1, r0
 800d048:	6818      	ldr	r0, [r3, #0]
 800d04a:	f7ff bfd3 	b.w	800cff4 <_raise_r>
 800d04e:	bf00      	nop
 800d050:	20000020 	.word	0x20000020

0800d054 <_kill_r>:
 800d054:	b538      	push	{r3, r4, r5, lr}
 800d056:	4d07      	ldr	r5, [pc, #28]	; (800d074 <_kill_r+0x20>)
 800d058:	2300      	movs	r3, #0
 800d05a:	4604      	mov	r4, r0
 800d05c:	4608      	mov	r0, r1
 800d05e:	4611      	mov	r1, r2
 800d060:	602b      	str	r3, [r5, #0]
 800d062:	f7f6 fa63 	bl	800352c <_kill>
 800d066:	1c43      	adds	r3, r0, #1
 800d068:	d102      	bne.n	800d070 <_kill_r+0x1c>
 800d06a:	682b      	ldr	r3, [r5, #0]
 800d06c:	b103      	cbz	r3, 800d070 <_kill_r+0x1c>
 800d06e:	6023      	str	r3, [r4, #0]
 800d070:	bd38      	pop	{r3, r4, r5, pc}
 800d072:	bf00      	nop
 800d074:	20005550 	.word	0x20005550

0800d078 <_getpid_r>:
 800d078:	f7f6 ba50 	b.w	800351c <_getpid>
 800d07c:	0000      	movs	r0, r0
	...

0800d080 <floor>:
 800d080:	ec51 0b10 	vmov	r0, r1, d0
 800d084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d088:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d08c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d090:	2e13      	cmp	r6, #19
 800d092:	ee10 5a10 	vmov	r5, s0
 800d096:	ee10 8a10 	vmov	r8, s0
 800d09a:	460c      	mov	r4, r1
 800d09c:	dc32      	bgt.n	800d104 <floor+0x84>
 800d09e:	2e00      	cmp	r6, #0
 800d0a0:	da14      	bge.n	800d0cc <floor+0x4c>
 800d0a2:	a333      	add	r3, pc, #204	; (adr r3, 800d170 <floor+0xf0>)
 800d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a8:	f7f3 f900 	bl	80002ac <__adddf3>
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	f7f3 fd42 	bl	8000b38 <__aeabi_dcmpgt>
 800d0b4:	b138      	cbz	r0, 800d0c6 <floor+0x46>
 800d0b6:	2c00      	cmp	r4, #0
 800d0b8:	da57      	bge.n	800d16a <floor+0xea>
 800d0ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d0be:	431d      	orrs	r5, r3
 800d0c0:	d001      	beq.n	800d0c6 <floor+0x46>
 800d0c2:	4c2d      	ldr	r4, [pc, #180]	; (800d178 <floor+0xf8>)
 800d0c4:	2500      	movs	r5, #0
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	e025      	b.n	800d118 <floor+0x98>
 800d0cc:	4f2b      	ldr	r7, [pc, #172]	; (800d17c <floor+0xfc>)
 800d0ce:	4137      	asrs	r7, r6
 800d0d0:	ea01 0307 	and.w	r3, r1, r7
 800d0d4:	4303      	orrs	r3, r0
 800d0d6:	d01f      	beq.n	800d118 <floor+0x98>
 800d0d8:	a325      	add	r3, pc, #148	; (adr r3, 800d170 <floor+0xf0>)
 800d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0de:	f7f3 f8e5 	bl	80002ac <__adddf3>
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	f7f3 fd27 	bl	8000b38 <__aeabi_dcmpgt>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d0eb      	beq.n	800d0c6 <floor+0x46>
 800d0ee:	2c00      	cmp	r4, #0
 800d0f0:	bfbe      	ittt	lt
 800d0f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d0f6:	fa43 f606 	asrlt.w	r6, r3, r6
 800d0fa:	19a4      	addlt	r4, r4, r6
 800d0fc:	ea24 0407 	bic.w	r4, r4, r7
 800d100:	2500      	movs	r5, #0
 800d102:	e7e0      	b.n	800d0c6 <floor+0x46>
 800d104:	2e33      	cmp	r6, #51	; 0x33
 800d106:	dd0b      	ble.n	800d120 <floor+0xa0>
 800d108:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d10c:	d104      	bne.n	800d118 <floor+0x98>
 800d10e:	ee10 2a10 	vmov	r2, s0
 800d112:	460b      	mov	r3, r1
 800d114:	f7f3 f8ca 	bl	80002ac <__adddf3>
 800d118:	ec41 0b10 	vmov	d0, r0, r1
 800d11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d120:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d124:	f04f 33ff 	mov.w	r3, #4294967295
 800d128:	fa23 f707 	lsr.w	r7, r3, r7
 800d12c:	4207      	tst	r7, r0
 800d12e:	d0f3      	beq.n	800d118 <floor+0x98>
 800d130:	a30f      	add	r3, pc, #60	; (adr r3, 800d170 <floor+0xf0>)
 800d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d136:	f7f3 f8b9 	bl	80002ac <__adddf3>
 800d13a:	2200      	movs	r2, #0
 800d13c:	2300      	movs	r3, #0
 800d13e:	f7f3 fcfb 	bl	8000b38 <__aeabi_dcmpgt>
 800d142:	2800      	cmp	r0, #0
 800d144:	d0bf      	beq.n	800d0c6 <floor+0x46>
 800d146:	2c00      	cmp	r4, #0
 800d148:	da02      	bge.n	800d150 <floor+0xd0>
 800d14a:	2e14      	cmp	r6, #20
 800d14c:	d103      	bne.n	800d156 <floor+0xd6>
 800d14e:	3401      	adds	r4, #1
 800d150:	ea25 0507 	bic.w	r5, r5, r7
 800d154:	e7b7      	b.n	800d0c6 <floor+0x46>
 800d156:	2301      	movs	r3, #1
 800d158:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d15c:	fa03 f606 	lsl.w	r6, r3, r6
 800d160:	4435      	add	r5, r6
 800d162:	4545      	cmp	r5, r8
 800d164:	bf38      	it	cc
 800d166:	18e4      	addcc	r4, r4, r3
 800d168:	e7f2      	b.n	800d150 <floor+0xd0>
 800d16a:	2500      	movs	r5, #0
 800d16c:	462c      	mov	r4, r5
 800d16e:	e7aa      	b.n	800d0c6 <floor+0x46>
 800d170:	8800759c 	.word	0x8800759c
 800d174:	7e37e43c 	.word	0x7e37e43c
 800d178:	bff00000 	.word	0xbff00000
 800d17c:	000fffff 	.word	0x000fffff

0800d180 <pow>:
 800d180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d184:	ec59 8b10 	vmov	r8, r9, d0
 800d188:	ec57 6b11 	vmov	r6, r7, d1
 800d18c:	f000 f8a8 	bl	800d2e0 <__ieee754_pow>
 800d190:	4b4e      	ldr	r3, [pc, #312]	; (800d2cc <pow+0x14c>)
 800d192:	f993 3000 	ldrsb.w	r3, [r3]
 800d196:	3301      	adds	r3, #1
 800d198:	ec55 4b10 	vmov	r4, r5, d0
 800d19c:	d015      	beq.n	800d1ca <pow+0x4a>
 800d19e:	4632      	mov	r2, r6
 800d1a0:	463b      	mov	r3, r7
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	4639      	mov	r1, r7
 800d1a6:	f7f3 fcd1 	bl	8000b4c <__aeabi_dcmpun>
 800d1aa:	b970      	cbnz	r0, 800d1ca <pow+0x4a>
 800d1ac:	4642      	mov	r2, r8
 800d1ae:	464b      	mov	r3, r9
 800d1b0:	4640      	mov	r0, r8
 800d1b2:	4649      	mov	r1, r9
 800d1b4:	f7f3 fcca 	bl	8000b4c <__aeabi_dcmpun>
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	b148      	cbz	r0, 800d1d2 <pow+0x52>
 800d1be:	4630      	mov	r0, r6
 800d1c0:	4639      	mov	r1, r7
 800d1c2:	f7f3 fc91 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d17d      	bne.n	800d2c6 <pow+0x146>
 800d1ca:	ec45 4b10 	vmov	d0, r4, r5
 800d1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1d2:	4640      	mov	r0, r8
 800d1d4:	4649      	mov	r1, r9
 800d1d6:	f7f3 fc87 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1da:	b1e0      	cbz	r0, 800d216 <pow+0x96>
 800d1dc:	2200      	movs	r2, #0
 800d1de:	2300      	movs	r3, #0
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	4639      	mov	r1, r7
 800d1e4:	f7f3 fc80 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	d16c      	bne.n	800d2c6 <pow+0x146>
 800d1ec:	ec47 6b10 	vmov	d0, r6, r7
 800d1f0:	f000 fe55 	bl	800de9e <finite>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d0e8      	beq.n	800d1ca <pow+0x4a>
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	4639      	mov	r1, r7
 800d200:	f7f3 fc7c 	bl	8000afc <__aeabi_dcmplt>
 800d204:	2800      	cmp	r0, #0
 800d206:	d0e0      	beq.n	800d1ca <pow+0x4a>
 800d208:	f7fc fe30 	bl	8009e6c <__errno>
 800d20c:	2321      	movs	r3, #33	; 0x21
 800d20e:	6003      	str	r3, [r0, #0]
 800d210:	2400      	movs	r4, #0
 800d212:	4d2f      	ldr	r5, [pc, #188]	; (800d2d0 <pow+0x150>)
 800d214:	e7d9      	b.n	800d1ca <pow+0x4a>
 800d216:	ec45 4b10 	vmov	d0, r4, r5
 800d21a:	f000 fe40 	bl	800de9e <finite>
 800d21e:	bbb8      	cbnz	r0, 800d290 <pow+0x110>
 800d220:	ec49 8b10 	vmov	d0, r8, r9
 800d224:	f000 fe3b 	bl	800de9e <finite>
 800d228:	b390      	cbz	r0, 800d290 <pow+0x110>
 800d22a:	ec47 6b10 	vmov	d0, r6, r7
 800d22e:	f000 fe36 	bl	800de9e <finite>
 800d232:	b368      	cbz	r0, 800d290 <pow+0x110>
 800d234:	4622      	mov	r2, r4
 800d236:	462b      	mov	r3, r5
 800d238:	4620      	mov	r0, r4
 800d23a:	4629      	mov	r1, r5
 800d23c:	f7f3 fc86 	bl	8000b4c <__aeabi_dcmpun>
 800d240:	b160      	cbz	r0, 800d25c <pow+0xdc>
 800d242:	f7fc fe13 	bl	8009e6c <__errno>
 800d246:	2321      	movs	r3, #33	; 0x21
 800d248:	6003      	str	r3, [r0, #0]
 800d24a:	2200      	movs	r2, #0
 800d24c:	2300      	movs	r3, #0
 800d24e:	4610      	mov	r0, r2
 800d250:	4619      	mov	r1, r3
 800d252:	f7f3 fb0b 	bl	800086c <__aeabi_ddiv>
 800d256:	4604      	mov	r4, r0
 800d258:	460d      	mov	r5, r1
 800d25a:	e7b6      	b.n	800d1ca <pow+0x4a>
 800d25c:	f7fc fe06 	bl	8009e6c <__errno>
 800d260:	2322      	movs	r3, #34	; 0x22
 800d262:	6003      	str	r3, [r0, #0]
 800d264:	2200      	movs	r2, #0
 800d266:	2300      	movs	r3, #0
 800d268:	4640      	mov	r0, r8
 800d26a:	4649      	mov	r1, r9
 800d26c:	f7f3 fc46 	bl	8000afc <__aeabi_dcmplt>
 800d270:	2400      	movs	r4, #0
 800d272:	b158      	cbz	r0, 800d28c <pow+0x10c>
 800d274:	ec47 6b10 	vmov	d0, r6, r7
 800d278:	f000 fe26 	bl	800dec8 <rint>
 800d27c:	4632      	mov	r2, r6
 800d27e:	ec51 0b10 	vmov	r0, r1, d0
 800d282:	463b      	mov	r3, r7
 800d284:	f7f3 fc30 	bl	8000ae8 <__aeabi_dcmpeq>
 800d288:	2800      	cmp	r0, #0
 800d28a:	d0c2      	beq.n	800d212 <pow+0x92>
 800d28c:	4d11      	ldr	r5, [pc, #68]	; (800d2d4 <pow+0x154>)
 800d28e:	e79c      	b.n	800d1ca <pow+0x4a>
 800d290:	2200      	movs	r2, #0
 800d292:	2300      	movs	r3, #0
 800d294:	4620      	mov	r0, r4
 800d296:	4629      	mov	r1, r5
 800d298:	f7f3 fc26 	bl	8000ae8 <__aeabi_dcmpeq>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	d094      	beq.n	800d1ca <pow+0x4a>
 800d2a0:	ec49 8b10 	vmov	d0, r8, r9
 800d2a4:	f000 fdfb 	bl	800de9e <finite>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d08e      	beq.n	800d1ca <pow+0x4a>
 800d2ac:	ec47 6b10 	vmov	d0, r6, r7
 800d2b0:	f000 fdf5 	bl	800de9e <finite>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d088      	beq.n	800d1ca <pow+0x4a>
 800d2b8:	f7fc fdd8 	bl	8009e6c <__errno>
 800d2bc:	2322      	movs	r3, #34	; 0x22
 800d2be:	6003      	str	r3, [r0, #0]
 800d2c0:	2400      	movs	r4, #0
 800d2c2:	2500      	movs	r5, #0
 800d2c4:	e781      	b.n	800d1ca <pow+0x4a>
 800d2c6:	4d04      	ldr	r5, [pc, #16]	; (800d2d8 <pow+0x158>)
 800d2c8:	2400      	movs	r4, #0
 800d2ca:	e77e      	b.n	800d1ca <pow+0x4a>
 800d2cc:	200001f0 	.word	0x200001f0
 800d2d0:	fff00000 	.word	0xfff00000
 800d2d4:	7ff00000 	.word	0x7ff00000
 800d2d8:	3ff00000 	.word	0x3ff00000
 800d2dc:	00000000 	.word	0x00000000

0800d2e0 <__ieee754_pow>:
 800d2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e4:	ed2d 8b06 	vpush	{d8-d10}
 800d2e8:	b08d      	sub	sp, #52	; 0x34
 800d2ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d2ee:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800d2f2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800d2f6:	ea56 0100 	orrs.w	r1, r6, r0
 800d2fa:	ec53 2b10 	vmov	r2, r3, d0
 800d2fe:	f000 84d1 	beq.w	800dca4 <__ieee754_pow+0x9c4>
 800d302:	497f      	ldr	r1, [pc, #508]	; (800d500 <__ieee754_pow+0x220>)
 800d304:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d308:	428c      	cmp	r4, r1
 800d30a:	ee10 8a10 	vmov	r8, s0
 800d30e:	4699      	mov	r9, r3
 800d310:	dc09      	bgt.n	800d326 <__ieee754_pow+0x46>
 800d312:	d103      	bne.n	800d31c <__ieee754_pow+0x3c>
 800d314:	b97a      	cbnz	r2, 800d336 <__ieee754_pow+0x56>
 800d316:	42a6      	cmp	r6, r4
 800d318:	dd02      	ble.n	800d320 <__ieee754_pow+0x40>
 800d31a:	e00c      	b.n	800d336 <__ieee754_pow+0x56>
 800d31c:	428e      	cmp	r6, r1
 800d31e:	dc02      	bgt.n	800d326 <__ieee754_pow+0x46>
 800d320:	428e      	cmp	r6, r1
 800d322:	d110      	bne.n	800d346 <__ieee754_pow+0x66>
 800d324:	b178      	cbz	r0, 800d346 <__ieee754_pow+0x66>
 800d326:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d32a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d32e:	ea54 0308 	orrs.w	r3, r4, r8
 800d332:	f000 84b7 	beq.w	800dca4 <__ieee754_pow+0x9c4>
 800d336:	4873      	ldr	r0, [pc, #460]	; (800d504 <__ieee754_pow+0x224>)
 800d338:	b00d      	add	sp, #52	; 0x34
 800d33a:	ecbd 8b06 	vpop	{d8-d10}
 800d33e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d342:	f000 bdb9 	b.w	800deb8 <nan>
 800d346:	f1b9 0f00 	cmp.w	r9, #0
 800d34a:	da36      	bge.n	800d3ba <__ieee754_pow+0xda>
 800d34c:	496e      	ldr	r1, [pc, #440]	; (800d508 <__ieee754_pow+0x228>)
 800d34e:	428e      	cmp	r6, r1
 800d350:	dc51      	bgt.n	800d3f6 <__ieee754_pow+0x116>
 800d352:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d356:	428e      	cmp	r6, r1
 800d358:	f340 84af 	ble.w	800dcba <__ieee754_pow+0x9da>
 800d35c:	1531      	asrs	r1, r6, #20
 800d35e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d362:	2914      	cmp	r1, #20
 800d364:	dd0f      	ble.n	800d386 <__ieee754_pow+0xa6>
 800d366:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d36a:	fa20 fc01 	lsr.w	ip, r0, r1
 800d36e:	fa0c f101 	lsl.w	r1, ip, r1
 800d372:	4281      	cmp	r1, r0
 800d374:	f040 84a1 	bne.w	800dcba <__ieee754_pow+0x9da>
 800d378:	f00c 0c01 	and.w	ip, ip, #1
 800d37c:	f1cc 0102 	rsb	r1, ip, #2
 800d380:	9100      	str	r1, [sp, #0]
 800d382:	b180      	cbz	r0, 800d3a6 <__ieee754_pow+0xc6>
 800d384:	e059      	b.n	800d43a <__ieee754_pow+0x15a>
 800d386:	2800      	cmp	r0, #0
 800d388:	d155      	bne.n	800d436 <__ieee754_pow+0x156>
 800d38a:	f1c1 0114 	rsb	r1, r1, #20
 800d38e:	fa46 fc01 	asr.w	ip, r6, r1
 800d392:	fa0c f101 	lsl.w	r1, ip, r1
 800d396:	42b1      	cmp	r1, r6
 800d398:	f040 848c 	bne.w	800dcb4 <__ieee754_pow+0x9d4>
 800d39c:	f00c 0c01 	and.w	ip, ip, #1
 800d3a0:	f1cc 0102 	rsb	r1, ip, #2
 800d3a4:	9100      	str	r1, [sp, #0]
 800d3a6:	4959      	ldr	r1, [pc, #356]	; (800d50c <__ieee754_pow+0x22c>)
 800d3a8:	428e      	cmp	r6, r1
 800d3aa:	d12d      	bne.n	800d408 <__ieee754_pow+0x128>
 800d3ac:	2f00      	cmp	r7, #0
 800d3ae:	da79      	bge.n	800d4a4 <__ieee754_pow+0x1c4>
 800d3b0:	4956      	ldr	r1, [pc, #344]	; (800d50c <__ieee754_pow+0x22c>)
 800d3b2:	2000      	movs	r0, #0
 800d3b4:	f7f3 fa5a 	bl	800086c <__aeabi_ddiv>
 800d3b8:	e016      	b.n	800d3e8 <__ieee754_pow+0x108>
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	9100      	str	r1, [sp, #0]
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d13b      	bne.n	800d43a <__ieee754_pow+0x15a>
 800d3c2:	494f      	ldr	r1, [pc, #316]	; (800d500 <__ieee754_pow+0x220>)
 800d3c4:	428e      	cmp	r6, r1
 800d3c6:	d1ee      	bne.n	800d3a6 <__ieee754_pow+0xc6>
 800d3c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d3cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d3d0:	ea53 0308 	orrs.w	r3, r3, r8
 800d3d4:	f000 8466 	beq.w	800dca4 <__ieee754_pow+0x9c4>
 800d3d8:	4b4d      	ldr	r3, [pc, #308]	; (800d510 <__ieee754_pow+0x230>)
 800d3da:	429c      	cmp	r4, r3
 800d3dc:	dd0d      	ble.n	800d3fa <__ieee754_pow+0x11a>
 800d3de:	2f00      	cmp	r7, #0
 800d3e0:	f280 8464 	bge.w	800dcac <__ieee754_pow+0x9cc>
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	ec41 0b10 	vmov	d0, r0, r1
 800d3ec:	b00d      	add	sp, #52	; 0x34
 800d3ee:	ecbd 8b06 	vpop	{d8-d10}
 800d3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f6:	2102      	movs	r1, #2
 800d3f8:	e7e0      	b.n	800d3bc <__ieee754_pow+0xdc>
 800d3fa:	2f00      	cmp	r7, #0
 800d3fc:	daf2      	bge.n	800d3e4 <__ieee754_pow+0x104>
 800d3fe:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800d402:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d406:	e7ef      	b.n	800d3e8 <__ieee754_pow+0x108>
 800d408:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800d40c:	d104      	bne.n	800d418 <__ieee754_pow+0x138>
 800d40e:	4610      	mov	r0, r2
 800d410:	4619      	mov	r1, r3
 800d412:	f7f3 f901 	bl	8000618 <__aeabi_dmul>
 800d416:	e7e7      	b.n	800d3e8 <__ieee754_pow+0x108>
 800d418:	493e      	ldr	r1, [pc, #248]	; (800d514 <__ieee754_pow+0x234>)
 800d41a:	428f      	cmp	r7, r1
 800d41c:	d10d      	bne.n	800d43a <__ieee754_pow+0x15a>
 800d41e:	f1b9 0f00 	cmp.w	r9, #0
 800d422:	db0a      	blt.n	800d43a <__ieee754_pow+0x15a>
 800d424:	ec43 2b10 	vmov	d0, r2, r3
 800d428:	b00d      	add	sp, #52	; 0x34
 800d42a:	ecbd 8b06 	vpop	{d8-d10}
 800d42e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d432:	f000 bc77 	b.w	800dd24 <__ieee754_sqrt>
 800d436:	2100      	movs	r1, #0
 800d438:	9100      	str	r1, [sp, #0]
 800d43a:	ec43 2b10 	vmov	d0, r2, r3
 800d43e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d442:	f000 fd23 	bl	800de8c <fabs>
 800d446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d44a:	ec51 0b10 	vmov	r0, r1, d0
 800d44e:	f1b8 0f00 	cmp.w	r8, #0
 800d452:	d12a      	bne.n	800d4aa <__ieee754_pow+0x1ca>
 800d454:	b12c      	cbz	r4, 800d462 <__ieee754_pow+0x182>
 800d456:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800d50c <__ieee754_pow+0x22c>
 800d45a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800d45e:	45e6      	cmp	lr, ip
 800d460:	d123      	bne.n	800d4aa <__ieee754_pow+0x1ca>
 800d462:	2f00      	cmp	r7, #0
 800d464:	da05      	bge.n	800d472 <__ieee754_pow+0x192>
 800d466:	4602      	mov	r2, r0
 800d468:	460b      	mov	r3, r1
 800d46a:	2000      	movs	r0, #0
 800d46c:	4927      	ldr	r1, [pc, #156]	; (800d50c <__ieee754_pow+0x22c>)
 800d46e:	f7f3 f9fd 	bl	800086c <__aeabi_ddiv>
 800d472:	f1b9 0f00 	cmp.w	r9, #0
 800d476:	dab7      	bge.n	800d3e8 <__ieee754_pow+0x108>
 800d478:	9b00      	ldr	r3, [sp, #0]
 800d47a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d47e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d482:	4323      	orrs	r3, r4
 800d484:	d108      	bne.n	800d498 <__ieee754_pow+0x1b8>
 800d486:	4602      	mov	r2, r0
 800d488:	460b      	mov	r3, r1
 800d48a:	4610      	mov	r0, r2
 800d48c:	4619      	mov	r1, r3
 800d48e:	f7f2 ff0b 	bl	80002a8 <__aeabi_dsub>
 800d492:	4602      	mov	r2, r0
 800d494:	460b      	mov	r3, r1
 800d496:	e78d      	b.n	800d3b4 <__ieee754_pow+0xd4>
 800d498:	9b00      	ldr	r3, [sp, #0]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d1a4      	bne.n	800d3e8 <__ieee754_pow+0x108>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	e79e      	b.n	800d3e8 <__ieee754_pow+0x108>
 800d4aa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800d4ae:	f10c 35ff 	add.w	r5, ip, #4294967295
 800d4b2:	950a      	str	r5, [sp, #40]	; 0x28
 800d4b4:	9d00      	ldr	r5, [sp, #0]
 800d4b6:	46ac      	mov	ip, r5
 800d4b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d4ba:	ea5c 0505 	orrs.w	r5, ip, r5
 800d4be:	d0e4      	beq.n	800d48a <__ieee754_pow+0x1aa>
 800d4c0:	4b15      	ldr	r3, [pc, #84]	; (800d518 <__ieee754_pow+0x238>)
 800d4c2:	429e      	cmp	r6, r3
 800d4c4:	f340 80fc 	ble.w	800d6c0 <__ieee754_pow+0x3e0>
 800d4c8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d4cc:	429e      	cmp	r6, r3
 800d4ce:	4b10      	ldr	r3, [pc, #64]	; (800d510 <__ieee754_pow+0x230>)
 800d4d0:	dd07      	ble.n	800d4e2 <__ieee754_pow+0x202>
 800d4d2:	429c      	cmp	r4, r3
 800d4d4:	dc0a      	bgt.n	800d4ec <__ieee754_pow+0x20c>
 800d4d6:	2f00      	cmp	r7, #0
 800d4d8:	da84      	bge.n	800d3e4 <__ieee754_pow+0x104>
 800d4da:	a307      	add	r3, pc, #28	; (adr r3, 800d4f8 <__ieee754_pow+0x218>)
 800d4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e0:	e795      	b.n	800d40e <__ieee754_pow+0x12e>
 800d4e2:	429c      	cmp	r4, r3
 800d4e4:	dbf7      	blt.n	800d4d6 <__ieee754_pow+0x1f6>
 800d4e6:	4b09      	ldr	r3, [pc, #36]	; (800d50c <__ieee754_pow+0x22c>)
 800d4e8:	429c      	cmp	r4, r3
 800d4ea:	dd17      	ble.n	800d51c <__ieee754_pow+0x23c>
 800d4ec:	2f00      	cmp	r7, #0
 800d4ee:	dcf4      	bgt.n	800d4da <__ieee754_pow+0x1fa>
 800d4f0:	e778      	b.n	800d3e4 <__ieee754_pow+0x104>
 800d4f2:	bf00      	nop
 800d4f4:	f3af 8000 	nop.w
 800d4f8:	8800759c 	.word	0x8800759c
 800d4fc:	7e37e43c 	.word	0x7e37e43c
 800d500:	7ff00000 	.word	0x7ff00000
 800d504:	0800e7c0 	.word	0x0800e7c0
 800d508:	433fffff 	.word	0x433fffff
 800d50c:	3ff00000 	.word	0x3ff00000
 800d510:	3fefffff 	.word	0x3fefffff
 800d514:	3fe00000 	.word	0x3fe00000
 800d518:	41e00000 	.word	0x41e00000
 800d51c:	4b64      	ldr	r3, [pc, #400]	; (800d6b0 <__ieee754_pow+0x3d0>)
 800d51e:	2200      	movs	r2, #0
 800d520:	f7f2 fec2 	bl	80002a8 <__aeabi_dsub>
 800d524:	a356      	add	r3, pc, #344	; (adr r3, 800d680 <__ieee754_pow+0x3a0>)
 800d526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52a:	4604      	mov	r4, r0
 800d52c:	460d      	mov	r5, r1
 800d52e:	f7f3 f873 	bl	8000618 <__aeabi_dmul>
 800d532:	a355      	add	r3, pc, #340	; (adr r3, 800d688 <__ieee754_pow+0x3a8>)
 800d534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d538:	4606      	mov	r6, r0
 800d53a:	460f      	mov	r7, r1
 800d53c:	4620      	mov	r0, r4
 800d53e:	4629      	mov	r1, r5
 800d540:	f7f3 f86a 	bl	8000618 <__aeabi_dmul>
 800d544:	4b5b      	ldr	r3, [pc, #364]	; (800d6b4 <__ieee754_pow+0x3d4>)
 800d546:	4682      	mov	sl, r0
 800d548:	468b      	mov	fp, r1
 800d54a:	2200      	movs	r2, #0
 800d54c:	4620      	mov	r0, r4
 800d54e:	4629      	mov	r1, r5
 800d550:	f7f3 f862 	bl	8000618 <__aeabi_dmul>
 800d554:	4602      	mov	r2, r0
 800d556:	460b      	mov	r3, r1
 800d558:	a14d      	add	r1, pc, #308	; (adr r1, 800d690 <__ieee754_pow+0x3b0>)
 800d55a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d55e:	f7f2 fea3 	bl	80002a8 <__aeabi_dsub>
 800d562:	4622      	mov	r2, r4
 800d564:	462b      	mov	r3, r5
 800d566:	f7f3 f857 	bl	8000618 <__aeabi_dmul>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	2000      	movs	r0, #0
 800d570:	4951      	ldr	r1, [pc, #324]	; (800d6b8 <__ieee754_pow+0x3d8>)
 800d572:	f7f2 fe99 	bl	80002a8 <__aeabi_dsub>
 800d576:	4622      	mov	r2, r4
 800d578:	4680      	mov	r8, r0
 800d57a:	4689      	mov	r9, r1
 800d57c:	462b      	mov	r3, r5
 800d57e:	4620      	mov	r0, r4
 800d580:	4629      	mov	r1, r5
 800d582:	f7f3 f849 	bl	8000618 <__aeabi_dmul>
 800d586:	4602      	mov	r2, r0
 800d588:	460b      	mov	r3, r1
 800d58a:	4640      	mov	r0, r8
 800d58c:	4649      	mov	r1, r9
 800d58e:	f7f3 f843 	bl	8000618 <__aeabi_dmul>
 800d592:	a341      	add	r3, pc, #260	; (adr r3, 800d698 <__ieee754_pow+0x3b8>)
 800d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d598:	f7f3 f83e 	bl	8000618 <__aeabi_dmul>
 800d59c:	4602      	mov	r2, r0
 800d59e:	460b      	mov	r3, r1
 800d5a0:	4650      	mov	r0, sl
 800d5a2:	4659      	mov	r1, fp
 800d5a4:	f7f2 fe80 	bl	80002a8 <__aeabi_dsub>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	4680      	mov	r8, r0
 800d5ae:	4689      	mov	r9, r1
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	4639      	mov	r1, r7
 800d5b4:	f7f2 fe7a 	bl	80002ac <__adddf3>
 800d5b8:	2400      	movs	r4, #0
 800d5ba:	4632      	mov	r2, r6
 800d5bc:	463b      	mov	r3, r7
 800d5be:	4620      	mov	r0, r4
 800d5c0:	460d      	mov	r5, r1
 800d5c2:	f7f2 fe71 	bl	80002a8 <__aeabi_dsub>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	4640      	mov	r0, r8
 800d5cc:	4649      	mov	r1, r9
 800d5ce:	f7f2 fe6b 	bl	80002a8 <__aeabi_dsub>
 800d5d2:	9b00      	ldr	r3, [sp, #0]
 800d5d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5d6:	3b01      	subs	r3, #1
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	4682      	mov	sl, r0
 800d5dc:	468b      	mov	fp, r1
 800d5de:	f040 81f1 	bne.w	800d9c4 <__ieee754_pow+0x6e4>
 800d5e2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d6a0 <__ieee754_pow+0x3c0>
 800d5e6:	eeb0 8a47 	vmov.f32	s16, s14
 800d5ea:	eef0 8a67 	vmov.f32	s17, s15
 800d5ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d5f2:	2600      	movs	r6, #0
 800d5f4:	4632      	mov	r2, r6
 800d5f6:	463b      	mov	r3, r7
 800d5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5fc:	f7f2 fe54 	bl	80002a8 <__aeabi_dsub>
 800d600:	4622      	mov	r2, r4
 800d602:	462b      	mov	r3, r5
 800d604:	f7f3 f808 	bl	8000618 <__aeabi_dmul>
 800d608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d60c:	4680      	mov	r8, r0
 800d60e:	4689      	mov	r9, r1
 800d610:	4650      	mov	r0, sl
 800d612:	4659      	mov	r1, fp
 800d614:	f7f3 f800 	bl	8000618 <__aeabi_dmul>
 800d618:	4602      	mov	r2, r0
 800d61a:	460b      	mov	r3, r1
 800d61c:	4640      	mov	r0, r8
 800d61e:	4649      	mov	r1, r9
 800d620:	f7f2 fe44 	bl	80002ac <__adddf3>
 800d624:	4632      	mov	r2, r6
 800d626:	463b      	mov	r3, r7
 800d628:	4680      	mov	r8, r0
 800d62a:	4689      	mov	r9, r1
 800d62c:	4620      	mov	r0, r4
 800d62e:	4629      	mov	r1, r5
 800d630:	f7f2 fff2 	bl	8000618 <__aeabi_dmul>
 800d634:	460b      	mov	r3, r1
 800d636:	4604      	mov	r4, r0
 800d638:	460d      	mov	r5, r1
 800d63a:	4602      	mov	r2, r0
 800d63c:	4649      	mov	r1, r9
 800d63e:	4640      	mov	r0, r8
 800d640:	f7f2 fe34 	bl	80002ac <__adddf3>
 800d644:	4b1d      	ldr	r3, [pc, #116]	; (800d6bc <__ieee754_pow+0x3dc>)
 800d646:	4299      	cmp	r1, r3
 800d648:	ec45 4b19 	vmov	d9, r4, r5
 800d64c:	4606      	mov	r6, r0
 800d64e:	460f      	mov	r7, r1
 800d650:	468b      	mov	fp, r1
 800d652:	f340 82fe 	ble.w	800dc52 <__ieee754_pow+0x972>
 800d656:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d65a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d65e:	4303      	orrs	r3, r0
 800d660:	f000 81f0 	beq.w	800da44 <__ieee754_pow+0x764>
 800d664:	a310      	add	r3, pc, #64	; (adr r3, 800d6a8 <__ieee754_pow+0x3c8>)
 800d666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66a:	ec51 0b18 	vmov	r0, r1, d8
 800d66e:	f7f2 ffd3 	bl	8000618 <__aeabi_dmul>
 800d672:	a30d      	add	r3, pc, #52	; (adr r3, 800d6a8 <__ieee754_pow+0x3c8>)
 800d674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d678:	e6cb      	b.n	800d412 <__ieee754_pow+0x132>
 800d67a:	bf00      	nop
 800d67c:	f3af 8000 	nop.w
 800d680:	60000000 	.word	0x60000000
 800d684:	3ff71547 	.word	0x3ff71547
 800d688:	f85ddf44 	.word	0xf85ddf44
 800d68c:	3e54ae0b 	.word	0x3e54ae0b
 800d690:	55555555 	.word	0x55555555
 800d694:	3fd55555 	.word	0x3fd55555
 800d698:	652b82fe 	.word	0x652b82fe
 800d69c:	3ff71547 	.word	0x3ff71547
 800d6a0:	00000000 	.word	0x00000000
 800d6a4:	bff00000 	.word	0xbff00000
 800d6a8:	8800759c 	.word	0x8800759c
 800d6ac:	7e37e43c 	.word	0x7e37e43c
 800d6b0:	3ff00000 	.word	0x3ff00000
 800d6b4:	3fd00000 	.word	0x3fd00000
 800d6b8:	3fe00000 	.word	0x3fe00000
 800d6bc:	408fffff 	.word	0x408fffff
 800d6c0:	4bd7      	ldr	r3, [pc, #860]	; (800da20 <__ieee754_pow+0x740>)
 800d6c2:	ea03 0309 	and.w	r3, r3, r9
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	b92b      	cbnz	r3, 800d6d6 <__ieee754_pow+0x3f6>
 800d6ca:	4bd6      	ldr	r3, [pc, #856]	; (800da24 <__ieee754_pow+0x744>)
 800d6cc:	f7f2 ffa4 	bl	8000618 <__aeabi_dmul>
 800d6d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d6d4:	460c      	mov	r4, r1
 800d6d6:	1523      	asrs	r3, r4, #20
 800d6d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d6dc:	4413      	add	r3, r2
 800d6de:	9309      	str	r3, [sp, #36]	; 0x24
 800d6e0:	4bd1      	ldr	r3, [pc, #836]	; (800da28 <__ieee754_pow+0x748>)
 800d6e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d6e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d6ea:	429c      	cmp	r4, r3
 800d6ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d6f0:	dd08      	ble.n	800d704 <__ieee754_pow+0x424>
 800d6f2:	4bce      	ldr	r3, [pc, #824]	; (800da2c <__ieee754_pow+0x74c>)
 800d6f4:	429c      	cmp	r4, r3
 800d6f6:	f340 8163 	ble.w	800d9c0 <__ieee754_pow+0x6e0>
 800d6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d700:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d704:	2400      	movs	r4, #0
 800d706:	00e3      	lsls	r3, r4, #3
 800d708:	930b      	str	r3, [sp, #44]	; 0x2c
 800d70a:	4bc9      	ldr	r3, [pc, #804]	; (800da30 <__ieee754_pow+0x750>)
 800d70c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d710:	ed93 7b00 	vldr	d7, [r3]
 800d714:	4629      	mov	r1, r5
 800d716:	ec53 2b17 	vmov	r2, r3, d7
 800d71a:	eeb0 8a47 	vmov.f32	s16, s14
 800d71e:	eef0 8a67 	vmov.f32	s17, s15
 800d722:	4682      	mov	sl, r0
 800d724:	f7f2 fdc0 	bl	80002a8 <__aeabi_dsub>
 800d728:	4652      	mov	r2, sl
 800d72a:	4606      	mov	r6, r0
 800d72c:	460f      	mov	r7, r1
 800d72e:	462b      	mov	r3, r5
 800d730:	ec51 0b18 	vmov	r0, r1, d8
 800d734:	f7f2 fdba 	bl	80002ac <__adddf3>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	2000      	movs	r0, #0
 800d73e:	49bd      	ldr	r1, [pc, #756]	; (800da34 <__ieee754_pow+0x754>)
 800d740:	f7f3 f894 	bl	800086c <__aeabi_ddiv>
 800d744:	ec41 0b19 	vmov	d9, r0, r1
 800d748:	4602      	mov	r2, r0
 800d74a:	460b      	mov	r3, r1
 800d74c:	4630      	mov	r0, r6
 800d74e:	4639      	mov	r1, r7
 800d750:	f7f2 ff62 	bl	8000618 <__aeabi_dmul>
 800d754:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d75c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d760:	2300      	movs	r3, #0
 800d762:	9304      	str	r3, [sp, #16]
 800d764:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d768:	46ab      	mov	fp, r5
 800d76a:	106d      	asrs	r5, r5, #1
 800d76c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d770:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d774:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d778:	2200      	movs	r2, #0
 800d77a:	4640      	mov	r0, r8
 800d77c:	4649      	mov	r1, r9
 800d77e:	4614      	mov	r4, r2
 800d780:	461d      	mov	r5, r3
 800d782:	f7f2 ff49 	bl	8000618 <__aeabi_dmul>
 800d786:	4602      	mov	r2, r0
 800d788:	460b      	mov	r3, r1
 800d78a:	4630      	mov	r0, r6
 800d78c:	4639      	mov	r1, r7
 800d78e:	f7f2 fd8b 	bl	80002a8 <__aeabi_dsub>
 800d792:	ec53 2b18 	vmov	r2, r3, d8
 800d796:	4606      	mov	r6, r0
 800d798:	460f      	mov	r7, r1
 800d79a:	4620      	mov	r0, r4
 800d79c:	4629      	mov	r1, r5
 800d79e:	f7f2 fd83 	bl	80002a8 <__aeabi_dsub>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	4650      	mov	r0, sl
 800d7a8:	4659      	mov	r1, fp
 800d7aa:	f7f2 fd7d 	bl	80002a8 <__aeabi_dsub>
 800d7ae:	4642      	mov	r2, r8
 800d7b0:	464b      	mov	r3, r9
 800d7b2:	f7f2 ff31 	bl	8000618 <__aeabi_dmul>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	4639      	mov	r1, r7
 800d7be:	f7f2 fd73 	bl	80002a8 <__aeabi_dsub>
 800d7c2:	ec53 2b19 	vmov	r2, r3, d9
 800d7c6:	f7f2 ff27 	bl	8000618 <__aeabi_dmul>
 800d7ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d7ce:	ec41 0b18 	vmov	d8, r0, r1
 800d7d2:	4610      	mov	r0, r2
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	f7f2 ff1f 	bl	8000618 <__aeabi_dmul>
 800d7da:	a37d      	add	r3, pc, #500	; (adr r3, 800d9d0 <__ieee754_pow+0x6f0>)
 800d7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	460d      	mov	r5, r1
 800d7e4:	f7f2 ff18 	bl	8000618 <__aeabi_dmul>
 800d7e8:	a37b      	add	r3, pc, #492	; (adr r3, 800d9d8 <__ieee754_pow+0x6f8>)
 800d7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ee:	f7f2 fd5d 	bl	80002ac <__adddf3>
 800d7f2:	4622      	mov	r2, r4
 800d7f4:	462b      	mov	r3, r5
 800d7f6:	f7f2 ff0f 	bl	8000618 <__aeabi_dmul>
 800d7fa:	a379      	add	r3, pc, #484	; (adr r3, 800d9e0 <__ieee754_pow+0x700>)
 800d7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d800:	f7f2 fd54 	bl	80002ac <__adddf3>
 800d804:	4622      	mov	r2, r4
 800d806:	462b      	mov	r3, r5
 800d808:	f7f2 ff06 	bl	8000618 <__aeabi_dmul>
 800d80c:	a376      	add	r3, pc, #472	; (adr r3, 800d9e8 <__ieee754_pow+0x708>)
 800d80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d812:	f7f2 fd4b 	bl	80002ac <__adddf3>
 800d816:	4622      	mov	r2, r4
 800d818:	462b      	mov	r3, r5
 800d81a:	f7f2 fefd 	bl	8000618 <__aeabi_dmul>
 800d81e:	a374      	add	r3, pc, #464	; (adr r3, 800d9f0 <__ieee754_pow+0x710>)
 800d820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d824:	f7f2 fd42 	bl	80002ac <__adddf3>
 800d828:	4622      	mov	r2, r4
 800d82a:	462b      	mov	r3, r5
 800d82c:	f7f2 fef4 	bl	8000618 <__aeabi_dmul>
 800d830:	a371      	add	r3, pc, #452	; (adr r3, 800d9f8 <__ieee754_pow+0x718>)
 800d832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d836:	f7f2 fd39 	bl	80002ac <__adddf3>
 800d83a:	4622      	mov	r2, r4
 800d83c:	4606      	mov	r6, r0
 800d83e:	460f      	mov	r7, r1
 800d840:	462b      	mov	r3, r5
 800d842:	4620      	mov	r0, r4
 800d844:	4629      	mov	r1, r5
 800d846:	f7f2 fee7 	bl	8000618 <__aeabi_dmul>
 800d84a:	4602      	mov	r2, r0
 800d84c:	460b      	mov	r3, r1
 800d84e:	4630      	mov	r0, r6
 800d850:	4639      	mov	r1, r7
 800d852:	f7f2 fee1 	bl	8000618 <__aeabi_dmul>
 800d856:	4642      	mov	r2, r8
 800d858:	4604      	mov	r4, r0
 800d85a:	460d      	mov	r5, r1
 800d85c:	464b      	mov	r3, r9
 800d85e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d862:	f7f2 fd23 	bl	80002ac <__adddf3>
 800d866:	ec53 2b18 	vmov	r2, r3, d8
 800d86a:	f7f2 fed5 	bl	8000618 <__aeabi_dmul>
 800d86e:	4622      	mov	r2, r4
 800d870:	462b      	mov	r3, r5
 800d872:	f7f2 fd1b 	bl	80002ac <__adddf3>
 800d876:	4642      	mov	r2, r8
 800d878:	4682      	mov	sl, r0
 800d87a:	468b      	mov	fp, r1
 800d87c:	464b      	mov	r3, r9
 800d87e:	4640      	mov	r0, r8
 800d880:	4649      	mov	r1, r9
 800d882:	f7f2 fec9 	bl	8000618 <__aeabi_dmul>
 800d886:	4b6c      	ldr	r3, [pc, #432]	; (800da38 <__ieee754_pow+0x758>)
 800d888:	2200      	movs	r2, #0
 800d88a:	4606      	mov	r6, r0
 800d88c:	460f      	mov	r7, r1
 800d88e:	f7f2 fd0d 	bl	80002ac <__adddf3>
 800d892:	4652      	mov	r2, sl
 800d894:	465b      	mov	r3, fp
 800d896:	f7f2 fd09 	bl	80002ac <__adddf3>
 800d89a:	9c04      	ldr	r4, [sp, #16]
 800d89c:	460d      	mov	r5, r1
 800d89e:	4622      	mov	r2, r4
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	4640      	mov	r0, r8
 800d8a4:	4649      	mov	r1, r9
 800d8a6:	f7f2 feb7 	bl	8000618 <__aeabi_dmul>
 800d8aa:	4b63      	ldr	r3, [pc, #396]	; (800da38 <__ieee754_pow+0x758>)
 800d8ac:	4680      	mov	r8, r0
 800d8ae:	4689      	mov	r9, r1
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	f7f2 fcf7 	bl	80002a8 <__aeabi_dsub>
 800d8ba:	4632      	mov	r2, r6
 800d8bc:	463b      	mov	r3, r7
 800d8be:	f7f2 fcf3 	bl	80002a8 <__aeabi_dsub>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	4650      	mov	r0, sl
 800d8c8:	4659      	mov	r1, fp
 800d8ca:	f7f2 fced 	bl	80002a8 <__aeabi_dsub>
 800d8ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8d2:	f7f2 fea1 	bl	8000618 <__aeabi_dmul>
 800d8d6:	4622      	mov	r2, r4
 800d8d8:	4606      	mov	r6, r0
 800d8da:	460f      	mov	r7, r1
 800d8dc:	462b      	mov	r3, r5
 800d8de:	ec51 0b18 	vmov	r0, r1, d8
 800d8e2:	f7f2 fe99 	bl	8000618 <__aeabi_dmul>
 800d8e6:	4602      	mov	r2, r0
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	4630      	mov	r0, r6
 800d8ec:	4639      	mov	r1, r7
 800d8ee:	f7f2 fcdd 	bl	80002ac <__adddf3>
 800d8f2:	4606      	mov	r6, r0
 800d8f4:	460f      	mov	r7, r1
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	4640      	mov	r0, r8
 800d8fc:	4649      	mov	r1, r9
 800d8fe:	f7f2 fcd5 	bl	80002ac <__adddf3>
 800d902:	9c04      	ldr	r4, [sp, #16]
 800d904:	a33e      	add	r3, pc, #248	; (adr r3, 800da00 <__ieee754_pow+0x720>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	4620      	mov	r0, r4
 800d90c:	460d      	mov	r5, r1
 800d90e:	f7f2 fe83 	bl	8000618 <__aeabi_dmul>
 800d912:	4642      	mov	r2, r8
 800d914:	ec41 0b18 	vmov	d8, r0, r1
 800d918:	464b      	mov	r3, r9
 800d91a:	4620      	mov	r0, r4
 800d91c:	4629      	mov	r1, r5
 800d91e:	f7f2 fcc3 	bl	80002a8 <__aeabi_dsub>
 800d922:	4602      	mov	r2, r0
 800d924:	460b      	mov	r3, r1
 800d926:	4630      	mov	r0, r6
 800d928:	4639      	mov	r1, r7
 800d92a:	f7f2 fcbd 	bl	80002a8 <__aeabi_dsub>
 800d92e:	a336      	add	r3, pc, #216	; (adr r3, 800da08 <__ieee754_pow+0x728>)
 800d930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d934:	f7f2 fe70 	bl	8000618 <__aeabi_dmul>
 800d938:	a335      	add	r3, pc, #212	; (adr r3, 800da10 <__ieee754_pow+0x730>)
 800d93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d93e:	4606      	mov	r6, r0
 800d940:	460f      	mov	r7, r1
 800d942:	4620      	mov	r0, r4
 800d944:	4629      	mov	r1, r5
 800d946:	f7f2 fe67 	bl	8000618 <__aeabi_dmul>
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	4630      	mov	r0, r6
 800d950:	4639      	mov	r1, r7
 800d952:	f7f2 fcab 	bl	80002ac <__adddf3>
 800d956:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d958:	4b38      	ldr	r3, [pc, #224]	; (800da3c <__ieee754_pow+0x75c>)
 800d95a:	4413      	add	r3, r2
 800d95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d960:	f7f2 fca4 	bl	80002ac <__adddf3>
 800d964:	4682      	mov	sl, r0
 800d966:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d968:	468b      	mov	fp, r1
 800d96a:	f7f2 fdeb 	bl	8000544 <__aeabi_i2d>
 800d96e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d970:	4b33      	ldr	r3, [pc, #204]	; (800da40 <__ieee754_pow+0x760>)
 800d972:	4413      	add	r3, r2
 800d974:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d978:	4606      	mov	r6, r0
 800d97a:	460f      	mov	r7, r1
 800d97c:	4652      	mov	r2, sl
 800d97e:	465b      	mov	r3, fp
 800d980:	ec51 0b18 	vmov	r0, r1, d8
 800d984:	f7f2 fc92 	bl	80002ac <__adddf3>
 800d988:	4642      	mov	r2, r8
 800d98a:	464b      	mov	r3, r9
 800d98c:	f7f2 fc8e 	bl	80002ac <__adddf3>
 800d990:	4632      	mov	r2, r6
 800d992:	463b      	mov	r3, r7
 800d994:	f7f2 fc8a 	bl	80002ac <__adddf3>
 800d998:	9c04      	ldr	r4, [sp, #16]
 800d99a:	4632      	mov	r2, r6
 800d99c:	463b      	mov	r3, r7
 800d99e:	4620      	mov	r0, r4
 800d9a0:	460d      	mov	r5, r1
 800d9a2:	f7f2 fc81 	bl	80002a8 <__aeabi_dsub>
 800d9a6:	4642      	mov	r2, r8
 800d9a8:	464b      	mov	r3, r9
 800d9aa:	f7f2 fc7d 	bl	80002a8 <__aeabi_dsub>
 800d9ae:	ec53 2b18 	vmov	r2, r3, d8
 800d9b2:	f7f2 fc79 	bl	80002a8 <__aeabi_dsub>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	4650      	mov	r0, sl
 800d9bc:	4659      	mov	r1, fp
 800d9be:	e606      	b.n	800d5ce <__ieee754_pow+0x2ee>
 800d9c0:	2401      	movs	r4, #1
 800d9c2:	e6a0      	b.n	800d706 <__ieee754_pow+0x426>
 800d9c4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800da18 <__ieee754_pow+0x738>
 800d9c8:	e60d      	b.n	800d5e6 <__ieee754_pow+0x306>
 800d9ca:	bf00      	nop
 800d9cc:	f3af 8000 	nop.w
 800d9d0:	4a454eef 	.word	0x4a454eef
 800d9d4:	3fca7e28 	.word	0x3fca7e28
 800d9d8:	93c9db65 	.word	0x93c9db65
 800d9dc:	3fcd864a 	.word	0x3fcd864a
 800d9e0:	a91d4101 	.word	0xa91d4101
 800d9e4:	3fd17460 	.word	0x3fd17460
 800d9e8:	518f264d 	.word	0x518f264d
 800d9ec:	3fd55555 	.word	0x3fd55555
 800d9f0:	db6fabff 	.word	0xdb6fabff
 800d9f4:	3fdb6db6 	.word	0x3fdb6db6
 800d9f8:	33333303 	.word	0x33333303
 800d9fc:	3fe33333 	.word	0x3fe33333
 800da00:	e0000000 	.word	0xe0000000
 800da04:	3feec709 	.word	0x3feec709
 800da08:	dc3a03fd 	.word	0xdc3a03fd
 800da0c:	3feec709 	.word	0x3feec709
 800da10:	145b01f5 	.word	0x145b01f5
 800da14:	be3e2fe0 	.word	0xbe3e2fe0
 800da18:	00000000 	.word	0x00000000
 800da1c:	3ff00000 	.word	0x3ff00000
 800da20:	7ff00000 	.word	0x7ff00000
 800da24:	43400000 	.word	0x43400000
 800da28:	0003988e 	.word	0x0003988e
 800da2c:	000bb679 	.word	0x000bb679
 800da30:	0800e7d0 	.word	0x0800e7d0
 800da34:	3ff00000 	.word	0x3ff00000
 800da38:	40080000 	.word	0x40080000
 800da3c:	0800e7f0 	.word	0x0800e7f0
 800da40:	0800e7e0 	.word	0x0800e7e0
 800da44:	a3b5      	add	r3, pc, #724	; (adr r3, 800dd1c <__ieee754_pow+0xa3c>)
 800da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4a:	4640      	mov	r0, r8
 800da4c:	4649      	mov	r1, r9
 800da4e:	f7f2 fc2d 	bl	80002ac <__adddf3>
 800da52:	4622      	mov	r2, r4
 800da54:	ec41 0b1a 	vmov	d10, r0, r1
 800da58:	462b      	mov	r3, r5
 800da5a:	4630      	mov	r0, r6
 800da5c:	4639      	mov	r1, r7
 800da5e:	f7f2 fc23 	bl	80002a8 <__aeabi_dsub>
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	ec51 0b1a 	vmov	r0, r1, d10
 800da6a:	f7f3 f865 	bl	8000b38 <__aeabi_dcmpgt>
 800da6e:	2800      	cmp	r0, #0
 800da70:	f47f adf8 	bne.w	800d664 <__ieee754_pow+0x384>
 800da74:	4aa4      	ldr	r2, [pc, #656]	; (800dd08 <__ieee754_pow+0xa28>)
 800da76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da7a:	4293      	cmp	r3, r2
 800da7c:	f340 810b 	ble.w	800dc96 <__ieee754_pow+0x9b6>
 800da80:	151b      	asrs	r3, r3, #20
 800da82:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800da86:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800da8a:	fa4a f303 	asr.w	r3, sl, r3
 800da8e:	445b      	add	r3, fp
 800da90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800da94:	4e9d      	ldr	r6, [pc, #628]	; (800dd0c <__ieee754_pow+0xa2c>)
 800da96:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800da9a:	4116      	asrs	r6, r2
 800da9c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800daa0:	2000      	movs	r0, #0
 800daa2:	ea23 0106 	bic.w	r1, r3, r6
 800daa6:	f1c2 0214 	rsb	r2, r2, #20
 800daaa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800daae:	fa4a fa02 	asr.w	sl, sl, r2
 800dab2:	f1bb 0f00 	cmp.w	fp, #0
 800dab6:	4602      	mov	r2, r0
 800dab8:	460b      	mov	r3, r1
 800daba:	4620      	mov	r0, r4
 800dabc:	4629      	mov	r1, r5
 800dabe:	bfb8      	it	lt
 800dac0:	f1ca 0a00 	rsblt	sl, sl, #0
 800dac4:	f7f2 fbf0 	bl	80002a8 <__aeabi_dsub>
 800dac8:	ec41 0b19 	vmov	d9, r0, r1
 800dacc:	4642      	mov	r2, r8
 800dace:	464b      	mov	r3, r9
 800dad0:	ec51 0b19 	vmov	r0, r1, d9
 800dad4:	f7f2 fbea 	bl	80002ac <__adddf3>
 800dad8:	2400      	movs	r4, #0
 800dada:	a379      	add	r3, pc, #484	; (adr r3, 800dcc0 <__ieee754_pow+0x9e0>)
 800dadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae0:	4620      	mov	r0, r4
 800dae2:	460d      	mov	r5, r1
 800dae4:	f7f2 fd98 	bl	8000618 <__aeabi_dmul>
 800dae8:	ec53 2b19 	vmov	r2, r3, d9
 800daec:	4606      	mov	r6, r0
 800daee:	460f      	mov	r7, r1
 800daf0:	4620      	mov	r0, r4
 800daf2:	4629      	mov	r1, r5
 800daf4:	f7f2 fbd8 	bl	80002a8 <__aeabi_dsub>
 800daf8:	4602      	mov	r2, r0
 800dafa:	460b      	mov	r3, r1
 800dafc:	4640      	mov	r0, r8
 800dafe:	4649      	mov	r1, r9
 800db00:	f7f2 fbd2 	bl	80002a8 <__aeabi_dsub>
 800db04:	a370      	add	r3, pc, #448	; (adr r3, 800dcc8 <__ieee754_pow+0x9e8>)
 800db06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0a:	f7f2 fd85 	bl	8000618 <__aeabi_dmul>
 800db0e:	a370      	add	r3, pc, #448	; (adr r3, 800dcd0 <__ieee754_pow+0x9f0>)
 800db10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db14:	4680      	mov	r8, r0
 800db16:	4689      	mov	r9, r1
 800db18:	4620      	mov	r0, r4
 800db1a:	4629      	mov	r1, r5
 800db1c:	f7f2 fd7c 	bl	8000618 <__aeabi_dmul>
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	4640      	mov	r0, r8
 800db26:	4649      	mov	r1, r9
 800db28:	f7f2 fbc0 	bl	80002ac <__adddf3>
 800db2c:	4604      	mov	r4, r0
 800db2e:	460d      	mov	r5, r1
 800db30:	4602      	mov	r2, r0
 800db32:	460b      	mov	r3, r1
 800db34:	4630      	mov	r0, r6
 800db36:	4639      	mov	r1, r7
 800db38:	f7f2 fbb8 	bl	80002ac <__adddf3>
 800db3c:	4632      	mov	r2, r6
 800db3e:	463b      	mov	r3, r7
 800db40:	4680      	mov	r8, r0
 800db42:	4689      	mov	r9, r1
 800db44:	f7f2 fbb0 	bl	80002a8 <__aeabi_dsub>
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
 800db4c:	4620      	mov	r0, r4
 800db4e:	4629      	mov	r1, r5
 800db50:	f7f2 fbaa 	bl	80002a8 <__aeabi_dsub>
 800db54:	4642      	mov	r2, r8
 800db56:	4606      	mov	r6, r0
 800db58:	460f      	mov	r7, r1
 800db5a:	464b      	mov	r3, r9
 800db5c:	4640      	mov	r0, r8
 800db5e:	4649      	mov	r1, r9
 800db60:	f7f2 fd5a 	bl	8000618 <__aeabi_dmul>
 800db64:	a35c      	add	r3, pc, #368	; (adr r3, 800dcd8 <__ieee754_pow+0x9f8>)
 800db66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6a:	4604      	mov	r4, r0
 800db6c:	460d      	mov	r5, r1
 800db6e:	f7f2 fd53 	bl	8000618 <__aeabi_dmul>
 800db72:	a35b      	add	r3, pc, #364	; (adr r3, 800dce0 <__ieee754_pow+0xa00>)
 800db74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db78:	f7f2 fb96 	bl	80002a8 <__aeabi_dsub>
 800db7c:	4622      	mov	r2, r4
 800db7e:	462b      	mov	r3, r5
 800db80:	f7f2 fd4a 	bl	8000618 <__aeabi_dmul>
 800db84:	a358      	add	r3, pc, #352	; (adr r3, 800dce8 <__ieee754_pow+0xa08>)
 800db86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8a:	f7f2 fb8f 	bl	80002ac <__adddf3>
 800db8e:	4622      	mov	r2, r4
 800db90:	462b      	mov	r3, r5
 800db92:	f7f2 fd41 	bl	8000618 <__aeabi_dmul>
 800db96:	a356      	add	r3, pc, #344	; (adr r3, 800dcf0 <__ieee754_pow+0xa10>)
 800db98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9c:	f7f2 fb84 	bl	80002a8 <__aeabi_dsub>
 800dba0:	4622      	mov	r2, r4
 800dba2:	462b      	mov	r3, r5
 800dba4:	f7f2 fd38 	bl	8000618 <__aeabi_dmul>
 800dba8:	a353      	add	r3, pc, #332	; (adr r3, 800dcf8 <__ieee754_pow+0xa18>)
 800dbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbae:	f7f2 fb7d 	bl	80002ac <__adddf3>
 800dbb2:	4622      	mov	r2, r4
 800dbb4:	462b      	mov	r3, r5
 800dbb6:	f7f2 fd2f 	bl	8000618 <__aeabi_dmul>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	4640      	mov	r0, r8
 800dbc0:	4649      	mov	r1, r9
 800dbc2:	f7f2 fb71 	bl	80002a8 <__aeabi_dsub>
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	460d      	mov	r5, r1
 800dbca:	4602      	mov	r2, r0
 800dbcc:	460b      	mov	r3, r1
 800dbce:	4640      	mov	r0, r8
 800dbd0:	4649      	mov	r1, r9
 800dbd2:	f7f2 fd21 	bl	8000618 <__aeabi_dmul>
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	ec41 0b19 	vmov	d9, r0, r1
 800dbdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	4629      	mov	r1, r5
 800dbe4:	f7f2 fb60 	bl	80002a8 <__aeabi_dsub>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	460b      	mov	r3, r1
 800dbec:	ec51 0b19 	vmov	r0, r1, d9
 800dbf0:	f7f2 fe3c 	bl	800086c <__aeabi_ddiv>
 800dbf4:	4632      	mov	r2, r6
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	460d      	mov	r5, r1
 800dbfa:	463b      	mov	r3, r7
 800dbfc:	4640      	mov	r0, r8
 800dbfe:	4649      	mov	r1, r9
 800dc00:	f7f2 fd0a 	bl	8000618 <__aeabi_dmul>
 800dc04:	4632      	mov	r2, r6
 800dc06:	463b      	mov	r3, r7
 800dc08:	f7f2 fb50 	bl	80002ac <__adddf3>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	460b      	mov	r3, r1
 800dc10:	4620      	mov	r0, r4
 800dc12:	4629      	mov	r1, r5
 800dc14:	f7f2 fb48 	bl	80002a8 <__aeabi_dsub>
 800dc18:	4642      	mov	r2, r8
 800dc1a:	464b      	mov	r3, r9
 800dc1c:	f7f2 fb44 	bl	80002a8 <__aeabi_dsub>
 800dc20:	460b      	mov	r3, r1
 800dc22:	4602      	mov	r2, r0
 800dc24:	493a      	ldr	r1, [pc, #232]	; (800dd10 <__ieee754_pow+0xa30>)
 800dc26:	2000      	movs	r0, #0
 800dc28:	f7f2 fb3e 	bl	80002a8 <__aeabi_dsub>
 800dc2c:	e9cd 0100 	strd	r0, r1, [sp]
 800dc30:	9b01      	ldr	r3, [sp, #4]
 800dc32:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dc36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc3a:	da2f      	bge.n	800dc9c <__ieee754_pow+0x9bc>
 800dc3c:	4650      	mov	r0, sl
 800dc3e:	ed9d 0b00 	vldr	d0, [sp]
 800dc42:	f000 f9cd 	bl	800dfe0 <scalbn>
 800dc46:	ec51 0b10 	vmov	r0, r1, d0
 800dc4a:	ec53 2b18 	vmov	r2, r3, d8
 800dc4e:	f7ff bbe0 	b.w	800d412 <__ieee754_pow+0x132>
 800dc52:	4b30      	ldr	r3, [pc, #192]	; (800dd14 <__ieee754_pow+0xa34>)
 800dc54:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dc58:	429e      	cmp	r6, r3
 800dc5a:	f77f af0b 	ble.w	800da74 <__ieee754_pow+0x794>
 800dc5e:	4b2e      	ldr	r3, [pc, #184]	; (800dd18 <__ieee754_pow+0xa38>)
 800dc60:	440b      	add	r3, r1
 800dc62:	4303      	orrs	r3, r0
 800dc64:	d00b      	beq.n	800dc7e <__ieee754_pow+0x99e>
 800dc66:	a326      	add	r3, pc, #152	; (adr r3, 800dd00 <__ieee754_pow+0xa20>)
 800dc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6c:	ec51 0b18 	vmov	r0, r1, d8
 800dc70:	f7f2 fcd2 	bl	8000618 <__aeabi_dmul>
 800dc74:	a322      	add	r3, pc, #136	; (adr r3, 800dd00 <__ieee754_pow+0xa20>)
 800dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7a:	f7ff bbca 	b.w	800d412 <__ieee754_pow+0x132>
 800dc7e:	4622      	mov	r2, r4
 800dc80:	462b      	mov	r3, r5
 800dc82:	f7f2 fb11 	bl	80002a8 <__aeabi_dsub>
 800dc86:	4642      	mov	r2, r8
 800dc88:	464b      	mov	r3, r9
 800dc8a:	f7f2 ff4b 	bl	8000b24 <__aeabi_dcmpge>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	f43f aef0 	beq.w	800da74 <__ieee754_pow+0x794>
 800dc94:	e7e7      	b.n	800dc66 <__ieee754_pow+0x986>
 800dc96:	f04f 0a00 	mov.w	sl, #0
 800dc9a:	e717      	b.n	800dacc <__ieee754_pow+0x7ec>
 800dc9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dca0:	4619      	mov	r1, r3
 800dca2:	e7d2      	b.n	800dc4a <__ieee754_pow+0x96a>
 800dca4:	491a      	ldr	r1, [pc, #104]	; (800dd10 <__ieee754_pow+0xa30>)
 800dca6:	2000      	movs	r0, #0
 800dca8:	f7ff bb9e 	b.w	800d3e8 <__ieee754_pow+0x108>
 800dcac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcb0:	f7ff bb9a 	b.w	800d3e8 <__ieee754_pow+0x108>
 800dcb4:	9000      	str	r0, [sp, #0]
 800dcb6:	f7ff bb76 	b.w	800d3a6 <__ieee754_pow+0xc6>
 800dcba:	2100      	movs	r1, #0
 800dcbc:	f7ff bb60 	b.w	800d380 <__ieee754_pow+0xa0>
 800dcc0:	00000000 	.word	0x00000000
 800dcc4:	3fe62e43 	.word	0x3fe62e43
 800dcc8:	fefa39ef 	.word	0xfefa39ef
 800dccc:	3fe62e42 	.word	0x3fe62e42
 800dcd0:	0ca86c39 	.word	0x0ca86c39
 800dcd4:	be205c61 	.word	0xbe205c61
 800dcd8:	72bea4d0 	.word	0x72bea4d0
 800dcdc:	3e663769 	.word	0x3e663769
 800dce0:	c5d26bf1 	.word	0xc5d26bf1
 800dce4:	3ebbbd41 	.word	0x3ebbbd41
 800dce8:	af25de2c 	.word	0xaf25de2c
 800dcec:	3f11566a 	.word	0x3f11566a
 800dcf0:	16bebd93 	.word	0x16bebd93
 800dcf4:	3f66c16c 	.word	0x3f66c16c
 800dcf8:	5555553e 	.word	0x5555553e
 800dcfc:	3fc55555 	.word	0x3fc55555
 800dd00:	c2f8f359 	.word	0xc2f8f359
 800dd04:	01a56e1f 	.word	0x01a56e1f
 800dd08:	3fe00000 	.word	0x3fe00000
 800dd0c:	000fffff 	.word	0x000fffff
 800dd10:	3ff00000 	.word	0x3ff00000
 800dd14:	4090cbff 	.word	0x4090cbff
 800dd18:	3f6f3400 	.word	0x3f6f3400
 800dd1c:	652b82fe 	.word	0x652b82fe
 800dd20:	3c971547 	.word	0x3c971547

0800dd24 <__ieee754_sqrt>:
 800dd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd28:	ec55 4b10 	vmov	r4, r5, d0
 800dd2c:	4e56      	ldr	r6, [pc, #344]	; (800de88 <__ieee754_sqrt+0x164>)
 800dd2e:	43ae      	bics	r6, r5
 800dd30:	ee10 0a10 	vmov	r0, s0
 800dd34:	ee10 3a10 	vmov	r3, s0
 800dd38:	4629      	mov	r1, r5
 800dd3a:	462a      	mov	r2, r5
 800dd3c:	d110      	bne.n	800dd60 <__ieee754_sqrt+0x3c>
 800dd3e:	ee10 2a10 	vmov	r2, s0
 800dd42:	462b      	mov	r3, r5
 800dd44:	f7f2 fc68 	bl	8000618 <__aeabi_dmul>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	4629      	mov	r1, r5
 800dd50:	f7f2 faac 	bl	80002ac <__adddf3>
 800dd54:	4604      	mov	r4, r0
 800dd56:	460d      	mov	r5, r1
 800dd58:	ec45 4b10 	vmov	d0, r4, r5
 800dd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd60:	2d00      	cmp	r5, #0
 800dd62:	dc10      	bgt.n	800dd86 <__ieee754_sqrt+0x62>
 800dd64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dd68:	4330      	orrs	r0, r6
 800dd6a:	d0f5      	beq.n	800dd58 <__ieee754_sqrt+0x34>
 800dd6c:	b15d      	cbz	r5, 800dd86 <__ieee754_sqrt+0x62>
 800dd6e:	ee10 2a10 	vmov	r2, s0
 800dd72:	462b      	mov	r3, r5
 800dd74:	ee10 0a10 	vmov	r0, s0
 800dd78:	f7f2 fa96 	bl	80002a8 <__aeabi_dsub>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	460b      	mov	r3, r1
 800dd80:	f7f2 fd74 	bl	800086c <__aeabi_ddiv>
 800dd84:	e7e6      	b.n	800dd54 <__ieee754_sqrt+0x30>
 800dd86:	1509      	asrs	r1, r1, #20
 800dd88:	d076      	beq.n	800de78 <__ieee754_sqrt+0x154>
 800dd8a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800dd8e:	07ce      	lsls	r6, r1, #31
 800dd90:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800dd94:	bf5e      	ittt	pl
 800dd96:	0fda      	lsrpl	r2, r3, #31
 800dd98:	005b      	lslpl	r3, r3, #1
 800dd9a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800dd9e:	0fda      	lsrs	r2, r3, #31
 800dda0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800dda4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800dda8:	2000      	movs	r0, #0
 800ddaa:	106d      	asrs	r5, r5, #1
 800ddac:	005b      	lsls	r3, r3, #1
 800ddae:	f04f 0e16 	mov.w	lr, #22
 800ddb2:	4684      	mov	ip, r0
 800ddb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ddb8:	eb0c 0401 	add.w	r4, ip, r1
 800ddbc:	4294      	cmp	r4, r2
 800ddbe:	bfde      	ittt	le
 800ddc0:	1b12      	suble	r2, r2, r4
 800ddc2:	eb04 0c01 	addle.w	ip, r4, r1
 800ddc6:	1840      	addle	r0, r0, r1
 800ddc8:	0052      	lsls	r2, r2, #1
 800ddca:	f1be 0e01 	subs.w	lr, lr, #1
 800ddce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ddd2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ddd6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ddda:	d1ed      	bne.n	800ddb8 <__ieee754_sqrt+0x94>
 800dddc:	4671      	mov	r1, lr
 800ddde:	2720      	movs	r7, #32
 800dde0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800dde4:	4562      	cmp	r2, ip
 800dde6:	eb04 060e 	add.w	r6, r4, lr
 800ddea:	dc02      	bgt.n	800ddf2 <__ieee754_sqrt+0xce>
 800ddec:	d113      	bne.n	800de16 <__ieee754_sqrt+0xf2>
 800ddee:	429e      	cmp	r6, r3
 800ddf0:	d811      	bhi.n	800de16 <__ieee754_sqrt+0xf2>
 800ddf2:	2e00      	cmp	r6, #0
 800ddf4:	eb06 0e04 	add.w	lr, r6, r4
 800ddf8:	da43      	bge.n	800de82 <__ieee754_sqrt+0x15e>
 800ddfa:	f1be 0f00 	cmp.w	lr, #0
 800ddfe:	db40      	blt.n	800de82 <__ieee754_sqrt+0x15e>
 800de00:	f10c 0801 	add.w	r8, ip, #1
 800de04:	eba2 020c 	sub.w	r2, r2, ip
 800de08:	429e      	cmp	r6, r3
 800de0a:	bf88      	it	hi
 800de0c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800de10:	1b9b      	subs	r3, r3, r6
 800de12:	4421      	add	r1, r4
 800de14:	46c4      	mov	ip, r8
 800de16:	0052      	lsls	r2, r2, #1
 800de18:	3f01      	subs	r7, #1
 800de1a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800de1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800de22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800de26:	d1dd      	bne.n	800dde4 <__ieee754_sqrt+0xc0>
 800de28:	4313      	orrs	r3, r2
 800de2a:	d006      	beq.n	800de3a <__ieee754_sqrt+0x116>
 800de2c:	1c4c      	adds	r4, r1, #1
 800de2e:	bf13      	iteet	ne
 800de30:	3101      	addne	r1, #1
 800de32:	3001      	addeq	r0, #1
 800de34:	4639      	moveq	r1, r7
 800de36:	f021 0101 	bicne.w	r1, r1, #1
 800de3a:	1043      	asrs	r3, r0, #1
 800de3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800de40:	0849      	lsrs	r1, r1, #1
 800de42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800de46:	07c2      	lsls	r2, r0, #31
 800de48:	bf48      	it	mi
 800de4a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800de4e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800de52:	460c      	mov	r4, r1
 800de54:	463d      	mov	r5, r7
 800de56:	e77f      	b.n	800dd58 <__ieee754_sqrt+0x34>
 800de58:	0ada      	lsrs	r2, r3, #11
 800de5a:	3815      	subs	r0, #21
 800de5c:	055b      	lsls	r3, r3, #21
 800de5e:	2a00      	cmp	r2, #0
 800de60:	d0fa      	beq.n	800de58 <__ieee754_sqrt+0x134>
 800de62:	02d7      	lsls	r7, r2, #11
 800de64:	d50a      	bpl.n	800de7c <__ieee754_sqrt+0x158>
 800de66:	f1c1 0420 	rsb	r4, r1, #32
 800de6a:	fa23 f404 	lsr.w	r4, r3, r4
 800de6e:	1e4d      	subs	r5, r1, #1
 800de70:	408b      	lsls	r3, r1
 800de72:	4322      	orrs	r2, r4
 800de74:	1b41      	subs	r1, r0, r5
 800de76:	e788      	b.n	800dd8a <__ieee754_sqrt+0x66>
 800de78:	4608      	mov	r0, r1
 800de7a:	e7f0      	b.n	800de5e <__ieee754_sqrt+0x13a>
 800de7c:	0052      	lsls	r2, r2, #1
 800de7e:	3101      	adds	r1, #1
 800de80:	e7ef      	b.n	800de62 <__ieee754_sqrt+0x13e>
 800de82:	46e0      	mov	r8, ip
 800de84:	e7be      	b.n	800de04 <__ieee754_sqrt+0xe0>
 800de86:	bf00      	nop
 800de88:	7ff00000 	.word	0x7ff00000

0800de8c <fabs>:
 800de8c:	ec51 0b10 	vmov	r0, r1, d0
 800de90:	ee10 2a10 	vmov	r2, s0
 800de94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800de98:	ec43 2b10 	vmov	d0, r2, r3
 800de9c:	4770      	bx	lr

0800de9e <finite>:
 800de9e:	b082      	sub	sp, #8
 800dea0:	ed8d 0b00 	vstr	d0, [sp]
 800dea4:	9801      	ldr	r0, [sp, #4]
 800dea6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800deaa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800deae:	0fc0      	lsrs	r0, r0, #31
 800deb0:	b002      	add	sp, #8
 800deb2:	4770      	bx	lr
 800deb4:	0000      	movs	r0, r0
	...

0800deb8 <nan>:
 800deb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dec0 <nan+0x8>
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop
 800dec0:	00000000 	.word	0x00000000
 800dec4:	7ff80000 	.word	0x7ff80000

0800dec8 <rint>:
 800dec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800deca:	ec51 0b10 	vmov	r0, r1, d0
 800dece:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ded2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ded6:	2e13      	cmp	r6, #19
 800ded8:	ee10 4a10 	vmov	r4, s0
 800dedc:	460b      	mov	r3, r1
 800dede:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800dee2:	dc58      	bgt.n	800df96 <rint+0xce>
 800dee4:	2e00      	cmp	r6, #0
 800dee6:	da2b      	bge.n	800df40 <rint+0x78>
 800dee8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800deec:	4302      	orrs	r2, r0
 800deee:	d023      	beq.n	800df38 <rint+0x70>
 800def0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800def4:	4302      	orrs	r2, r0
 800def6:	4254      	negs	r4, r2
 800def8:	4314      	orrs	r4, r2
 800defa:	0c4b      	lsrs	r3, r1, #17
 800defc:	0b24      	lsrs	r4, r4, #12
 800defe:	045b      	lsls	r3, r3, #17
 800df00:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800df04:	ea44 0103 	orr.w	r1, r4, r3
 800df08:	4b32      	ldr	r3, [pc, #200]	; (800dfd4 <rint+0x10c>)
 800df0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800df0e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800df12:	4602      	mov	r2, r0
 800df14:	460b      	mov	r3, r1
 800df16:	4630      	mov	r0, r6
 800df18:	4639      	mov	r1, r7
 800df1a:	f7f2 f9c7 	bl	80002ac <__adddf3>
 800df1e:	e9cd 0100 	strd	r0, r1, [sp]
 800df22:	463b      	mov	r3, r7
 800df24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df28:	4632      	mov	r2, r6
 800df2a:	f7f2 f9bd 	bl	80002a8 <__aeabi_dsub>
 800df2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df32:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800df36:	4639      	mov	r1, r7
 800df38:	ec41 0b10 	vmov	d0, r0, r1
 800df3c:	b003      	add	sp, #12
 800df3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df40:	4a25      	ldr	r2, [pc, #148]	; (800dfd8 <rint+0x110>)
 800df42:	4132      	asrs	r2, r6
 800df44:	ea01 0702 	and.w	r7, r1, r2
 800df48:	4307      	orrs	r7, r0
 800df4a:	d0f5      	beq.n	800df38 <rint+0x70>
 800df4c:	0851      	lsrs	r1, r2, #1
 800df4e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800df52:	4314      	orrs	r4, r2
 800df54:	d00c      	beq.n	800df70 <rint+0xa8>
 800df56:	ea23 0201 	bic.w	r2, r3, r1
 800df5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800df5e:	2e13      	cmp	r6, #19
 800df60:	fa43 f606 	asr.w	r6, r3, r6
 800df64:	bf0c      	ite	eq
 800df66:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800df6a:	2400      	movne	r4, #0
 800df6c:	ea42 0306 	orr.w	r3, r2, r6
 800df70:	4918      	ldr	r1, [pc, #96]	; (800dfd4 <rint+0x10c>)
 800df72:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800df76:	4622      	mov	r2, r4
 800df78:	e9d5 4500 	ldrd	r4, r5, [r5]
 800df7c:	4620      	mov	r0, r4
 800df7e:	4629      	mov	r1, r5
 800df80:	f7f2 f994 	bl	80002ac <__adddf3>
 800df84:	e9cd 0100 	strd	r0, r1, [sp]
 800df88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df8c:	4622      	mov	r2, r4
 800df8e:	462b      	mov	r3, r5
 800df90:	f7f2 f98a 	bl	80002a8 <__aeabi_dsub>
 800df94:	e7d0      	b.n	800df38 <rint+0x70>
 800df96:	2e33      	cmp	r6, #51	; 0x33
 800df98:	dd07      	ble.n	800dfaa <rint+0xe2>
 800df9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800df9e:	d1cb      	bne.n	800df38 <rint+0x70>
 800dfa0:	ee10 2a10 	vmov	r2, s0
 800dfa4:	f7f2 f982 	bl	80002ac <__adddf3>
 800dfa8:	e7c6      	b.n	800df38 <rint+0x70>
 800dfaa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800dfae:	f04f 36ff 	mov.w	r6, #4294967295
 800dfb2:	40d6      	lsrs	r6, r2
 800dfb4:	4230      	tst	r0, r6
 800dfb6:	d0bf      	beq.n	800df38 <rint+0x70>
 800dfb8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800dfbc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800dfc0:	bf1f      	itttt	ne
 800dfc2:	ea24 0101 	bicne.w	r1, r4, r1
 800dfc6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800dfca:	fa44 f202 	asrne.w	r2, r4, r2
 800dfce:	ea41 0402 	orrne.w	r4, r1, r2
 800dfd2:	e7cd      	b.n	800df70 <rint+0xa8>
 800dfd4:	0800e800 	.word	0x0800e800
 800dfd8:	000fffff 	.word	0x000fffff
 800dfdc:	00000000 	.word	0x00000000

0800dfe0 <scalbn>:
 800dfe0:	b570      	push	{r4, r5, r6, lr}
 800dfe2:	ec55 4b10 	vmov	r4, r5, d0
 800dfe6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dfea:	4606      	mov	r6, r0
 800dfec:	462b      	mov	r3, r5
 800dfee:	b99a      	cbnz	r2, 800e018 <scalbn+0x38>
 800dff0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dff4:	4323      	orrs	r3, r4
 800dff6:	d036      	beq.n	800e066 <scalbn+0x86>
 800dff8:	4b39      	ldr	r3, [pc, #228]	; (800e0e0 <scalbn+0x100>)
 800dffa:	4629      	mov	r1, r5
 800dffc:	ee10 0a10 	vmov	r0, s0
 800e000:	2200      	movs	r2, #0
 800e002:	f7f2 fb09 	bl	8000618 <__aeabi_dmul>
 800e006:	4b37      	ldr	r3, [pc, #220]	; (800e0e4 <scalbn+0x104>)
 800e008:	429e      	cmp	r6, r3
 800e00a:	4604      	mov	r4, r0
 800e00c:	460d      	mov	r5, r1
 800e00e:	da10      	bge.n	800e032 <scalbn+0x52>
 800e010:	a32b      	add	r3, pc, #172	; (adr r3, 800e0c0 <scalbn+0xe0>)
 800e012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e016:	e03a      	b.n	800e08e <scalbn+0xae>
 800e018:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e01c:	428a      	cmp	r2, r1
 800e01e:	d10c      	bne.n	800e03a <scalbn+0x5a>
 800e020:	ee10 2a10 	vmov	r2, s0
 800e024:	4620      	mov	r0, r4
 800e026:	4629      	mov	r1, r5
 800e028:	f7f2 f940 	bl	80002ac <__adddf3>
 800e02c:	4604      	mov	r4, r0
 800e02e:	460d      	mov	r5, r1
 800e030:	e019      	b.n	800e066 <scalbn+0x86>
 800e032:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e036:	460b      	mov	r3, r1
 800e038:	3a36      	subs	r2, #54	; 0x36
 800e03a:	4432      	add	r2, r6
 800e03c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e040:	428a      	cmp	r2, r1
 800e042:	dd08      	ble.n	800e056 <scalbn+0x76>
 800e044:	2d00      	cmp	r5, #0
 800e046:	a120      	add	r1, pc, #128	; (adr r1, 800e0c8 <scalbn+0xe8>)
 800e048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e04c:	da1c      	bge.n	800e088 <scalbn+0xa8>
 800e04e:	a120      	add	r1, pc, #128	; (adr r1, 800e0d0 <scalbn+0xf0>)
 800e050:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e054:	e018      	b.n	800e088 <scalbn+0xa8>
 800e056:	2a00      	cmp	r2, #0
 800e058:	dd08      	ble.n	800e06c <scalbn+0x8c>
 800e05a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e05e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e062:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e066:	ec45 4b10 	vmov	d0, r4, r5
 800e06a:	bd70      	pop	{r4, r5, r6, pc}
 800e06c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e070:	da19      	bge.n	800e0a6 <scalbn+0xc6>
 800e072:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e076:	429e      	cmp	r6, r3
 800e078:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e07c:	dd0a      	ble.n	800e094 <scalbn+0xb4>
 800e07e:	a112      	add	r1, pc, #72	; (adr r1, 800e0c8 <scalbn+0xe8>)
 800e080:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d1e2      	bne.n	800e04e <scalbn+0x6e>
 800e088:	a30f      	add	r3, pc, #60	; (adr r3, 800e0c8 <scalbn+0xe8>)
 800e08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08e:	f7f2 fac3 	bl	8000618 <__aeabi_dmul>
 800e092:	e7cb      	b.n	800e02c <scalbn+0x4c>
 800e094:	a10a      	add	r1, pc, #40	; (adr r1, 800e0c0 <scalbn+0xe0>)
 800e096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d0b8      	beq.n	800e010 <scalbn+0x30>
 800e09e:	a10e      	add	r1, pc, #56	; (adr r1, 800e0d8 <scalbn+0xf8>)
 800e0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0a4:	e7b4      	b.n	800e010 <scalbn+0x30>
 800e0a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0aa:	3236      	adds	r2, #54	; 0x36
 800e0ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	4b0c      	ldr	r3, [pc, #48]	; (800e0e8 <scalbn+0x108>)
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	e7e8      	b.n	800e08e <scalbn+0xae>
 800e0bc:	f3af 8000 	nop.w
 800e0c0:	c2f8f359 	.word	0xc2f8f359
 800e0c4:	01a56e1f 	.word	0x01a56e1f
 800e0c8:	8800759c 	.word	0x8800759c
 800e0cc:	7e37e43c 	.word	0x7e37e43c
 800e0d0:	8800759c 	.word	0x8800759c
 800e0d4:	fe37e43c 	.word	0xfe37e43c
 800e0d8:	c2f8f359 	.word	0xc2f8f359
 800e0dc:	81a56e1f 	.word	0x81a56e1f
 800e0e0:	43500000 	.word	0x43500000
 800e0e4:	ffff3cb0 	.word	0xffff3cb0
 800e0e8:	3c900000 	.word	0x3c900000

0800e0ec <_init>:
 800e0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ee:	bf00      	nop
 800e0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0f2:	bc08      	pop	{r3}
 800e0f4:	469e      	mov	lr, r3
 800e0f6:	4770      	bx	lr

0800e0f8 <_fini>:
 800e0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fa:	bf00      	nop
 800e0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0fe:	bc08      	pop	{r3}
 800e100:	469e      	mov	lr, r3
 800e102:	4770      	bx	lr
